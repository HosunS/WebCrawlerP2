¦Ifinal_url¡DtypeLhttp_headers¢DtypeEvalue‡¢Ak¢DtypeEvalueNContent-LengthAv¢DtypeEvalueD6314¢Ak¢DtypeEvalueMAccept-RangesAv¢DtypeEvalueEbytes¢Ak¢DtypeEvalueFServerAv¢DtypeEvalueX4Apache/2.4.6 (CentOS) OpenSSL/1.0.2k-fips SVN/1.7.14¢Ak¢DtypeEvalueMLast-ModifiedAv¢DtypeEvalueXMon, 11 Feb 2019 04:12:40 GMT¢Ak¢DtypeEvalueDETagAv¢DtypeEvalueT"18aa-58196850c5704"¢Ak¢DtypeEvalueDDateAv¢DtypeEvalueXMon, 11 Feb 2019 05:14:48 GMT¢Ak¢DtypeEvalueLContent-TypeAv¢DtypeEvalueXtext/html; charset=UTF-8Kraw_content¢DtypeEvalueYª<HTML>
<HEAD>
<META http-equiv="Content-Type" content="text/html; charset=US-ASCII">
<TITLE>250P Computer Systems Architecture</TITLE>
<LINK HREF="./css/main.css" TYPE="text/css" REL="stylesheet">
<META NAME="Description" CONTENT="cs250P Computer Systems Architecture (Anton Burtsev)">
<META NAME="Keywords" CONTENT="Anton Burtsev, Burtsev, Anton, cs250P">
<SCRIPT SRC="./scripts/image_switcher.js" LANGUAGE="JavaScript"></SCRIPT>
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" TOPMARGIN="0" MARGINWIDTH="0" MARGINHEIGHT="0">
	<TABLE  ID="text" ALIGN="CENTER" WIDTH="600" BORDER="0" CELLPADDING="0" CELLSPACING="0">
	<TR>
		<TD ALIGN="LEFT" BGCOLOR="#FFFFFF"><!-- top margin --> 
			<IMG SRC="./images/spacer.gif" WIDTH="100%" HEIGHT="15" ALT="" BORDER="0"/>
		</TD>
	</TR>
	<TR>
	<TD>
		<DIV ID="tech_nav">
			<A HREF="../index.html">Home</A>
			<IMG SRC="./images/spacer.gif" WIDTH="100%" HEIGHT="30" ALT="" BORDER="0"/>
		</DIV>
	</TD>
	</TR>	
	<TR>
	<TD COLSPAN="4" ALIGN="LEFT" BGCOLOR="#FFFFFF">



		<P>

<h1>HW2: RISC instruction set, pipelining</h1>

<p>
  <b>Note:</b>
  Make reasonable assumptions where necessary and clearly state them.
  Feel free to discuss problems with classmates, but the only written material
  that you may consult while writing your solutions are the textbook, lecture
  notes, and lecture slides.


<h3>Problem 1: RISC Instruction set</h3>

Take a look at the RISC instruction set in the book (Section A.9). Write a
simple RISC assembly program that finds a sum of numbers from 1 to N. 


<h3>Problem 2: Basic pipelining</h3>

An unpipelined processor takes 3 ns to work on one instruction. It then takes
0.2 ns to latch its results into latches. I was able to convert the circuits
into 5 equal sequential pipeline stages. Answer the following, assuming that
there are no stalls in the pipeline.

<p> <ul>

<li>What are the cycle times in the two processors?

<li>What are the clock speeds?

<li>What are the IPCs?

<li>How long does it take to finish one instr?

<li>What is the speedup from pipelining?

<li> If I was able to build a magical 1000-stage pipeline, where each stage
took an equal amount of time, what speedup would I get? 

</ul>


<h3> Problem 3: Data Dependences</h3>

  Consider a 32-bit in-order pipeline that has the following stages.  Note
the many differences from the examples in class: a stage that converts CISC
instructions to micro-ops, one stage to do register reads, one stage to do
register writes, three
stages to access the data memory, and 4 stages for the FP-ALU.  For the
questions below, assume that each CISC instruction is simple and is
converted to a single micro-op.

<p>
<table cellpadding="2" cellspacing="2" border="1" width="90%">
  <tbody>
    <tr align="center">
      <td align="center" width="10%"> <font color="blue"> Fetch </font> </td>
      <td align="center" width="10%"> <font color="blue"> Convert to micro-ops </font> </td>
      <td align="center" width="10%"> <font color="blue"> Decode </font> </td>
      <td align="center" width="10%"> <font color="blue"> Regread </font> </td>
      <td align="center" width="10%"> <font color="blue"> IntALU </font> </td>
      <td align="center" width="10%"> <font color="blue"> Regwrite </font></td>
    </tr>

    <tr align="center">
      <td align="center" width="10%"> <font color="blue"> </font> </td>
      <td align="center" width="10%"> <font color="blue"> </font> </td>
      <td align="center" width="10%"> <font color="blue"> </font> </td>
      <td align="center" width="10%"> <font color="blue"> </font> </td>
      <td align="center" width="10%"> <font color="blue"> IntALU </font> </td>
      <td align="center" width="10%"> <font color="blue"> Datamem1 </font> </td>
      <td align="center" width="10%"> <font color="blue"> Datamem2 </font> </td>
      <td align="center" width="10%"> <font color="blue"> Datamem3 </font> </td>
      <td align="center" width="10%"> <font color="blue"> Regwrite </font></td>
    </tr>

    <tr align="center">
      <td align="center" width="10%"> <font color="blue"> </font> </td>
      <td align="center" width="10%"> <font color="blue"> </font> </td>
      <td align="center" width="10%"> <font color="blue"> </font> </td>
      <td align="center" width="10%"> <font color="blue"> </font> </td>
      <td align="center" width="10%"> <font color="blue"> FPALU1 </font> </td>
      <td align="center" width="10%"> <font color="blue"> FPALU2 </font> </td>
      <td align="center" width="10%"> <font color="blue"> FPALU3 </font> </td>
      <td align="center" width="10%"> <font color="blue"> FPALU4 </font> </td>
      <td align="center" width="10%"> <font color="blue"> Regwrite </font></td>
    </tr>
  </tbody>
</table>

<p>
After instruction fetch, the instruction goes through the micro-op conversion
stage, a Decode stage where dependences are analyzed, and
a Regread stage where
input operands are read from the register file.
After this, an instruction takes one of three possible paths.
Int-adds go through the stages labeled "IntALU" and "Regwrite".
Loads/stores go through the stages labeled
"IntALU", "Datamem1", "Datamem2", "Datamem3", and "Regwrite". 
FP-adds go through
the stages labeled "FPALU1", "FPALU2", "FPALU3", "FPALU4", and "Regwrite".
Assume that the register file has an infinite number of write
ports so stalls are never introduced because of structural hazards.
How many stall cycles are introduced between the following pairs of
successive instructions (i) for a processor with no register bypassing and
(ii) for a processor with full bypassing?
<ol>
<li> Int-add, followed by a dependent Int-add
<li> FP-add, followed by a dependent FP-add
<li> Load, providing the address for a store
<li> Load, providing the data for a store
<li> FP-add, providing the data for a store
</ol>
<p>



<p>Submit your solution through Gradescope <a
href="https://www.gradescope.com/courses/39177">HW2</a> (as a PDF file (please
mark which parts of the PDF are used for each question (this can be done
through Gradescope)). 



	</TD>			
	</TR>
	<TR>
		<TD ALIGN="LEFT" BGCOLOR="#FFFFFF"><!-- top margin --> 
			<IMG SRC="./images/spacer.gif" WIDTH="100%" HEIGHT="15" ALT="" BORDER="0"/>
		</TD>
	</TR>
	<TR>
	<TD COLSPAN="4">
		<DIV ID="tech">Updated: February, 2019</DIV>
	</TD>
	</TR>
	</TABLE>
</BODY>
</HTML>

Mis_redirected¢DtypeEvalueôIhttp_code¢DtypeEvalueÈQdownload_complete¢DtypeEvalueõ