¦Ifinal_url¡DtypeLhttp_headers¢DtypeEvalueˆ¢Ak¢DtypeEvalueQTransfer-EncodingAv¢DtypeEvalueGchunked¢Ak¢DtypeEvalueJSet-CookieAv¢DtypeEvalueXI79eed619ece9b34315b1b9f5af9f028a=c7012e6cf7005cadd3361283511ccb77; path=/¢Ak¢DtypeEvalueFServerAv¢DtypeEvalueX4Apache/2.4.6 (CentOS) OpenSSL/1.0.2k-fips SVN/1.7.14¢Ak¢DtypeEvalueFPragmaAv¢DtypeEvalueHno-cache¢Ak¢DtypeEvalueMCache-ControlAv¢DtypeEvalueHno-cache¢Ak¢DtypeEvalueDDateAv¢DtypeEvalueXWed, 30 Jan 2019 20:11:01 GMT¢Ak¢DtypeEvalueCP3PAv¢DtypeEvalueX2CP="NOI ADM DEV PSAi COM NAV OUR OTRo STP IND DEM"¢Ak¢DtypeEvalueLContent-TypeAv¢DtypeEvalueXtext/html; charset=utf-8Kraw_content¢DtypeEvalueY5¹<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en-gb" lang="en-gb" dir="ltr" >
<head>
  <base href="http://tutors.ics.uci.edu/index.php/tutor-resources/81-cpp-resources/120-cpp-google-tests" />
  <meta http-equiv="content-type" content="text/html; charset=utf-8" />
  <meta name="author" content="Super User" />
  <meta name="generator" content="Joomla! - Open Source Content Management" />
  <title>C++ Google Tests</title>
  <link href="/templates/beez_20/favicon.ico" rel="shortcut icon" type="image/vnd.microsoft.icon" />
  <link rel="stylesheet" href="/templates/system/css/system.css" type="text/css" />
  <link rel="stylesheet" href="/templates/beez_20/css/position.css" type="text/css" media="screen,projection"  />
  <link rel="stylesheet" href="/templates/beez_20/css/layout.css" type="text/css" media="screen,projection"  />
  <link rel="stylesheet" href="/templates/beez_20/css/print.css" type="text/css" media="print"  />
  <link rel="stylesheet" href="/templates/beez_20/css/general.css" type="text/css" />
  <link rel="stylesheet" href="/templates/beez_20/css/personal.css" type="text/css" />
  <script src="/media/system/js/mootools-core.js" type="text/javascript"></script>
  <script src="/media/system/js/core.js" type="text/javascript"></script>
  <script src="/media/system/js/caption.js" type="text/javascript"></script>
  <script src="/media/system/js/mootools-more.js" type="text/javascript"></script>
  <script src="/templates/beez_20/javascript/md_stylechanger.js" type="text/javascript"></script>
  <script src="/templates/beez_20/javascript/hide.js" type="text/javascript"></script>
  <script type="text/javascript">
window.addEvent('load', function() {
				new JCaption('img.caption');
			});
  </script>


<!--[if lte IE 6]>
<link href="/templates/beez_20/css/ieonly.css" rel="stylesheet" type="text/css" />
<style type="text/css">
#line {
  width:98% ;
}
.logoheader {
  height:200px;
}
#header ul.menu {
  display:block !important;
  width:98.2% ;
}
</style>
<![endif]-->

<!--[if IE 7]>
<link href="/templates/beez_20/css/ie7only.css" rel="stylesheet" type="text/css" />
<![endif]-->
<!--<script type="text/javascript">
  var big ='72%';
  var small='53%';
  var altopen='is open';
  var altclose='is closed';
  var bildauf='/templates/beez_20/images/plus.png';
  var bildzu='/templates/beez_20/images/minus.png';
  var rightopen='Open info';
  var rightclose='Close info';
  var fontSizeTitle='Font size';
  var bigger='Bigger';
  var reset='Reset';
  var smaller='Smaller';
  var biggerTitle='Increase size';
  var resetTitle='Revert styles to default';
  var smallerTitle='Decrease size';
</script>-->

</head>

<body>

<div id="all">
        <div id="back">
                <div id="header">
                                <div class="logoheader">
                                        <h1 id="logo">

                                                                                                                                                                                                        <span class="header1">
                                                                                </span></h1>
                                </div><!-- end logoheader -->
                                        <ul class="skiplinks">
                                                <li><a href="#main" class="u2">Skip to content</a></li>
                                                <li><a href="#nav" class="u2">Jump to main navigation and login</a></li>
                                                                                    </ul>
                                        <!--<h2 class="unseen">Nav view search</h2>-->
                                        <h3 class="unseen">Navigation</h3>
                                        
<ul class="menu">
<li class="item-464"><a href="/" >Home</a></li><li class="item-469"><a href="/index.php/becoming-a-tutor" >Becoming a Tutor</a></li><li class="item-470 current active"><a href="/index.php/tutor-resources" >Learning Resources</a></li><li class="item-477"><a href="/index.php/tutor-coordinators" >Tutor Coordinators</a></li><li class="item-476"><a href="/index.php/contact" >Contact Us</a></li></ul>

                                        <div id="line">
                                        <!-- <div id="fontsize"></div> -->
                                        <!--<h3 class="unseen">Search</h3> -->
                                        
                                        </div> <!-- end line -->


                        </div><!-- end header -->
                        <div id="contentarea">
                                        <div id="breadcrumbs">

                                                        

                                        </div>

                                        

                                                        <div class="left1 leftbigger" id="nav">
                                                   <div class="moduletable_menu">
 <h3><span
	class="backh"><span class="backh2"><span class="backh3">This Site</span></span></span></h3>
 
<ul class="menu">
<li class="item-464"><a href="/" >Home</a></li><li class="item-469"><a href="/index.php/becoming-a-tutor" >Becoming a Tutor</a></li><li class="item-470 current active"><a href="/index.php/tutor-resources" >Learning Resources</a></li><li class="item-477"><a href="/index.php/tutor-coordinators" >Tutor Coordinators</a></li><li class="item-476"><a href="/index.php/contact" >Contact Us</a></li></ul>
</div>

                                                                
                                                                


                                                        </div><!-- end navi -->
               
                                        <div id="wrapper2" >

                                                <div id="main">

                                                
                                                        
<div id="system-message-container">
</div>
                                                        <div class="item-page">

	<h2>
			<a href="/index.php/tutor-resources/81-cpp-resources/120-cpp-google-tests">
		C++ Google Tests</a>
		</h2>








<p><strong>By Matt Butrovich</strong></p>
<p style="text-align: justify;"><span style="font-family: 'Courier New';">google_tests.txt<br /> Writing Effective Google Tests<br /> <br /> Writing good unit tests is an essential skill for software development. Without<br /> being able to prove faith in your code, it will be difficult to create complex<br /> projects on top of existing codebases.<br /> <br /> Before we get into the technical details, here are some basic tips:<br /> <br /> Write units alongside or even before implementing your new functionality. This<br /> will give you a better understanding of expected behavior, and more easily allow<br /> you to translate your functionality to code. Also, assuming your tests were<br /> written correctly, you'll know very quickly if your new functionality is working<br /> as intended if you already have a comprehensive test suite.<br /> <br /> For the Google Test framework, tests are declared with a macro called TEST that<br /> takes two parameters. The first parameter is typically the test suite name,<br /> while the second parameter refers to the specific test's name/functionality. A<br /> test suite is simply a collection of tests. It's not unusual for a test's name<br /> to seem overly long or verbose, because when running all of your tests at once<br /> it makes it very easy to understand which test scenario failed.<br /> <br /> To actually test behavior, you'll typically (but not exclusively) rely on the<br /> macros ASSERT_EQ and EXPECT_EQ which each take two parameters. The only<br /> difference between these two macros is that is an ASSERT_EQ fails, the test<br /> execution stops and moves onto the next test. EXPECT_EQ, however, can fail and<br /> continue through the test and report its failure at the end.<br /> <br /> For unit tests, it's common for developers to take a "white box" approach to<br /> testing. This means that tests are written with specific knowledge of the<br /> program's source code. It's also possible to write unit tests taking a "black<br /> box" approach where no knowledge of the underlying behavior is accounted for,<br /> but if you know that you've written special code to account for corner cases,<br /> then you'll want unit tests to test those cases.<br /> <br /> In this example, let's say we want to implement some sort of contains() method<br /> for a set data structure. The pseudo-code for that sort of function might look<br /> like:<br /> <br /> contains:<br /> {<br /> <span>&nbsp;&nbsp;&nbsp;&nbsp; </span>input: item type<br /> <span>&nbsp;&nbsp;&nbsp;&nbsp; </span>output: boolean<br /> <span>&nbsp;&nbsp;&nbsp;&nbsp; </span>if size of set == 0<br /> <span>&nbsp;&nbsp;&nbsp;&nbsp; </span>{<br /> <span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>return false<br /> <span>&nbsp;&nbsp;&nbsp;&nbsp; </span>}<br /> <span>&nbsp;&nbsp;&nbsp;&nbsp; </span>else<br /> <span>&nbsp;&nbsp;&nbsp;&nbsp; </span>{<br /> <span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>iterate through underlying data structure<br /> <span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>{<br /> <span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>if input item matches current item<br /> <span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>{<br /> <span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>return true<br /> <span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>}<br /> <span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>}<br /> <span>&nbsp;&nbsp;&nbsp;&nbsp; </span>}<br /> <span>&nbsp;&nbsp;&nbsp;&nbsp; </span>return false<br /> }<br /> <br /> Because we're taking a white box approach, we should analyze the possible code<br /> paths in this function. This function has 3 possible return statements, so at<br /> least 3 unit tests should be written to guarantee all code paths are working<br /> correctly.<br /> <br /> The first unit test will stress the first return statement, where we assume that<br /> the set cannot contain the input item because the size of the underlying data<br /> structure is 0.<br /> <br /> TEST(ContainsFunction,returnsFalseOnEmptySet)<br /> {<br /> <span>&nbsp;&nbsp;&nbsp;&nbsp; </span>Set&lt;std::string&gt; s;<br /> <span>&nbsp;&nbsp;&nbsp;&nbsp; </span>EXPECT_EQ(s.contains("hello"),false);<br /> }<br /> <br /> The second unit test stresses the second possible return statement, where our<br /> contains function must iterate through the underlying data structure until an<br /> item match is found.<br /> <br /> TEST(ContainsFunction,returnsTrueWhenKeyPresent)<br /> {<br /> <span>&nbsp;&nbsp;&nbsp;&nbsp; </span>HashMap hm;<br /> <span>&nbsp;&nbsp;&nbsp;&nbsp; </span>hm.add("Boo","Hello");<br /> <span>&nbsp;&nbsp;&nbsp;&nbsp; </span>hm.add("Boo","Goodbye");<br /> <span>&nbsp;&nbsp;&nbsp;&nbsp; </span>EXPECT_EQ(hm.value("Boo"),"Goodbye");<br /> }<br /> <br /> The third unit test stresses the third possible return statement, where our<br /> contains function must iterate through the underlying data structure through the<br /> end without ever finding a match. Only after the iteration is over will the <br /> return statement be triggered to say that the item is not present. An example<br /> of the kind of error that this test might catch you be a segmentation fault<br /> caused by iterating off the end of the list in search of your desired key. If<br /> the underlying data type is an array, this could be caused by iterating to an<br /> index that's too large. If the underlying data type is a linked list, this<br /> could be caused by trying to dereference a null "next" pointer at the end of the<br /> list.<br /> <br /> TEST(ContainsFunction,returnsFalseWhenKeyNotPresent)<br /> {<br /> <span>&nbsp;&nbsp;&nbsp;&nbsp; </span>Set&lt;std::string&gt; s;<br /> <span>&nbsp;&nbsp;&nbsp;&nbsp; </span>s.add("foo");<br /> <span>&nbsp;&nbsp;&nbsp;&nbsp; </span>s.add("bar");<br /> <span>&nbsp;&nbsp;&nbsp;&nbsp; </span>EXPECT_EQ(s.contains("hello"),false);<br /> }<br /> <br /> Depending on the complexity of your underlying data type for this class, you<br /> might want to write even more unit tests to test corner cases.</span></p> 
	
</div>


                                                </div><!-- end main -->

                                        </div><!-- end wrapper -->

                                
                        
                                <div class="wrap"></div>

                                </div> <!-- end contentarea -->

                        </div><!-- back -->

                </div><!-- all -->

                <div id="footer-outer">
                        
                        <div id="footer-sub">


                                <div id="footer">

                                        
                                        

                                </div><!-- end footer -->

                        </div>

                </div>
        
        </body>
</html>
Mis_redirected¢DtypeEvalueôIhttp_code¢DtypeEvalueÈQdownload_complete¢DtypeEvalueõ