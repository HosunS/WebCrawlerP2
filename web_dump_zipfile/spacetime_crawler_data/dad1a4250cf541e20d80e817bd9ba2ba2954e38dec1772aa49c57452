¦Ifinal_url¡DtypeLhttp_headers¢DtypeEvalueˆ¢Ak¢DtypeEvalueQTransfer-EncodingAv¢DtypeEvalueGchunked¢Ak¢DtypeEvalueJSet-CookieAv¢DtypeEvalueXI79eed619ece9b34315b1b9f5af9f028a=f6a692fde10927da25dd364247075ea9; path=/¢Ak¢DtypeEvalueFServerAv¢DtypeEvalueX4Apache/2.4.6 (CentOS) OpenSSL/1.0.2k-fips SVN/1.7.14¢Ak¢DtypeEvalueFPragmaAv¢DtypeEvalueHno-cache¢Ak¢DtypeEvalueMCache-ControlAv¢DtypeEvalueHno-cache¢Ak¢DtypeEvalueDDateAv¢DtypeEvalueXThu, 31 Jan 2019 01:47:34 GMT¢Ak¢DtypeEvalueCP3PAv¢DtypeEvalueX2CP="NOI ADM DEV PSAi COM NAV OUR OTRo STP IND DEM"¢Ak¢DtypeEvalueLContent-TypeAv¢DtypeEvalueXtext/html; charset=utf-8Kraw_content¢DtypeEvalueYT†<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en-gb" lang="en-gb" dir="ltr" >
<head>
  <base href="http://tutors.ics.uci.edu/index.php/79-python-resources/102-burrito-class" />
  <meta http-equiv="content-type" content="text/html; charset=utf-8" />
  <meta name="author" content="Super User" />
  <meta name="generator" content="Joomla! - Open Source Content Management" />
  <title>Burrito Class</title>
  <link href="/templates/beez_20/favicon.ico" rel="shortcut icon" type="image/vnd.microsoft.icon" />
  <link rel="stylesheet" href="/templates/system/css/system.css" type="text/css" />
  <link rel="stylesheet" href="/templates/beez_20/css/position.css" type="text/css" media="screen,projection"  />
  <link rel="stylesheet" href="/templates/beez_20/css/layout.css" type="text/css" media="screen,projection"  />
  <link rel="stylesheet" href="/templates/beez_20/css/print.css" type="text/css" media="print"  />
  <link rel="stylesheet" href="/templates/beez_20/css/general.css" type="text/css" />
  <link rel="stylesheet" href="/templates/beez_20/css/personal.css" type="text/css" />
  <script src="/media/system/js/mootools-core.js" type="text/javascript"></script>
  <script src="/media/system/js/core.js" type="text/javascript"></script>
  <script src="/media/system/js/caption.js" type="text/javascript"></script>
  <script src="/media/system/js/mootools-more.js" type="text/javascript"></script>
  <script src="/templates/beez_20/javascript/md_stylechanger.js" type="text/javascript"></script>
  <script src="/templates/beez_20/javascript/hide.js" type="text/javascript"></script>
  <script type="text/javascript">
window.addEvent('load', function() {
				new JCaption('img.caption');
			});
  </script>


<!--[if lte IE 6]>
<link href="/templates/beez_20/css/ieonly.css" rel="stylesheet" type="text/css" />
<style type="text/css">
#line {
  width:98% ;
}
.logoheader {
  height:200px;
}
#header ul.menu {
  display:block !important;
  width:98.2% ;
}
</style>
<![endif]-->

<!--[if IE 7]>
<link href="/templates/beez_20/css/ie7only.css" rel="stylesheet" type="text/css" />
<![endif]-->
<!--<script type="text/javascript">
  var big ='72%';
  var small='53%';
  var altopen='is open';
  var altclose='is closed';
  var bildauf='/templates/beez_20/images/plus.png';
  var bildzu='/templates/beez_20/images/minus.png';
  var rightopen='Open info';
  var rightclose='Close info';
  var fontSizeTitle='Font size';
  var bigger='Bigger';
  var reset='Reset';
  var smaller='Smaller';
  var biggerTitle='Increase size';
  var resetTitle='Revert styles to default';
  var smallerTitle='Decrease size';
</script>-->

</head>

<body>

<div id="all">
        <div id="back">
                <div id="header">
                                <div class="logoheader">
                                        <h1 id="logo">

                                                                                                                                                                                                        <span class="header1">
                                                                                </span></h1>
                                </div><!-- end logoheader -->
                                        <ul class="skiplinks">
                                                <li><a href="#main" class="u2">Skip to content</a></li>
                                                <li><a href="#nav" class="u2">Jump to main navigation and login</a></li>
                                                                                    </ul>
                                        <!--<h2 class="unseen">Nav view search</h2>-->
                                        <h3 class="unseen">Navigation</h3>
                                        
<ul class="menu">
<li class="item-464 active"><a href="/" >Home</a></li><li class="item-469"><a href="/index.php/becoming-a-tutor" >Becoming a Tutor</a></li><li class="item-470"><a href="/index.php/tutor-resources" >Learning Resources</a></li><li class="item-477"><a href="/index.php/tutor-coordinators" >Tutor Coordinators</a></li><li class="item-476"><a href="/index.php/contact" >Contact Us</a></li></ul>

                                        <div id="line">
                                        <!-- <div id="fontsize"></div> -->
                                        <!--<h3 class="unseen">Search</h3> -->
                                        
                                        </div> <!-- end line -->


                        </div><!-- end header -->
                        <div id="contentarea">
                                        <div id="breadcrumbs">

                                                        

                                        </div>

                                        

                                                        <div class="left1 leftbigger" id="nav">
                                                   <div class="moduletable_menu">
 <h3><span
	class="backh"><span class="backh2"><span class="backh3">This Site</span></span></span></h3>
 
<ul class="menu">
<li class="item-464 active"><a href="/" >Home</a></li><li class="item-469"><a href="/index.php/becoming-a-tutor" >Becoming a Tutor</a></li><li class="item-470"><a href="/index.php/tutor-resources" >Learning Resources</a></li><li class="item-477"><a href="/index.php/tutor-coordinators" >Tutor Coordinators</a></li><li class="item-476"><a href="/index.php/contact" >Contact Us</a></li></ul>
</div>

                                                                
                                                                


                                                        </div><!-- end navi -->
               
                                        <div id="wrapper2" >

                                                <div id="main">

                                                
                                                        
<div id="system-message-container">
</div>
                                                        <div class="item-page">

	<h2>
			<a href="/index.php/79-python-resources/102-burrito-class">
		Burrito Class</a>
		</h2>








<p><strong>By Samuel Lin (edits by Daniel Holmes and Binh Nguyen)</strong></p>
<p style="text-align: justify;">#All edits prefaced with "EDIT" for convenience</p>
<p style="text-align: justify;"># The Burrito Class - Tutorial for ICS 33</p>
<p style="text-align: justify;">#EDIT: many instances of the word Burrito in this document are not capitalized when they probably should<br />#* be. Not all of them need to be changed, but whenever the document refers to a Burrito object, instead<br />#* of a literal, physical burrito, it should probably be changed to send a consistent message about when<br />#* this example is talking about an object in Python or an actual thing. Another general thing that <br />#* could be addressed is operator overloading. This document talks about overloading frequently, but<br />#* doesn't actually say what overloading is. If someone is just learning about classes, it's very likely<br />#* that they have yet to encounter the term or concept, and while this document provides good examples<br />#* of overloading, it would be probably be helpful to have a brief definition towards the beginning.</p>
<p style="text-align: justify;"># People studying computer science will eventually come across the concept of classes and operator overloading.<br /># This concept is seen in programming languages, especially object-oriented programming languages like Python.<br /># This will be a quick and simple tutorial and overview of classes, and some of the many different operators <br /># in Python can be overloaded.<br />#<br /># We will declare and define a basic Burrito class, which will create Burrito objects. Burrito objects have some attributes<br /># associated with them, such as a length(visible length of a burrito in inches), type of tortilla (which can be either flour or corn), and <br /># ingredients (which is a list that holds strings of the ingredients inside). To keep things simple, the only possible ingredients are rice,<br /># beans, cheese, chicken, and vegetables.</p>
<p style="text-align: justify;"># In this tutorial let us go through some basic rules that will simplify the concept of operator overloading in classes. Two burritos will <br /># be considered equal as long as their tortilla type is the same. So, a flour burrito with just beans and cheese will be considered <br /># equivalent to a flour burrito that just has chicken. Any type of ingredients (as long as they are represented by strings) can be <br /># added into the burrito.</p>
<p style="text-align: justify;">#EDIT: The previous two paragraphs give contradictory information. One states that there are five possible ingredients, while the other<br />#* says that any string ingredient may be added to the Burrito. This could be confusing and draw attention away from what the example<br />#* is actually attempting to do. It doesn't matter whether they are all allowed or not; consistency is what is important.</p>
<p style="text-align: justify;">class Burrito:<br />&nbsp;&nbsp; &nbsp;<br />#EDIT: Remove "goal of this" from this explanation. These instances of the word "burrito" should probably be capitalized&nbsp; &nbsp;</p>
<p style="text-align: justify;"># The goal of this __init__ function INITIALIZES an object of the type burrito. It will create 3 attributes referring to a burrito's<br /># length, type of tortilla it is made of, and the ingredients it is composed of.<br />&nbsp;&nbsp;&nbsp; def __init__(self, size: int, tortilla:str, ingred:list):<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; self.tortillaLength = size<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; self.tortillaType = tortilla<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; self.ingredients = ingred<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;<br />&nbsp;&nbsp;&nbsp; def __len__(self):<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return self.tortillaLength</p>
<p style="text-align: justify;">#EDIT: Change "for a Burrito class" to "for the Burrito class" or "for Burrito objects". The current state potentially implies things<br />#* like the existence of multiple, distinct Burrito classes that have different behaviors.</p>
<p style="text-align: justify;"># NOTE: Even though the __eq__ overloads the == operator in Python, and we are defining the == operator for a Burrito class, it is totally<br /># fine, because the == in this __eq__ function (self.tortillaType == self.tortillaType). is in a sense comparing the identity of two <br /># strings, since we defined the tortillaType attribute to be a string when we initialized the class. This is legal because the == <br /># operator is already defined for strings and works fine for strings in Python. The same principle applies when defining the &lt; (__lt__)<br /># and &gt; (__gt__) operators.&nbsp;&nbsp;&nbsp; &nbsp;<br />&nbsp;&nbsp;&nbsp; def __eq__(self, right):<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return self.tortillaType == self.tortillaType<br />&nbsp;&nbsp; &nbsp;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;<br />&nbsp;&nbsp;&nbsp; def __lt__(self, right):<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if type(right) == Burrito:<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return len(self) &lt; len(right)<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;<br />&nbsp;&nbsp;&nbsp; def __gt__(self, right):<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if type(self) == Burrito:<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return len(self) &gt; len(right)</p>
<p style="text-align: justify;">&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;<br />#EDIT: It is worth making a note here to mention that overloading the + operator in this manner causes it to behave significantly<br />#* differently from how it does on other, more familiar types. For instance, consider the following:<br />#*&nbsp;&nbsp; &nbsp;anInt = 1 + 1<br />#*&nbsp;&nbsp; &nbsp;aString = "Hello " + "World!"<br />#*&nbsp;&nbsp; &nbsp;aBurrito = Burrito(6, "Flour", ["Beans", "Cheese"]) + "Salsa Verde"<br />#* aBurrito will be equal to None in this case, but that might not be what a person new to these concepts would expect. At least<br />#* a note should be made, but it might be better to just rewrite the __add__ and __radd__ methods to avoid confusing the concept.&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;<br />&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;<br /># We will overload one arithmetic operator for this class, the + operator. This is done via the __add__ and __radd__ functions.</p>
<p style="text-align: justify;">&nbsp;&nbsp;&nbsp; def __add__(self, right):<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if type(right) != str:<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; raise TypeError("Added ingredient is not a string.")<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; else:<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; self.ingredients.append(right)</p>
<p style="text-align: justify;">#EDIT: Here would be an excellent place to mention how Python calls left.__add__ and fails, and then calls right.__radd__&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;<br />&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;<br /># NOTE: The __radd__ function is used for the cases where the + operator is called when the string is on the left side of the + <br /># operator, such as: "Sour cream" + someBurrito. Just having a __add__ function defined will not be sufficient enough to calculate this<br /># expression, because the __add__ function would only work when the burrito class is on the left side and a string is on the right side<br /># (Like someBurrito + "Sour cream").<br />&nbsp;&nbsp;&nbsp; def __radd__(self, left):<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if type(left) != str:<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; raise TypeError("Added ingredient is not a string.")<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; else:<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; self.ingredients.append(left)<br />&nbsp;&nbsp;&nbsp; &nbsp;<br />&nbsp;&nbsp; &nbsp; <br />#EDIT: Change "boolen" to boolean.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;<br /># Something additional is the __contains__ method that overloads the 'in' operator in Python. This operator returns a boolen (True or False),<br /># depending on whether or not an ingredient is in the burrito or not.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;<br />&nbsp;&nbsp;&nbsp; def __contains__(self, right):<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return right in self.ingredients<br />&nbsp;&nbsp; &nbsp;<br />&nbsp;&nbsp; &nbsp;<br />#EDIT: Capitalize "burrito" when referring to the class. Also this line should be broken up sooner than it is. A line is<br />#* definitely too long if it causes horizontal scrolling on a very common resolution. It may even be worth noting how it<br />#* is possible to break up lines with a backslash.&nbsp;&nbsp; &nbsp;<br />&nbsp;&nbsp; &nbsp;<br /># In addition to overloading operators, we can also define methods associated with the burrito class. Let's define a simple function<br /># called characteristics, which will be a method that can be called by a Burrito class and returns the 'characteristics of the burrito' <br /># and its attributes in an easily readable, well-organized string.<br />&nbsp;&nbsp;&nbsp; def characteristics(self):<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return 'This burrito has the following characteristics: \n&nbsp; -{theLength} inches in size\n&nbsp; -Wrapped in {Tortilla} tortilla\n&nbsp; -Ingredients(Fillings): {Ingred}'.format(theLength = self.tortillaLength, Tortilla = self.tortillaType,\<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Ingred = ', '.join(self.ingredients))</p>
<p style="text-align: justify;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;<br />if __name__ == '__main__':<br />&nbsp;&nbsp;&nbsp; print("Let's create 1 6-inch burrito for my friend.")<br />#EDIT: Capitalize all future instances of the word "burrito"<br /># NOTE: When any object gets initialized with attributes, each attributes is placed in the object's __dict__, which is a dictionary where <br /># the keys are the attribute names and the values are the actual values that is associated with that respective attribute.<br /># In this short tutorial we won't be utilizing the __dict__ of the burrito objects, but they can be utilized for many different things.<br />&nbsp;&nbsp;&nbsp; Burrito1 = Burrito(6, "Flour", ["Beans", "Cheese"])<br />&nbsp;&nbsp;&nbsp; print(Burrito1.characteristics())<br />&nbsp;&nbsp;&nbsp; print()<br />&nbsp;&nbsp;&nbsp; print("Now, let us create a second burrito to see the effect of operator overloading.")<br />&nbsp;&nbsp;&nbsp; Burrito2 = Burrito(12, "Flour", ["Beans", "Cheese", "Chicken", "Vegetables"])<br />&nbsp;&nbsp;&nbsp; print(Burrito2.characteristics())<br />&nbsp;&nbsp;&nbsp; print("Finally, let us create a third burrito that is wrapped with a corn tortilla instead of a flour one.")<br />&nbsp;&nbsp;&nbsp; Burrito3 = Burrito(12, "Corn", ["Chicken", "Vegetables"])<br />&nbsp;&nbsp;&nbsp; print(Burrito3.characteristics())<br />&nbsp;&nbsp;&nbsp; print()<br />&nbsp;&nbsp;&nbsp; print("===Testing the == operator===")<br />&nbsp;&nbsp;&nbsp; print("Is the first burrito(Burrito1) wrapped with the same tortilla as the second burrito?(Burrito2)?", Burrito1 == Burrito2)<br />&nbsp;&nbsp;&nbsp; print("Is the first burrito(Burrito1) wrapped with the same tortilla as the third burrito?(Burrito3)?", Burrito2 == Burrito3)<br />&nbsp;&nbsp;&nbsp; print()<br />&nbsp;&nbsp;&nbsp; print("===Testing the &lt; operator===")<br />&nbsp;&nbsp;&nbsp; print("Is the size of the first burrito (Burrito1) smaller than the second burrito (Burrito2)?", Burrito1 &lt; Burrito2)<br />&nbsp;&nbsp;&nbsp; print("Is the size of the second burrito (Burrito2) greater than the third burrito (Burrito3)?", Burrito1 &gt; Burrito2)<br />&nbsp;&nbsp;&nbsp; print()<br />&nbsp;&nbsp;&nbsp; print("===Testing the 'in' operator===")<br />&nbsp;&nbsp;&nbsp; print("Are beans in the first burrito (Burrito1)?", "Beans" in Burrito1)<br />&nbsp;&nbsp;&nbsp; print("Are beans in the second burrito (Burrito2)?", "Beans" in Burrito2)<br />&nbsp;&nbsp;&nbsp; print("Are vegetables in the first burrito (Burrito1)?", "Vegetables" in Burrito1)<br />&nbsp;&nbsp;&nbsp; print("Are vegetables in the second burrito (Burrito2)?", "Vegetables" in Burrito2)<br />&nbsp;&nbsp;&nbsp; print()<br />&nbsp;&nbsp;&nbsp; print("===Testing the + operator===")<br />&nbsp;&nbsp;&nbsp; print("To recap, these are the characteristics for the first burrito (Burrito1) before adding any ingredients.")<br />&nbsp;&nbsp;&nbsp; print(Burrito1.characteristics())<br />&nbsp;&nbsp;&nbsp; print("Now, let us add some more ingredients!")<br />&nbsp;&nbsp;&nbsp; Burrito1 + "Pico de Gallo"<br />&nbsp;&nbsp;&nbsp; "Steak" + Burrito1<br />&nbsp;&nbsp;&nbsp; print("......")<br />&nbsp;&nbsp;&nbsp; print("Now, here are the final characteristics for the first burrito (Burrito1)!")<br />&nbsp;&nbsp;&nbsp; print(Burrito1.characteristics())<br />&nbsp;&nbsp;&nbsp; print("Notice, there are more ingredients in this burrito now!")<br />&nbsp;&nbsp;&nbsp; print("\n")<br />&nbsp;&nbsp;&nbsp; print("This is the end of this simple tutorial on classes and operator overloading. Thanks for reading!")</p> 
	
</div>


                                                </div><!-- end main -->

                                        </div><!-- end wrapper -->

                                
                        
                                <div class="wrap"></div>

                                </div> <!-- end contentarea -->

                        </div><!-- back -->

                </div><!-- all -->

                <div id="footer-outer">
                        
                        <div id="footer-sub">


                                <div id="footer">

                                        
                                        

                                </div><!-- end footer -->

                        </div>

                </div>
        
        </body>
</html>
Mis_redirected¢DtypeEvalueôIhttp_code¢DtypeEvalueÈQdownload_complete¢DtypeEvalueõ