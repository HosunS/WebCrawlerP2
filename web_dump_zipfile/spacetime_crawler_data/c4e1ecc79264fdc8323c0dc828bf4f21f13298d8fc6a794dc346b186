¦Ifinal_url¡DtypeLhttp_headers¢DtypeEvalue‰¢Ak¢DtypeEvalueNContent-LengthAv¢DtypeEvalueC475¢Ak¢DtypeEvaluePContent-EncodingAv¢DtypeEvalueDgzip¢Ak¢DtypeEvalueMAccept-RangesAv¢DtypeEvalueEbytes¢Ak¢DtypeEvalueDVaryAv¢DtypeEvalueOAccept-Encoding¢Ak¢DtypeEvalueFServerAv¢DtypeEvalueX4Apache/2.4.6 (CentOS) OpenSSL/1.0.2k-fips SVN/1.7.14¢Ak¢DtypeEvalueMLast-ModifiedAv¢DtypeEvalueXSat, 05 Jul 1997 18:39:45 GMT¢Ak¢DtypeEvalueDETagAv¢DtypeEvalueX"3be-3158ecc2a5e40-gzip"¢Ak¢DtypeEvalueDDateAv¢DtypeEvalueXFri, 01 Feb 2019 21:31:33 GMT¢Ak¢DtypeEvalueLContent-TypeAv¢DtypeEvalueXtext/plain; charset=UTF-8Kraw_content¢DtypeEvalueY¾// Test of closest pair algorithms
// David Eppstein, UC Irvine, 19 Apr 1997
//
// Quadtree closest pair algorithm
// Maintains a quadtree over the distance matrix; closest pair = quadtree root
//
// Total space: 16/3 n^2 + O(n) bytes
// Time per insertion or single distance update: O(Dn)
// Time per deletion or point update: O(n)
// Time per closest pair: O(log n)

#include "ClosestPairs.h"
#include "PointSet.h"

class QuadTreeCP : public ClosestPairs {
 	double * distances;
 	PointSet * parent_dist;
 	QuadTreeCP * parent;
 	int * active;
 	unsigned long maxpts;
 	Distance & dist;
 	
 	// two halves of UpdatePoint, separate because recursion is a little diff
 	void UpdateRow(point);
 	void UpdateCol(point);

 public:
 	~QuadTreeCP();
 	QuadTreeCP(long np, long mp, Distance & d);
 	void operator += (point);
 	void operator -= (point);
 	double operator () (point & a, point & b);
 	void UpdatePoint(point);
 	void UpdateDistance(point,point);
};
Mis_redirected¢DtypeEvalueôIhttp_code¢DtypeEvalueÈQdownload_complete¢DtypeEvalueõ