¦Ifinal_url¡DtypeLhttp_headers¢DtypeEvalue‰¢Ak¢DtypeEvalueNContent-LengthAv¢DtypeEvalueE29351¢Ak¢DtypeEvalueJSet-CookieAv¢DtypeEvalueX°trac_form_token=837f5ce246f32ab9d619d2a8; httponly; Path=/wiki/public, trac_session=ececebb0a88b225218f340f0; expires=Wed, 08 May 2019 13:48:36 GMT; httponly; Path=/wiki/public¢Ak¢DtypeEvalueGExpiresAv¢DtypeEvalueXFri, 01 Jan 1999 00:00:00 GMT¢Ak¢DtypeEvalueJKeep-AliveAv¢DtypeEvalueRtimeout=5, max=100¢Ak¢DtypeEvalueFServerAv¢DtypeEvalueX„Apache/2.4.6 (CentOS) OpenSSL/1.0.2k-fips SVN/1.7.14 mod_wsgi/3.4 Python/2.7.5 Phusion_Passenger/4.0.53 mod_perl/2.0.10 Perl/v5.16.3¢Ak¢DtypeEvalueJConnectionAv¢DtypeEvalueJKeep-Alive¢Ak¢DtypeEvalueMCache-ControlAv¢DtypeEvalueOmust-revalidate¢Ak¢DtypeEvalueDDateAv¢DtypeEvalueXThu, 07 Feb 2019 13:48:36 GMT¢Ak¢DtypeEvalueLContent-TypeAv¢DtypeEvalueWtext/html;charset=utf-8Kraw_content¢DtypeEvalueYr§<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
  
  


  <head>
    <title>
      cs122b-2018-spring-project4 â€“ Public
    </title>
      <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
      <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <!--[if IE]><script type="text/javascript">
      if (/^#__msie303:/.test(window.location.hash))
        window.location.replace(window.location.hash.replace(/^#__msie303:/, '#'));
    </script><![endif]-->
        <link rel="search" href="/wiki/public/search" />
        <link rel="help" href="/wiki/public/wiki/TracGuide" />
        <link rel="alternate" href="/wiki/public/wiki/cs122b-2018-spring-project4?version=10&amp;format=txt" type="text/x-trac-wiki" title="Plain Text" />
        <link rel="up" href="/wiki/public/wiki/cs122b-2018-spring-project4" title="View latest version" />
        <link rel="next" href="/wiki/public/wiki/cs122b-2018-spring-project4?version=11" title="Version 11" />
        <link rel="start" href="/wiki/public/wiki" />
        <link rel="stylesheet" href="/wiki/public/chrome/common/css/trac.css" type="text/css" /><link rel="stylesheet" href="/wiki/public/chrome/common/css/wiki.css" type="text/css" /><link rel="stylesheet" href="/wiki/public/chrome/tracwysiwyg/wysiwyg.css" type="text/css" />
        <link rel="tracwysiwyg.stylesheet" href="/wiki/public/chrome/common/css/trac.css" /><link rel="tracwysiwyg.stylesheet" href="/wiki/public/chrome/tracwysiwyg/editor.css" />
        <link rel="tracwysiwyg.base" href="/wiki/public" />
        <link rel="prev" href="/wiki/public/wiki/cs122b-2018-spring-project4?version=9" title="Version 9" />
        <link rel="shortcut icon" href="/wiki/public/chrome/site/favicon.ico" type="image/x-icon" />
        <link rel="icon" href="/wiki/public/chrome/site/favicon.ico" type="image/x-icon" />
    <style id="trac-noscript" type="text/css">.trac-noscript { display: none !important }</style>
    <script type="text/javascript">
      var _tracwysiwyg={};
    </script>
      <script type="text/javascript" charset="utf-8" src="/wiki/public/chrome/common/js/jquery.js"></script>
      <script type="text/javascript" charset="utf-8" src="/wiki/public/chrome/common/js/babel.js"></script>
      <script type="text/javascript" charset="utf-8" src="/wiki/public/chrome/common/js/trac.js"></script>
      <script type="text/javascript" charset="utf-8" src="/wiki/public/chrome/common/js/search.js"></script>
      <script type="text/javascript" charset="utf-8" src="/wiki/public/chrome/common/js/folding.js"></script>
      <script type="text/javascript" charset="utf-8" src="/wiki/public/chrome/tracwysiwyg/wysiwyg.js"></script>
    <script type="text/javascript">
      jQuery("#trac-noscript").remove();
      jQuery(document).ready(function($) {
        $(".trac-autofocus").focus();
        $(".trac-target-new").attr("target", "_blank");
        setTimeout(function() { $(".trac-scroll").scrollToTop() }, 1);
        $(".trac-disable-on-submit").disableOnSubmit();
      });
    </script>
    <meta name="ROBOTS" content="NOINDEX, NOFOLLOW" />
    <script type="text/javascript">
      jQuery(document).ready(function($) {
        $("#content").find("h1,h2,h3,h4,h5,h6").addAnchor(_("Link to this section"));
        $("#content").find(".wikianchor").each(function() {
          $(this).addAnchor(babel.format(_("Link to #%(id)s"), {id: $(this).attr('id')}));
        });
        $(".foldable").enableFolding(true, true);
      });
    </script>
  </head>
  <body>
    <div id="banner">
      <div id="header">
        <a id="logo" href="http://www.ics.uci.edu/"><img src="/wiki/public/chrome/site/ics.jpg" alt="ICS Logo" height="67" width="128" /></a>
      </div>
      <form id="search" action="/wiki/public/search" method="get">
      </form>
      <div id="metanav" class="nav">
    <ul>
      <li class="first"><a href="/wiki/public/login">Login</a></li><li><a href="/wiki/public/prefs">Preferences</a></li><li class="last"><a href="/wiki/public/about">About Trac</a></li>
    </ul>
  </div>
    </div>
    <div id="mainnav" class="nav">
  </div>
    <div id="main">
      <div id="pagepath" class="noprint">
  <a class="pathentry first" title="View WikiStart" href="/wiki/public/wiki">wiki:</a><a class="pathentry" href="/wiki/public/wiki/cs122b-2018-spring-project4" title="View cs122b-2018-spring-project4">cs122b-2018-spring-project4</a>
</div>
      <div id="ctxtnav" class="nav">
        <h2>Context Navigation</h2>
        <ul>
          <li class="first"><span>&larr; <a class="prev" href="/wiki/public/wiki/cs122b-2018-spring-project4?version=9" title="Version 9">Previous Version</a></span></li><li><a href="/wiki/public/wiki/cs122b-2018-spring-project4" title="View latest version">View Latest Version</a></li><li class="last"><span><a class="next" href="/wiki/public/wiki/cs122b-2018-spring-project4?version=11" title="Version 11">Next Version</a> &rarr;</span></li>
        </ul>
        <hr />
      </div>
    <div id="content" class="wiki">
        <br />
        <table id="info" summary="Revision info">
          <tr><th scope="row">Version 10 (modified by prankymat, <a class="timeline" href="/wiki/public/timeline?from=2018-05-16T21%3A43%3A03-07%3A00&amp;precision=second" title="See timeline at May 16, 2018 9:43:03 PM">9 months ago</a>)
             (<a href="/wiki/public/wiki/cs122b-2018-spring-project4?action=diff&amp;version=10">diff</a>)</th></tr>
          <tr><td class="message">
            <p>
--
</p>

          </td></tr>
        </table>
      <div class="wikipage searchable">
        
          <div id="wikipage" class="trac-content"><p>
</p><div class="wiki-toc">
<ol>
  <li>
    <a href="#CS122BProject4">CS122B Project 4</a>
  </li>
  <li>
    <a href="#Tasks">Tasks</a>
    <ol>
      <li>
        <a href="#Task1:ImprovingtheGUIbymoreintelligentsearchandautocomplete">Task 1: Improving the GUI by more intelligent search and autocomplete</a>
      </li>
      <li>
        <a href="#Task2:DevelopinganAndroidAppforFabflixUsingAndroidStudioIDE">Task 2:  Developing an Android App for Fabflix Using Android Studio IDE</a>
      </li>
      <li>
        <a href="#Task3:FuzzySearchingUsingUserDefinedFunctions">Task 3: Fuzzy Searching Using User Defined Functions</a>
      </li>
      <li>
        <a href="#DeploymentOnAWSandSubmissions">Deployment On AWS and Submissions</a>
      </li>
      <li>
        <a href="#DemonstrationandGradingCriteria">Demonstration and Grading Criteria</a>
      </li>
    </ol>
  </li>
</ol>
</div><p>
</p>
<h1 id="CS122BProject4">CS122B Project 4</h1>
<p>
<strong>Deadline: Week 9 Friday, 06/01/2018, 11:45pm. Due on Github </strong><br />
</p>
<h1 id="Tasks">Tasks</h1>
<ol><li><a class="wiki" href="/wiki/public/wiki/cs122b-2018-spring-project4#AJAX">Improving the GUI by using AJAX</a>
</li><li><a class="wiki" href="/wiki/public/wiki/cs122b-2018-spring-project4#Android">Developing an Android Application for Fabflix</a>
</li><li><a class="wiki" href="/wiki/public/wiki/cs122b-2018-spring-project4#UDF">Fuzzy Searching Using User Defined Functions</a>
</li></ol><hr />
<p>
<span id="AJAX"></span>
</p>
<h2 id="Task1:ImprovingtheGUIbymoreintelligentsearchandautocomplete">Task 1: Improving the GUI by more intelligent search and autocomplete</h2>
<p>
The "Advanced Search" feature you implemented on project 2 is not very user friendly. Most search interfaces nowadays simply have one input box that can perform search intelligently. Autocomplete feature on a search bar is now considered a must-have functionality.  In this task, you need to implement a powerful search box that can search on multiple attributes and support autocomplete.
</p>
<p>
<strong>Normal Search</strong>
</p>
<p>
Normal Search section specifies the requirements when the users click the search button and what should show up in the movie list result.
</p>
<ul><li>Have a search box on the main page of the Fabflix website (the page after login).
</li></ul><ul><li>Do full text search using the query. If the query string has multiple keywords, then each keyword should be treated as a prefix. For example, the query "good u" is first tokenized into two words: "good" and "u". The search results will be all the movie titles that contain a word starting with "good" and a word starting with "u", such as "The Good, The Bad and The Ugly", and "Goodbye Uncle Tom".  Check the following Netflix screenshot as an example of full text search.
</li></ul><ul><li>This search box should search on movie title. A movie is considered a match if the title matches the query. For example, the query "logan" should return a list of movies whose title contains "logan" as a prefix.
</li></ul><ul><li>If the user clicks the "Search" button, the site should jump to the movie list page to display the search results.
</li></ul><p>
<a style="padding:0; border:none" href="/wiki/public/attachment/wiki/cs122b-2018-spring-project4/netflix.png"><img src="/wiki/public/raw-attachment/wiki/cs122b-2018-spring-project4/netflix.png" /></a>
</p>
<p>
<strong>Autocomplete suggestion:</strong>
</p>
<p>
As the user types in the query in the search box character by character, your frontend Javascript code should send the query to the backend server to get a list of matching results, and then display them in the dropdown list. Check the <a class="ext-link" href="http://www.imdb.com/"><span class="icon">â€‹</span>IMDB</a> and <a class="ext-link" href="https://www.rottentomatoes.com/"><span class="icon">â€‹</span>Rotten Tomatoes</a> search interface as an example.
</p>
<p>
<a style="padding:0; border:none" href="/wiki/public/attachment/wiki/cs122b-2018-spring-project4/imdb.png"><img src="/wiki/public/raw-attachment/wiki/cs122b-2018-spring-project4/imdb.png" /></a>
</p>
<p>
<a style="padding:0; border:none" href="/wiki/public/attachment/wiki/cs122b-2018-spring-project4/rotten-tomatoes.png"><img src="/wiki/public/raw-attachment/wiki/cs122b-2018-spring-project4/rotten-tomatoes.png" /></a>
</p>
<p>
We recommend you use a Javascript autocomplete library instead of implementing the autocomplete on your own. There are many autocomplete libraries, such as <a class="ext-link" href="https://github.com/devbridge/jQuery-Autocomplete"><span class="icon">â€‹</span>https://github.com/devbridge/jQuery-Autocomplete</a>. The autocomplete library can help you easily achieve some of the requirements.
</p>
<ul><li>The user should be able to navigate the suggestions in a dropdown list using up and down arrow keys on the keyboard. During this process, when a suggested item is selected, the item should be highlighted, the text in the input box should be changed to the item's name.
</li></ul><ul><li>Your autocomplete should do full text search on both movie title field and star name field.
</li></ul><ul><li>Your autocomplete suggestion list needs to be grouped into 2 categories: movies and stars. See how Rotten Tomatoes search divides the suggestions into different groups (movies, celebrities, etc.). Optionally you can also choose not to group them explicitly, but indicate clearly on each item instead. See how IMDB search suggestion list shows each item as a movie or as an actor.
</li></ul><ul><li>The autocomplete suggestion list should not have more than 10 items (the total number of items from all 2 categories).
</li></ul><ul><li>Clicking on any of the suggestion items, or pressing "Enter" when an item is selected during keyboard navigation, should jump to:
<ul><li>if the item is a movie: single movie page;
</li><li>if the item is a star: single star page.
</li></ul></li></ul><ul><li>If the user doesn't choose any of the suggestions using the keyboard, and just hits "Enter" key or clicks the search button, you should do the search normally as stated above in the "Normal Search" requirement.
</li></ul><ul><li>When the user types only one or two characters, you should not do any search because the results may not be helpful. You should only perform the autocomplete search when the user types in at least 3 (&gt;= 3) characters.
</li></ul><ul><li>When the user types in the query, you should not do the autocomplete search on every keystroke because the user is still typing. Moreover you don't want to send too many requests to the backend. You should set a small delay time (300ms) so that that the frontend only performs the autocomplete search after the user stops typing for at least 300ms.
</li></ul><ul><li>If the autocomplete query has been issued before, you don't want to send the request to the server again (for example, when the user deletes some of the characters). Store the suggestion list of each query in the browser. Every time before your code needs to do autocomplete search, first check if you can use the stored suggestions. If not, then send the query to the server.
</li></ul><ul><li>Your autocomplete search needs to be very fast. Note that the total running time the user feels is "delay time + query time". Some points will be deducted if your autocomplete search takes long.
</li></ul><ul><li><strong>Print to the Javascript console:</strong>
<ul><li>In order to verify that your code satisfies the constraints, you need to print messages to the Javascript console. In Javascript, "console.log()" is equivalent to "System.out.println()" in Java. To see the printed messages, in Chrome, open your webpage -&gt; right click "Inspect", then choose "Console" tab. All popular browsers have something similar.
</li></ul></li></ul><ul><li>We need to see a printed message printed message <strong>only</strong> at these cases:
<ul><li>the autocomplete search is initiated (after the delay);
</li><li>whether the search is using cached results or sending an ajax request to the server;
</li><li>the suggested list (either from cache or server response).
</li></ul></li></ul><p>
Here's an <a class="ext-link" href="https://github.com/UCI-Chenli-teaching/autocomplete-example"><span class="icon">â€‹</span>Autocomplete Example</a> that implemented most basic features of the autocomplete search. You are highly recommended to take a look at this example and learn from it.
</p>
<p>
<span id="AjaxExample"></span>
</p>
<p>
As a simple Ajax example, we have provided a Java-Servlet-based server program in this <a class="attachment" href="/wiki/public/attachment/wiki/cs122b-2018-spring-project4/AjaxTest.war" title="Attachment 'AjaxTest.war' in cs122b-2018-spring-project4">Ajax Example</a><a class="trac-rawlink" href="/wiki/public/raw-attachment/wiki/cs122b-2018-spring-project4/AjaxTest.war" title="Download">â€‹</a>. Deploy the war file to your Tomcat server. Point your browser to the link <a class="ext-link" href="http://localhost:8080/AjaxTest/order.html"><span class="icon">â€‹</span>http://localhost:8080/AjaxTest/order.html</a>. The example uses the "onChange" javascript event to trigger an Ajax communication. Type in anything in the "Item Name" input box, and move the cursor to "Time" input box, which should show the current time. Here is a <a class="ext-link" href="http://www.w3schools.com/TAGS/ref_eventattributes.asp"><span class="icon">â€‹</span>complete list of Javascript events</a> supported by most browsers. Take a look at <a class="ext-link" href="http://www.w3schools.com/js/js_htmldom_events.asp"><span class="icon">â€‹</span>this page</a> to learn more about how to use such events. (This example is based on the following <a class="ext-link" href="http://www.tizag.com/ajaxTutorial/index.php"><span class="icon">â€‹</span>link</a>.)
</p>
<hr />
<p>
<span id="Android"></span>
</p>
<h2 id="Task2:DevelopinganAndroidAppforFabflixUsingAndroidStudioIDE">Task 2:  Developing an Android App for Fabflix Using Android Studio IDE</h2>
<p>
In this task you will implement an Android app as a new frontend for Fabflix.
</p>
<p>
<strong>Steps:</strong>
</p>
<p>
The following guidelines are based on this <a class="ext-link" href="http://developer.android.com/training/basics/firstapp/index.html"><span class="icon">â€‹</span>Android programming tutorial</a>.
</p>
<p>
<strong>Step 1</strong>: <a class="ext-link" href="http://developer.android.com/sdk/index.html"><span class="icon">â€‹</span>Download</a> Android Studio IDE.  Depending on the network speed, this step may take a while (e.g., 10-20 minutes).
</p>
<p>
<strong>Step 2</strong>: Clone the Android Example from <a class="ext-link" href="http://github.com/UCI-Chenli-teaching/project4-android-example"><span class="icon">â€‹</span>Github</a>. Also clone the new Tomcat login example from <a class="ext-link" href="http://github.com/UCI-Chenli-teaching/project4-login-example"><span class="icon">â€‹</span>Github</a> and deploy on your local Tomcat server (with HTTPS enabled).
</p>
<p>
<strong>Step 3</strong>: Install the downloaded Android Studio IDE.  Once you see a page of "Welcome to Android Studio," use the option "Open an existing Android Studio project" and specify the "project4-android-example" app on your disk.  Ignore the "Android SDK Sync" warning message.
</p>
<p>
<strong>Step 4</strong>: When opening the app, if you see an "Install missing platform(s) and sync project," click the link to do the installation.
</p>
<p>
<strong>Step 5</strong>: Follow the instructions on the page <a class="ext-link" href="http://developer.android.com/training/basics/firstapp/running-app.html"><span class="icon">â€‹</span>running an app</a> to install an emulator.  In particular, in the IDE, click "Tools &gt; Android &gt; AVD Manager", select a model (e.g., "Nexus 5"), then install the corresponding emulator.  Again, this step could be slow depending on your network speed.
</p>
<p>
<strong>Step 6</strong>: Run the FabflixMobile app on the installed emulator. Select the project folder, and click "Run" in the menu. Choose the previous installed emulator as the target platform. If you see "Unsupported method: AndroidProject.getPluginGeneration(), you can check <a class="ext-link" href="http://stackoverflow.com/questions/39591531/unsupported-method-androidproject-getplugingeneration-while-running-project"><span class="icon">â€‹</span>Unsupported method: AndroidProject.getPluginGeneration() while running project</a>". The app has three activities called Red, Blue, and Green, as well as buttons for navigating between the activities, and text boxes for sending messages to other pages. The red page contains a button that sends an HTTP request, receives the response, and shows the response on the screen.
</p>
<p>
<a style="padding:0; border:none" href="/wiki/public/attachment/wiki/cs122b-2017-winter-project4/fablixmobile.jpeg"><img src="/wiki/public/raw-attachment/wiki/cs122b-2017-winter-project4/fablixmobile.jpeg" /></a>
</p>
<p>
<strong>Step 7 (optional)</strong>: If you have an Android phone, you can run the app directly on your phone, which is faster. You can check <a class="ext-link" href="http://developer.android.com/training/basics/firstapp/running-app.html"><span class="icon">â€‹</span>running an app</a> on how to run applications on real phones.
</p>
<p>
<strong>Step 8</strong>: To make yourself more familiar with Android development, you can check the following tutorials.
</p>
<ul><li><a class="ext-link" href="http://developer.android.com/training/basics/firstapp/building-ui.html"><span class="icon">â€‹</span>Android UI</a>: the basics of building a user interface.
</li><li><a class="ext-link" href="http://developer.android.com/training/basics/firstapp/starting-activity.html"><span class="icon">â€‹</span>activities</a>: how to navigate between two pages (i.e., activities).
</li></ul><p>
<strong>Step 9 (main task)</strong>: Develop a Fabflix Android app, which supports a subset of the features of the main Fabflix website. You are not allowed to use the Android WebView. The following capabilities are required:
</p>
<ul><li>Login page, which should behave like the website login page. (<tt>reCAPTCHA</tt> is optional).
</li><li>Use HTTPS Connections to communicate with backend server
<ul><li>Self signed HTTPS certificates check is disabled by the <tt>NukeSSLCerts</tt> class, which is invoked inside <tt>NetworkManager</tt>.
</li></ul></li><li>Maintain session with backend server
<ul><li>Sessions are maintained by the <tt>CookieHandler</tt> and <tt>CookieManager</tt> set in the <tt>NetworkManager</tt> class.
</li></ul></li><li>Single movie page
<ul><li>Contains the movie title, year, director, list of genres (hyperlink is optional), list of stars (hyperlink is optional).
</li></ul></li><li>A search box that has the same behavior as the the searching requirement in task 1 (searching in movie title).  Autocomplete is NOT required.
</li><li>Search result list
<ul><li>Displays a <tt>ListView</tt> of the movies searched. When a user clicks on an item, it should show the corresponding single movie page in a new activity.
</li></ul></li><li>Pagination on the search result list. <tt>Previous</tt> and <tt>Next</tt> buttons are required, and the page size can be constant.
</li></ul><p>
<strong>Note on reCAPTCHA on Android</strong>
</p>
<ul><li>You'll need to register a new <tt>site-key</tt> and <tt>secret-key</tt> pair on <a class="ext-link" href="https://www.google.com/recaptcha/admin"><span class="icon">â€‹</span>reCAPCHA's admin area</a> <strong>in addition to</strong> the one that already exist for the web version of Fabflix.
<ol><li>Register a new site
<ul><li>Choose reCAPTCHA Android
</li><li>Package Names
<ul><li>Specify the android app's package name. In <tt>project4-android-example</tt>, the package name is <tt>edu.uci.ics.fabflixmobile</tt>.
</li></ul></li></ul></li><li>Replace the <tt>your-site-key</tt> in <tt>RedActivity</tt>, and replace the <tt>secret-key</tt> variable on the server side (project4-login-example).
</li></ol></li><li>Due to the limitation of Google reCAPTCHA, if you need to support both versions (web, and Android) of reCAPTCHA, you'll need to use different key pairs when verifying the client's reCAPTCHA response with Google. You should handle this logic in your <tt>LoginServlet</tt> such that if the request is from an Android client, use <tt>x</tt> as the secret key, and if it's a request from the web interface, use <tt>y</tt> as the secret instead.
</li></ul><p>
<strong>Other Resources:</strong>
This is a good note about how different events trigger specific Android lifecycle callback functions:  <a class="ext-link" href="https://gist.github.com/grantland/1096474/65d8dd9dd774463c2afc14764242c220fe92e051"><span class="icon">â€‹</span>https://gist.github.com/grantland/1096474/65d8dd9dd774463c2afc14764242c220fe92e051</a>
</p>
<p>
Example project on using <tt>ListView</tt> on Android
<a class="ext-link" href="http://github.com/UCI-Chenli-teaching/project4-android-listview-example"><span class="icon">â€‹</span>http://github.com/UCI-Chenli-teaching/project4-android-listview-example</a>
</p>
<hr />
<p>
<span id="UDF"></span>
</p>
<h2 id="Task3:FuzzySearchingUsingUserDefinedFunctions">Task 3: Fuzzy Searching Using User Defined Functions</h2>
<p>
Currently, when a FabFlix customer does a search, the user must spell keywords correctly; otherwise, the desired movie will not be retrieved. For example, some star names, such as "Schwarzenegger," are  sufficiently difficult to spell that customers are likely to spell them  incorrectly--and so perhaps believe we do not stock the Terminator  movies when, in fact, we do!
</p>
<p>
To make it more likely that customers  find the movies they desire--and thus increase our likelihood of making  sales--the exact string matching in FabFlix for key searches is to be replaced with a fuzzy matching, one that returns a movie whose value is close to the key's value.
</p>
<p>
The designers have decided that using the SQL LIKE command combined with an  Levenshtein (Edit Distance) Algorithm (LEDA) is the approach to take.
</p>
<p>
The LEDA algorithm, to be implemented as a dynamic function in C or C++, is  to be accessed using the interface SIMILARTO. SIMILARTO takes three  parameters: the first is the key as a string, the second the string  against which the key is being compared, the third the maximum distance  he two strings can differ and still be considered similar to each other.  Take the union of the results from LIKE and SIMILARTO.
</p>
<p>
name LIKE '%Schwarseneger%' OR SIMILARTO(name, 'Arnold Schwrzneggar', 2)
</p>
<p>
We will give 10 point extra credits if you: successfully implement this feature on your AWS instance AND integrate fuzzy search into the searching functionality in task 1 and 2. Your search results should combine the full text search and fuzzy search. Feel free to use the User Defined Functions (described above) from this <a class="ext-link" href="http://flamingo.ics.uci.edu/toolkit/"><span class="icon">â€‹</span>example</a>.
</p>
<hr />
<p>
<span id="DeploymentOnAWS"></span>
</p>
<h2 id="DeploymentOnAWSandSubmissions">Deployment On AWS and Submissions</h2>
<p>
The same as before, use Github for your project 4 code (both web and Android app code) and deploy (web code) on AWS.
</p>
<ul><li>For Android part, you also need to submit the <tt>APK</tt> package to the Github as well as the source code .
<ul><li>Use Android Studio to build an <tt>APK</tt> package, named <tt>"fabflix.apk"</tt>,  of your Fabflix Android app.
</li></ul></li></ul><hr />
<p>
<span id="Grading"></span>
</p>
<h2 id="DemonstrationandGradingCriteria">Demonstration and Grading Criteria</h2>
<p>
The same as before, <strong>You are required to demonstrate  this project</strong>, and time is <strong>20 minutes</strong> per team. Please refer to this <a class="ext-link" href="https://docs.google.com/spreadsheets/d/1PcwItuueewQhftvHRllkgDgkHYNfmxR_a8dJyD8qDCE/edit#gid=2094409206"><span class="icon">â€‹</span>Grading checklist</a> for detailed criteria.
</p>
</div>
          
          
        
        
      </div>
      
    <div id="attachments">
        <h3 class="foldable">Attachments <span class="trac-count">(4)</span></h3>
        <div>
          <ul>
              <li>
    <a href="/wiki/public/attachment/wiki/cs122b-2018-spring-project4/imdb.png" title="View attachment">imdb.png</a><a href="/wiki/public/raw-attachment/wiki/cs122b-2018-spring-project4/imdb.png" class="trac-rawlink" title="Download">â€‹</a>
       (<span title="173154 bytes">169.1 KB</span>) -
      added by <em>prankymat</em> <a class="timeline" href="/wiki/public/timeline?from=2018-05-16T12%3A34%3A07-07%3A00&amp;precision=second" title="See timeline at May 16, 2018 12:34:07 PM">9 months ago</a>.
              </li>
              <li>
    <a href="/wiki/public/attachment/wiki/cs122b-2018-spring-project4/rotten-tomatoes.png" title="View attachment">rotten-tomatoes.png</a><a href="/wiki/public/raw-attachment/wiki/cs122b-2018-spring-project4/rotten-tomatoes.png" class="trac-rawlink" title="Download">â€‹</a>
       (<span title="290020 bytes">283.2 KB</span>) -
      added by <em>prankymat</em> <a class="timeline" href="/wiki/public/timeline?from=2018-05-16T12%3A34%3A15-07%3A00&amp;precision=second" title="See timeline at May 16, 2018 12:34:15 PM">9 months ago</a>.
              </li>
              <li>
    <a href="/wiki/public/attachment/wiki/cs122b-2018-spring-project4/AjaxTest.war" title="View attachment">AjaxTest.war</a><a href="/wiki/public/raw-attachment/wiki/cs122b-2018-spring-project4/AjaxTest.war" class="trac-rawlink" title="Download">â€‹</a>
       (<span title="95415 bytes">93.2 KB</span>) -
      added by <em>prankymat</em> <a class="timeline" href="/wiki/public/timeline?from=2018-05-16T12%3A34%3A21-07%3A00&amp;precision=second" title="See timeline at May 16, 2018 12:34:21 PM">9 months ago</a>.
              </li>
              <li>
    <a href="/wiki/public/attachment/wiki/cs122b-2018-spring-project4/netflix.png" title="View attachment">netflix.png</a><a href="/wiki/public/raw-attachment/wiki/cs122b-2018-spring-project4/netflix.png" class="trac-rawlink" title="Download">â€‹</a>
       (<span title="25037 bytes">24.5 KB</span>) -
      added by <em>prankymat</em> <a class="timeline" href="/wiki/public/timeline?from=2018-05-16T12%3A34%3A27-07%3A00&amp;precision=second" title="See timeline at May 16, 2018 12:34:27 PM">9 months ago</a>.
              </li>
          </ul>
          <p>
            Download all attachments as: <a rel="nofollow" href="/wiki/public/zip-attachment/wiki/cs122b-2018-spring-project4/">.zip</a>
          </p>
        </div>
    </div>

    </div>
    <div id="altlinks">
      <h3>Download in other formats:</h3>
      <ul>
        <li class="last first">
          <a rel="nofollow" href="/wiki/public/wiki/cs122b-2018-spring-project4?version=10&amp;format=txt">Plain Text</a>
        </li>
      </ul>
    </div>
    </div>
    <div id="footer" lang="en" xml:lang="en"><hr />
      <a id="tracpowered" href="http://trac.edgewall.org/"><img src="/wiki/public/chrome/common/trac_logo_mini.png" height="30" width="107" alt="Trac Powered" /></a>
      <p class="left">Powered by <a href="/wiki/public/about"><strong>Trac 1.0.13</strong></a><br />
        By <a href="http://www.edgewall.org/">Edgewall Software</a>.</p>
      <p class="right">Visit the Trac open source project at<br /><a href="http://trac.edgewall.org/">http://trac.edgewall.org/</a></p>
    </div>
  </body>
</html>Mis_redirected¢DtypeEvalueôIhttp_code¢DtypeEvalueÈQdownload_complete¢DtypeEvalueõ