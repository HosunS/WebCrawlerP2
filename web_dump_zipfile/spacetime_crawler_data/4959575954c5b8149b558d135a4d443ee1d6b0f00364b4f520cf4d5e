¦Ifinal_url¢DtypeEvaluexAhttps://www.ics.uci.edu/~thornton/ics46/Notes/CourseIntroduction/Lhttp_headers¢DtypeEvalue‡¢Ak¢DtypeEvalueNContent-LengthAv¢DtypeEvalueD7650¢Ak¢DtypeEvalueMAccept-RangesAv¢DtypeEvalueEbytes¢Ak¢DtypeEvalueFServerAv¢DtypeEvalueX4Apache/2.4.6 (CentOS) OpenSSL/1.0.2k-fips SVN/1.7.14¢Ak¢DtypeEvalueMLast-ModifiedAv¢DtypeEvalueXFri, 30 Mar 2018 19:55:46 GMT¢Ak¢DtypeEvalueDETagAv¢DtypeEvalueT"1de2-568a6a0409480"¢Ak¢DtypeEvalueDDateAv¢DtypeEvalueXFri, 01 Feb 2019 04:54:33 GMT¢Ak¢DtypeEvalueLContent-TypeAv¢DtypeEvalueXtext/html; charset=UTF-8Kraw_content¢DtypeEvalueYâ<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE html PUBLIC
 "-//W3C//DTD XHTML 1.1//EN"
 "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">

<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en">

<head>
<meta http-equiv="content-type" content="text/html; charset=iso-8859-1" />
<link rel="stylesheet" href="../../course.css" type="text/css" />

<title>ICS 46 Spring 2018, Notes and Examples: Course Introduction</title>

</head>

<body>

<div class="navbar">

<p>
ICS 46 Spring 2018 |
<a href="../../index.html">News</a> |
<a href="../../CourseReference.html">Course Reference</a> |
<a href="../../Schedule.html">Schedule</a> |
<a href="../../ProjectGuide">Project Guide</a> |
<a href="../../Notes">Notes and Examples</a> |
<a href="http://www.ics.uci.edu/~thornton/">About Alex</a>
</p>

<hr />

</div>

<div class="header">

<p>ICS 46 Spring 2018<br />
   Notes and Examples: Course Introduction</p>

</div>

<div class="section">

<hr />

<p class="title">Course background and goals</p>

<p>This course is a deep dive into the implementation and analysis of data structures and their associated algorithms.  While you will spend a fair amount of your time in this course working on writing implementations of them, you'll also learn how to analyze the big-picture decisions that lead to good implementations, as well as how to choose from among existing ones.  We'll find that it quite often isn't possible to implement them well, no matter your level of programming skill, without making the right decisions up front, so we'll be sure that we understand how to think about things the right way and get the "big stuff" right before we try to delve into the finer-grained details.</p>

<p class="subtitle">Assessing your preparedness for the course</p>

<p>There are a few paths that lead to this course through our curriculum (or transfer curricula), but they all should leave you in (more or less) the same place with respect to how prepared you are for this course.  I'll presume that you've programmed a fair amount before, roughly equivalent to what you would have seen in our first four quarters (ICS 31, 32, 33, and 45C).  You should now be at the point where relatively simple programming problems &mdash; finding the maximum in a collection of integers, reading user input until it is valid, and things of that nature &mdash; are things you can complete fairly easily.  You should also be at the point where you can write code that solves a problem, given an abstract description of the problem, rather than just copying and pasting example code and trying to adapt it; being able to visualize a problem and its solution is core to what we'll be doing in this course.</p>

<p>Since ICS 45C &mdash; our course that introduces C++ programming at some depth &mdash; is a prerequisite for this course, I'll presume that you've previously learned C++, either as a first or a second (or later) language, roughly equivalent to what you would have learned in our ICS 45C course.  It turns out that introductory C++ courses tend to vary from one offering to another, since C++ is a large and complex language, so a quick list of things I'm assuming you've seen follows.</p>

<ul>
  <li>Basic built-in data types, such as <b>int</b>, <b>double</b>, <b>bool</b>, and <b>char</b></li>
  <li>Basic expressions and operators</li>
  <li>Control structures, such as <b>if</b> and <b>switch</b> statements, <b>while</b> and <b>for</b> loops</li>
  <li>Header and source files, and separate compilation</li>
  <li>Objects, references, pointers, and memory management</li>
  <li>Stack and heap allocation</li>
  <li>The <b>const</b> keyword and its uses</li>
  <li>Built-in data structures, like arrays and <b>std::vector</b></li>
  <li>Iterators in the Standard C++ Library</li>
  <li>Built-in algorithms, like <b>std::find</b> or <b>std::for_each</b></li>
  <li>Classes, inheritance, and polymorphism</li>
  <li>Virtual functions, pure virtual functions, and abstract base classes</li>
  <li>Making classes "well-behaved" (e.g., properly implementing constructors, destructors, and copy constructors, as well as avoiding them when unnecessary)</li>
</ul>

<p>You might also have seen other C++ features that will be of use to us in this course, though I'll assume that you either haven't seen these, or that their coverage was light.</p>

<ul>
  <li>Function templates and class templates</li>
  <li>Class design (e.g., contracts and invariants)</li>
  <li>Exceptions and their effect on design, including the resource acquisition is initialization (RAII) pattern</li>
</ul>

<p>If you've seen most of that, you'll be fine, though if you want to take a deeper look into any of those topics, either to brush up on them or because they're new to you, take a look through the <a href="http://www.ics.uci.edu/~thornton/ics45c/Notes/">Notes and Examples from my most recent ICS 45C offering</a>, which includes a thorough treatment of all of these topics.</p>

<p class="subtitle">What is this course about?</p>

<p>Our focus in this course is twofold:</p>

<ul>
  <li>Learning how to recognize the tradeoffs inherent in selecting the right data structures and/or algorithms to solve a given problem.  These tradeoffs aren't necessarily made on the basis of what's most comfortable, what's most familiar, or what requires the smallest amount of code (though that's one way to trade things off).  We'll instead be considering which choice provides the fastest solution, the solution that uses the least memory, the solution that uses the least power, the solution that makes the best use of available hardware (e.g., one that parallizes the best, if we have many processors), and so on.  And we don't just want to make these choices based on "feel"; we need to learn how to quantify them when we can.</li>
  <li>Implementing data structures and/or algorithms that are not already familiar to you.  It's likely that you've implemented something like a linked list before &mdash; that's something you'd have seen in prerequisite coursework here.  But what about data structures that are more complex?  That's one thing we'll do in this course.  The goal is to help you to cultivate the skill of being able to understand an abstract problem, visualize a solution to it, and bring it to concrete reality.  Developing techniques for making these things visible, for debugging code like this when it isn't working, and so on, is vital to being able to build all kinds of software &mdash; not just when you implement data structures &mdash; so this is a more universal skill set than you might first realize.</li>
</ul>

<p>Along the way, we'll learn enough additional C++ to allow us to tackle problems that we might not easily be able to tackle otherwise.  Periodically, we'll spend a little bit of time on "new" C++ features that you may not have seen before, but that support our work in this course; that's a fairly small percentage of what we'll do in the course.</p>

</div>

<div class="section">

<hr />

<p class="title">Course organization and logistics</p>

<p>This course web site describes the logistical details of how this course is going to be run.  Particularly, be sure that you read through the <a href="../../CourseReference.html">Course Reference</a>, the <a href="../../ProjectGuide">front page of the Project Guide</a>, and the early part of the <a href="../../ProjectGuide/Project0">Project #0</a> write-up, so you will know how this course operates, and how you'll be doing and submitting your work.</p>

</div>

</body>
</html>
Mis_redirected¢DtypeEvalueõIhttp_code¢DtypeEvalueÈQdownload_complete¢DtypeEvalueõ