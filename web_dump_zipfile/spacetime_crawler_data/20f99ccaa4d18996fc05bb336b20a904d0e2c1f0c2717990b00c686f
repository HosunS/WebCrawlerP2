¦Ifinal_url¡DtypeLhttp_headers¢DtypeEvalueˆ¢Ak¢DtypeEvalueQTransfer-EncodingAv¢DtypeEvalueGchunked¢Ak¢DtypeEvalueJSet-CookieAv¢DtypeEvalueXI79eed619ece9b34315b1b9f5af9f028a=1d9f1819bfdbe777491d2de7bafcbdb6; path=/¢Ak¢DtypeEvalueFServerAv¢DtypeEvalueX4Apache/2.4.6 (CentOS) OpenSSL/1.0.2k-fips SVN/1.7.14¢Ak¢DtypeEvalueFPragmaAv¢DtypeEvalueHno-cache¢Ak¢DtypeEvalueMCache-ControlAv¢DtypeEvalueHno-cache¢Ak¢DtypeEvalueDDateAv¢DtypeEvalueXWed, 30 Jan 2019 20:10:57 GMT¢Ak¢DtypeEvalueCP3PAv¢DtypeEvalueX2CP="NOI ADM DEV PSAi COM NAV OUR OTRo STP IND DEM"¢Ak¢DtypeEvalueLContent-TypeAv¢DtypeEvalueXtext/html; charset=utf-8Kraw_content¢DtypeEvalueYCç<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en-gb" lang="en-gb" dir="ltr" >
<head>
  <base href="http://tutors.ics.uci.edu/index.php/tutor-resources/81-cpp-resources/122-cpp-ref-pointer-operators" />
  <meta http-equiv="content-type" content="text/html; charset=utf-8" />
  <meta name="author" content="Super User" />
  <meta name="generator" content="Joomla! - Open Source Content Management" />
  <title>C++ &amp; and * Operators</title>
  <link href="/templates/beez_20/favicon.ico" rel="shortcut icon" type="image/vnd.microsoft.icon" />
  <link rel="stylesheet" href="/templates/system/css/system.css" type="text/css" />
  <link rel="stylesheet" href="/templates/beez_20/css/position.css" type="text/css" media="screen,projection"  />
  <link rel="stylesheet" href="/templates/beez_20/css/layout.css" type="text/css" media="screen,projection"  />
  <link rel="stylesheet" href="/templates/beez_20/css/print.css" type="text/css" media="print"  />
  <link rel="stylesheet" href="/templates/beez_20/css/general.css" type="text/css" />
  <link rel="stylesheet" href="/templates/beez_20/css/personal.css" type="text/css" />
  <script src="/media/system/js/mootools-core.js" type="text/javascript"></script>
  <script src="/media/system/js/core.js" type="text/javascript"></script>
  <script src="/media/system/js/caption.js" type="text/javascript"></script>
  <script src="/media/system/js/mootools-more.js" type="text/javascript"></script>
  <script src="/templates/beez_20/javascript/md_stylechanger.js" type="text/javascript"></script>
  <script src="/templates/beez_20/javascript/hide.js" type="text/javascript"></script>
  <script type="text/javascript">
window.addEvent('load', function() {
				new JCaption('img.caption');
			});
  </script>


<!--[if lte IE 6]>
<link href="/templates/beez_20/css/ieonly.css" rel="stylesheet" type="text/css" />
<style type="text/css">
#line {
  width:98% ;
}
.logoheader {
  height:200px;
}
#header ul.menu {
  display:block !important;
  width:98.2% ;
}
</style>
<![endif]-->

<!--[if IE 7]>
<link href="/templates/beez_20/css/ie7only.css" rel="stylesheet" type="text/css" />
<![endif]-->
<!--<script type="text/javascript">
  var big ='72%';
  var small='53%';
  var altopen='is open';
  var altclose='is closed';
  var bildauf='/templates/beez_20/images/plus.png';
  var bildzu='/templates/beez_20/images/minus.png';
  var rightopen='Open info';
  var rightclose='Close info';
  var fontSizeTitle='Font size';
  var bigger='Bigger';
  var reset='Reset';
  var smaller='Smaller';
  var biggerTitle='Increase size';
  var resetTitle='Revert styles to default';
  var smallerTitle='Decrease size';
</script>-->

</head>

<body>

<div id="all">
        <div id="back">
                <div id="header">
                                <div class="logoheader">
                                        <h1 id="logo">

                                                                                                                                                                                                        <span class="header1">
                                                                                </span></h1>
                                </div><!-- end logoheader -->
                                        <ul class="skiplinks">
                                                <li><a href="#main" class="u2">Skip to content</a></li>
                                                <li><a href="#nav" class="u2">Jump to main navigation and login</a></li>
                                                                                    </ul>
                                        <!--<h2 class="unseen">Nav view search</h2>-->
                                        <h3 class="unseen">Navigation</h3>
                                        
<ul class="menu">
<li class="item-464"><a href="/" >Home</a></li><li class="item-469"><a href="/index.php/becoming-a-tutor" >Becoming a Tutor</a></li><li class="item-470 current active"><a href="/index.php/tutor-resources" >Learning Resources</a></li><li class="item-477"><a href="/index.php/tutor-coordinators" >Tutor Coordinators</a></li><li class="item-476"><a href="/index.php/contact" >Contact Us</a></li></ul>

                                        <div id="line">
                                        <!-- <div id="fontsize"></div> -->
                                        <!--<h3 class="unseen">Search</h3> -->
                                        
                                        </div> <!-- end line -->


                        </div><!-- end header -->
                        <div id="contentarea">
                                        <div id="breadcrumbs">

                                                        

                                        </div>

                                        

                                                        <div class="left1 leftbigger" id="nav">
                                                   <div class="moduletable_menu">
 <h3><span
	class="backh"><span class="backh2"><span class="backh3">This Site</span></span></span></h3>
 
<ul class="menu">
<li class="item-464"><a href="/" >Home</a></li><li class="item-469"><a href="/index.php/becoming-a-tutor" >Becoming a Tutor</a></li><li class="item-470 current active"><a href="/index.php/tutor-resources" >Learning Resources</a></li><li class="item-477"><a href="/index.php/tutor-coordinators" >Tutor Coordinators</a></li><li class="item-476"><a href="/index.php/contact" >Contact Us</a></li></ul>
</div>

                                                                
                                                                


                                                        </div><!-- end navi -->
               
                                        <div id="wrapper2" >

                                                <div id="main">

                                                
                                                        
<div id="system-message-container">
</div>
                                                        <div class="item-page">

	<h2>
			<a href="/index.php/tutor-resources/81-cpp-resources/122-cpp-ref-pointer-operators">
		C++ &amp; and * Operators</a>
		</h2>








<p><strong>By Matt Butrovich (edits by Tej Vuligonda and Jason Kreinberg)</strong></p>
<p style="text-align: justify;"><span style="font-family: 'Courier New';">// ref_pointer_operators<br /> // Clarifying &amp; and * operators<br /><br /> <br /> // C++ loves to reuse keywords and operators, so it's no surprise that students<br /> // can become confused by * and &amp; showing up everywhere in code with different<br /> // results. Let's see if we can clear that up a bit...<br /> <br /> #include &lt;iostream&gt;<br /> <br /> int main()<br /> {<br /> <span>&nbsp;&nbsp;&nbsp;&nbsp; </span>int a {4};<br /> <span>&nbsp;&nbsp;&nbsp;&nbsp; </span>// a is an integer.<br /> <span>&nbsp;&nbsp;&nbsp;&nbsp; </span>a = 7;<br /> <span>&nbsp;&nbsp;&nbsp;&nbsp; </span>// a can be assigned values that are integral<br /> <br /> <span>&nbsp;&nbsp;&nbsp;&nbsp; </span>// ----- The &amp; Operator -----<br /> <br /> <span>&nbsp;&nbsp;&nbsp;&nbsp; </span>int&amp; ra = a;<br /> <span>&nbsp;&nbsp;&nbsp;&nbsp; </span>// When &amp; is placed in front of a name during a variable declaration, that<br /> <span>&nbsp;&nbsp;&nbsp;&nbsp; </span>// means that a "reference to" is being declared. ra's declarations reads<br /> <span>&nbsp;&nbsp;&nbsp;&nbsp; </span>// that ra is a reference to an integer. As such, it can only be assigned an<br /> <span>&nbsp;&nbsp;&nbsp;&nbsp; </span>// l-value, in this case a. For example...<br /> <br /> <span>&nbsp;&nbsp;&nbsp;&nbsp; </span>// int&amp; rb = 9;<br /> <br /> <span>&nbsp;&nbsp;&nbsp;&nbsp; </span>// ...doesn't work. 9 is an r-value and can't have a reference to it, at<br /> <span>&nbsp;&nbsp;&nbsp;&nbsp; </span>// least not with this syntax. It's also worth noting that references must<br /> <span>&nbsp;&nbsp;&nbsp;&nbsp; </span>// be initialized at declaration. For example...<br /> <br /> <span>&nbsp;&nbsp;&nbsp;&nbsp; </span>// int&amp; rc;<br /> <br /> <span>&nbsp;&nbsp;&nbsp;&nbsp; </span>// ...doesn't work. &amp;rc needs to be initialized.<br /> <span>&nbsp;&nbsp;&nbsp;&nbsp; </span>// The most frequent use of reference declarations is in the parameter list<br /> <span>&nbsp;&nbsp;&nbsp;&nbsp; </span>// of a function. Declaring a parameter as a reference allows a function to<br /> <span>&nbsp;&nbsp;&nbsp;&nbsp; </span>// modify the original argument, rather than being passed a local copy that<br /> <span>&nbsp;&nbsp;&nbsp;&nbsp; </span>// is restricted to the scope of the function.<br /> <br /> <span>&nbsp;&nbsp;&nbsp;&nbsp; </span>// One final comment about reference initialization: Once a reference is<br /> <span>&nbsp;&nbsp;&nbsp;&nbsp; </span>// initialized, it is a reference that is constant. Note that this does not<br /> <span>&nbsp;&nbsp;&nbsp;&nbsp; </span>// mean that the data it refers to is constant, only that where it refers<br /> <span>&nbsp;&nbsp;&nbsp;&nbsp; </span>// cannot be changed. For example, you might think that this code...<br /> <br /> <span>&nbsp;&nbsp;&nbsp;&nbsp; </span>int b {5};<span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>// ...which creates a new integer variable with a value<br /> <span>&nbsp;&nbsp;&nbsp;&nbsp; </span>ra = b;<span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>// of 5, and then assigns b to ra, would result in ra<br /> <span>&nbsp;&nbsp;&nbsp;&nbsp; </span>b = 6;<span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>// referencing b instead of a.<br /> <br /> <span>&nbsp;&nbsp;&nbsp;&nbsp; </span>// Instead, what happened is that a got assigned the value of b, because ra<br /> <span>&nbsp;&nbsp;&nbsp;&nbsp; </span>// is forever a reference to a. b is then changed to 6, and we can try<br /> <span>&nbsp;&nbsp;&nbsp;&nbsp; </span>// printing a, b, and ra...<br /> <br /> <span>&nbsp;&nbsp;&nbsp;&nbsp; </span>std::cout &lt;&lt; a &lt;&lt; b &lt;&lt; ra &lt;&lt; std::endl;<br /> <br /> <span>&nbsp;&nbsp;&nbsp;&nbsp; </span>// ... which results in 565, or numbers that correspond to the variable aba<br /> <span>&nbsp;&nbsp;&nbsp;&nbsp; </span>// respectively.<br /> <br /> <span>&nbsp;&nbsp;&nbsp;&nbsp; </span>&amp;a;<br /> <br /> <span>&nbsp;&nbsp;&nbsp;&nbsp; </span>// putting &amp; in front of a variable name denotes "address of" in C++. The<br /> <span>&nbsp;&nbsp;&nbsp;&nbsp; </span>// result of this expression is an r-value address of a. That doesn't seem<br /> <span>&nbsp;&nbsp;&nbsp;&nbsp; </span>// terribly interesting until we get to the next operator...<br /> <br /> <span>&nbsp;&nbsp;&nbsp;&nbsp; </span>// ----- The * Operator -----<br /> <br /> <span>&nbsp;&nbsp;&nbsp;&nbsp; </span>int* pa;<br /> <br /> <span>&nbsp;&nbsp;&nbsp;&nbsp; </span>// When * is placed in front of a name during a variable declaration, that<br /> <span>&nbsp;&nbsp;&nbsp;&nbsp; </span>// means that a "pointer to" is being declared. pa's declaration reads that<br /> <span>&nbsp;&nbsp;&nbsp;&nbsp; </span>// pa is a pointer to an integer. As such, it can only be assigned a memory<br /> <span>&nbsp;&nbsp;&nbsp;&nbsp; </span>// address to point to. For example...<br /> <br /> /* Visually this can be represented as pa -&gt; (an integer)<br /> * This integer value needs to be initialized<br /> */<br /> <br /> <br /> <span>&nbsp;&nbsp;&nbsp;&nbsp; </span>pa = &amp;a;<br /> <br /> <span>&nbsp;&nbsp;&nbsp;&nbsp; </span>// If we use the &amp; operator to get the address of a, we can assign that<br /> <span>&nbsp;&nbsp;&nbsp;&nbsp; </span>// value into pa to make it a pointer to a;<br /> <span>&nbsp;&nbsp;&nbsp;&nbsp; </span><br /> /* Visually this can be represented as pa -&gt; (address of a)*/<br /> <br /> <span>&nbsp;&nbsp;&nbsp;&nbsp; </span>*pa;<br /> <br /> <span>&nbsp;&nbsp;&nbsp;&nbsp; </span>// Putting * in front of a variable name denotes "dereference" in C++. The<br /> <span>&nbsp;&nbsp;&nbsp;&nbsp; </span>// result of this expression is an l-value corresponding to the data pointed<br /> <span>&nbsp;&nbsp;&nbsp;&nbsp; </span>// to by pa. Currently that value is 5, so if we want to print a by using<br /> <span>&nbsp;&nbsp;&nbsp;&nbsp; </span>// the pointer pa, the syntax is...<br /> <br /> /* Visually this can be represented as pa -&gt; (a = 5)<br /> * Deferencing pa gives us the value of a or a = 5. <br /> */ <br /> <br /> <span>&nbsp;&nbsp;&nbsp;&nbsp; </span>std::cout &lt;&lt; *pa &lt;&lt; std::endl;<br /> <br /> <span>&nbsp;&nbsp;&nbsp;&nbsp; </span>// If we didn't put the dereference operator, we would instead be printing<br /> <span>&nbsp;&nbsp;&nbsp;&nbsp; </span>// the raw memory value that pa represents.<br /> <span>&nbsp;&nbsp;&nbsp;&nbsp; </span><br /> /*This raw memory value is usually not very useful for high-level programming*/<br /> <br /> <span>&nbsp;&nbsp;&nbsp;&nbsp; </span>pa = new int {9};<br /> <br /> <span>&nbsp;&nbsp;&nbsp;&nbsp; </span>// Perhaps the most common use of a raw/dumb pointer is when using dynamic<br /> <span>&nbsp;&nbsp;&nbsp;&nbsp; </span>// memory allocation to put objects on the heap. Using pointers to stack<br /> <span>&nbsp;&nbsp;&nbsp;&nbsp; </span>// allocated items can be risky because you don't really have ownership of<br /> <span>&nbsp;&nbsp;&nbsp;&nbsp; </span>// that memory, and as such don't have as much control over object lifetime.<br /> <span>&nbsp;&nbsp;&nbsp;&nbsp; </span>// You can easily end up with dangling pointers (pointer to memory that<br /> <span>&nbsp;&nbsp;&nbsp;&nbsp; </span>// isn't what you think it is anymore) that can crash your program, or at<br /> <span>&nbsp;&nbsp;&nbsp;&nbsp; </span>// best produce unexpected results. In this case though, we've allocated a<br /> <span>&nbsp;&nbsp;&nbsp;&nbsp; </span>// new int on the heap with the value of 9, and pa now points to it. Any<br /> <span>&nbsp;&nbsp;&nbsp;&nbsp; </span>// time the new keyword is used, a memory address is returned, so a pointer<br /> <span>&nbsp;&nbsp;&nbsp;&nbsp; </span>// is the correct type to use to store that information. You might have<br /> <span>&nbsp;&nbsp;&nbsp;&nbsp; </span>// noticed that we reused pa without issue. Unlike references, pointers are<br /> <span>&nbsp;&nbsp;&nbsp;&nbsp; </span>// not constant unless explicitly declared as such. They can be reassigned<br /> <span>&nbsp;&nbsp;&nbsp;&nbsp; </span>// to other memory addresses at any time.<br /> <br /> <span>&nbsp;&nbsp;&nbsp;&nbsp; </span>*pa = 2;<br /> <br /> /*Visually, this can be represented as:<br /> * pa -&gt; (a=5) x <br /> * pa -&gt; (2) <br /> */<br /> <br /> <span>&nbsp;&nbsp;&nbsp;&nbsp; </span>// If we want to change the value that pa points to, we first dereference<br /> <span>&nbsp;&nbsp;&nbsp;&nbsp; </span>// it, and then assign into it.<br /> <br /> <span>&nbsp;&nbsp;&nbsp;&nbsp; </span>delete pa;<br /> <br /> <span>&nbsp;&nbsp;&nbsp;&nbsp; </span>// We don't want to leak memory, so we delete the object pointed to by pa.<br /> <span>&nbsp;&nbsp;&nbsp;&nbsp; </span>return 0;<br /> }<br /> <br /> // Summary:<br /> <br /> //<span>&nbsp;&nbsp;&nbsp; </span>&amp; when used with a variable declaration: "reference to"<br /> //<span>&nbsp;&nbsp;&nbsp; </span>Example: int &amp;ra = a;<br /> //<span>&nbsp;&nbsp;&nbsp; </span>"ra is a reference to a"<br /> <br /> //<span>&nbsp;&nbsp;&nbsp; </span>* when used with a variable declaration: "pointer to"<br /> //<span>&nbsp;&nbsp;&nbsp; </span>Example: int *pa;<br /> //<span>&nbsp;&nbsp;&nbsp; </span>"pa is a pointer to an integer"<br /> <br /> //<span>&nbsp;&nbsp;&nbsp; </span>&amp; when used with an already declared variable: "address of"<br /> //<span>&nbsp;&nbsp;&nbsp; </span>Example: &amp;a;<br /> //<span>&nbsp;&nbsp;&nbsp; </span>"address of a"<br /> <br /> //<span>&nbsp;&nbsp;&nbsp; </span>* when used with an already declared pointer: "dereference"<br /> //<span>&nbsp;&nbsp;&nbsp; </span>Example: std::cout &lt;&lt; *pa &lt;&lt; std::endl;<br /> //<span>&nbsp;&nbsp;&nbsp; </span>"print the underlying value of a"<br /> &nbsp;</span></p> 
	
</div>


                                                </div><!-- end main -->

                                        </div><!-- end wrapper -->

                                
                        
                                <div class="wrap"></div>

                                </div> <!-- end contentarea -->

                        </div><!-- back -->

                </div><!-- all -->

                <div id="footer-outer">
                        
                        <div id="footer-sub">


                                <div id="footer">

                                        
                                        

                                </div><!-- end footer -->

                        </div>

                </div>
        
        </body>
</html>
Mis_redirected¢DtypeEvalueôIhttp_code¢DtypeEvalueÈQdownload_complete¢DtypeEvalueõ