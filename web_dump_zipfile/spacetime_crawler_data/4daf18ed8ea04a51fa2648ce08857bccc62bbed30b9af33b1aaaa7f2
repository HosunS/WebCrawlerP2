¦Ifinal_url¡DtypeLhttp_headers¢DtypeEvalue†¢Ak¢DtypeEvalueNContent-LengthAv¢DtypeEvalueD1336¢Ak¢DtypeEvalueMAccept-RangesAv¢DtypeEvalueEbytes¢Ak¢DtypeEvalueFServerAv¢DtypeEvalueX4Apache/2.4.6 (CentOS) OpenSSL/1.0.2k-fips SVN/1.7.14¢Ak¢DtypeEvalueMLast-ModifiedAv¢DtypeEvalueXTue, 10 Oct 2017 04:57:32 GMT¢Ak¢DtypeEvalueDETagAv¢DtypeEvalueS"538-55b2a250e4700"¢Ak¢DtypeEvalueDDateAv¢DtypeEvalueXFri, 01 Feb 2019 05:39:32 GMTKraw_content¢DtypeEvalueY8# sum_numbers3.py
#
# ICS 32A Fall 2017
# Code Example
#
# This function sums the integers in a list containing *either* integers
# of sublists that are flat lists of integers.
#
# One interesting new tidbit here that you might not have seen is that you
# check the type of an object.  type(x) is a function that returns the
# type of the object x; you can compare types using == the same way you
# can compare other kinds of objects.  We use that to check whether an
# object is a list, like this:
#
#     if type(element) == list:
#
# which allows us to distinguish between elements that are integers and
# elements that are sublists.

def sum_numbers(numlist: [int or [int]]) -> int:
    '''
    Adds up the integers in a list whose elements are either integers or
    lists of integers
    '''

    total = 0

    for element in numlist:
        if type(element) == list:
            for num in element:
                total += num
        else:
            total += element

    return total



assert(sum_numbers([[1, 2, 3], 4, [5, 6], 7, 8]) == 36)
assert(sum_numbers([1, 2, 3]) == 6)
assert(sum_numbers([[1, 2], [3, 4], [5, 6]]) == 21)
assert(sum_numbers([[1], [2], [3]]) == 6)
assert(sum_numbers([[8]]) == 8)
assert(sum_numbers([[], [], [], []]) == 0)
assert(sum_numbers([]) == 0)
Mis_redirected¢DtypeEvalueôIhttp_code¢DtypeEvalueÈQdownload_complete¢DtypeEvalueõ