¦Ifinal_url¡DtypeLhttp_headers¢DtypeEvalue‡¢Ak¢DtypeEvalueNContent-LengthAv¢DtypeEvalueE39751¢Ak¢DtypeEvalueMAccept-RangesAv¢DtypeEvalueEbytes¢Ak¢DtypeEvalueFServerAv¢DtypeEvalueX4Apache/2.4.6 (CentOS) OpenSSL/1.0.2k-fips SVN/1.7.14¢Ak¢DtypeEvalueMLast-ModifiedAv¢DtypeEvalueXTue, 24 Feb 2004 08:23:32 GMT¢Ak¢DtypeEvalueDETagAv¢DtypeEvalueT"9b47-3d414dd938900"¢Ak¢DtypeEvalueDDateAv¢DtypeEvalueXThu, 31 Jan 2019 00:33:58 GMT¢Ak¢DtypeEvalueLContent-TypeAv¢DtypeEvalueXtext/html; charset=UTF-8Kraw_content¢DtypeEvalueY›G<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE html PUBLIC
 "-//W3C//DTD XHTML 1.1//EN"
 "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">

<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en">

<head>
<meta http-equiv="content-type" content="text/html; charset=iso-8859-1" />
<link rel="stylesheet" href="course2.css" type="text/css" />

<title>ICS 142 Winter 2004, Midterm Study Guide</title>
</head>

<body>

<div class="navbar">

<p>
ICS 142 Winter 2004 |
<a href="index.html">News</a> |
<a href="CourseReference.html">Course Reference</a> |
<a href="Schedule.html">Schedule</a> |
<a href="LabManual">Lab Manual</a> |
<a href="news:ics.142">ics.142 newsgroup</a> |
<a href="http://www.ics.uci.edu/~thornton/">About Alex</a>
</p>

<hr />

</div>

<div class="header">

<p>ICS 142 Winter 2004<br />
   Midterm Study Guide</p>

</div>

<div class="section">

<hr />

<p class="title">Introduction</p>

<p>This study guide is a summary of the material covered in lecture thusfar.  I've estimated where we would end up by the conclusion of Wednesday's lecture.  Material we haven't covered by the end of Wednesday's lecture (and the readings that correspond to it) will not be included on the Midterm, even if it's listed below.  (This is the hazard presented by posting a study guide early, but I thought you'd rather have an estimated version earlier than a perfect version later.)</p>

<p>While I don't intend to include questions on the Midterm testing tiny details from the textbook that were not covered in lecture, you are responsible for the assigned readings.  Broad ideas and important points from the readings are fair game for the exam, even if we didn't cover them in lecture.  I haven't included this material in the study guide.  However, there are a few things that I've specifically listed below as off-limits for the exam (e.g. the DFA minimization algorithm), which will slightly reduce the amount of reading material you'll need to study.</p>

</div>

<div class="section">

<hr />

<p class="title">The study guide</p>

<p><i>The big picture: What does a compiler do?</i></p>

<ul>
  <li>A <i>compiler</i> is a program that takes a program in some source language as its input, and emits an equivalent program in some target language as output.
    <ul>
      <li>The notion of <i>equivalent program</i> needs to be defined.  An equivalent program is one that may or may not perform the same specific set of operations in the same order, but will generate the same observable result as the original one.</li>
      <li>In general, we'd like our compilers to make improvements to our programs, so long as the observable result is the same.  Such improvements are generally called <i>optimizations</i>.</li>
      <li>Of course, we need to think very carefully as compiler writers about what constitutes an "observable result."</li>
    </ul>
  </li>
  <li>Compilers do a pretty big job.  Like any large piece of software, it makes sense to separate concerns, splitting the program into smaller pieces.
    <ul>
      <li>For many years, a typical design strategy was to split the compiler into two pieces: a <i>front end</i> and a <i>back end</i>.
        <ul>
          <li>The front end focused on validating the source program and understanding its meaning.</li>
          <li>The back end concerned itself with generating an equivalent program in the target language.</li>
        </ul>
      </li>
      <li>The output of the front end was a simplified version of the source program, often called an intermediate representation (IR).
        <ul>
          <li>The name <i>intermediate representation</i> arises because it's neither the source nor the target program, and is used only within the compiler.</li>
        </ul>
      </li>
      <li>The back end assumes that the IR is well-formed, since it was built by the front end, rather than a fallible human programmer.</li>
      <li>This approach has a couple of clear advantages:
        <ul>
          <li>Separation of concerns.  The jobs performed by the front and back ends are largely distinct, so it makes good software engineering sense to separate them.</li>
          <li>Reuse.  By building a library of front ends that build the same kind of IR, and a library of back ends that emit target programs for various architectures using that same kind of IR, one can easily build a large collection of compilers by simply connection different front ends to different back ends.</li>
        </ul>
      </li>
    </ul>
    <ul>
      <li>A more recent overall design strategy includes a third component, an <i>optimizer</i>.  Optimizers take as input a program in some kind of IR and generate as output a "better" version of the program in some kind of IR (either the same kind or a different kind).
        <ul>
          <li>What constitutes "better" is a matter of some debate.  There are many attributes of the program we could optimize: execution speed, code size, and power consumption are three examples.</li>
        </ul>
      </li>
      <li>Not surprisingly, passing IR's between the phases allows you to plug together a front end, an optimizer (or a sequence of optimizers), and a back end to yield a compiler.</li>
    </ul>
  </li>
  <li>Along the way, a compiler may use some global data structures, such as <i>symbol tables</i>, to record information about the program that is determined at different phases.</li>
</ul>

<p><i>Desirable properties of a compiler</i></p>

<ul>
  <li>Ideally, we'd like compilers to exhibit certain desirable properties.
    <ul>
      <li><i>Execution speed of compiled code</i>.  If necessary, we'd like our compiler to be able to generate the most speed-efficient code possible.</li>
      <li><i>Size of compiled code</i>.  We'd also like our compiler to be able to generate the most space-efficient code possible.  Oftentimes, this represents a tradeoff, whereby you give up execution speed for size and vice versa.  Ideally, programmers would be able to specify which is more important and instruct the compiler to trade one for the other.</li>
      <li><i>Error reporting</i>.  We'd like our compiler to emit understandable error messages when an error is encountered in the source program.  (This is easier said than done.)</li>
      <li><i>Support for debugging</i>.  Debugging is partially supported by a compiler.  To use a symbolic or graphical debugger on, say, a compiled C++ program, a compiler will need to be instructed to include information like variable names and function signatures into the generated code, information that's generally left out of a compiled C++ program.</li>
      <li><i>Execution speed of compiler</i>.  All other things being equal, a fast compiler is better than a slow one.  Of course, we're often willing to use a slower compiler if it gives us other, more desirable benefits.</li>
    </ul>
  </li>
</ul>

<p><i>More details about the front end of a compiler</i></p>

<ul>
  <li>The front end's performs the following tasks:
    <ul>
      <li>Reads the source program from some input source such as a file.</li>
      <li>Validates the source program, ensuring that it's a legal program in the programming language expected.</li>
      <li>Comes to an understanding of the meaning of the source program.</li>
      <li>Conveys that meaning (as concisely as possible) by building and returning an intermediate representation and passing it to later stages of compilation.</li>
    </ul>
  </li>
  <li>Extracting and conveying the meaning of the source program is a big job.  It makes sense to divide it into smaller ones.
    <ul>
      <li>The first stage is called <i>scanning</i>, in which the compiler takes the program, which is a stream of characters, and turns it into a stream meaningful patterns called <i>tokens</i>.  The rest of the compiler, then, does not need to concern itself with every character of the input program, but instead deals with larger abstractions such as identifiers and string literals.</li>
      <li>The next stage is called <i>parsing</i>, in which the compiler takes that stream of tokens and discovers whether these tokens form a syntactically legal program.  In this stage, only the syntax (the form of the program) is checked.  The semantics (or meaning) of the program is checked later.</li>
      <li>The third stage is called <i>semantic analysis</i> or <i>context-sensitive analysis</i>.  In this stage, the meaning of the program is determined, and semantic errors, such as using undeclared variables, are detected.</li>
    </ul>
  </li>
</ul>

<p><i>Scanning</i></p>

<ul>
  <li>A scanner's job is to recognize patterns in the input program and use those patterns to group characters togethers into <i>tokens</i> or words.</li>
  <li>A scanner is unconcerned with whether the sequence of tokens makes sense.  It is only concerned with recognizing legal tokens.</li>
  <li>One way to solve this problem is to build a <i>hand-coded scanner</i>, in which you write a sequence of conditional statements and loops to detect these patterns.
    <ul>
      <li>While plausible for a very simple language, this can become very tedious in a big hurry.</li>
      <li>Some theory helps us to solve the problem in a better way.</li>
    </ul>
  </li>
  <li>A <i>deterministic finite automaton (DFA)</i> is a five-tuple (S, &Sigma;, &delta;, s<sub>0</sub>, S<sub>F</sub>):
    <ul>
      <li>S is a finite set of states</li>
      <li>&Sigma; is the alphabet (the character set) used by the DFA</li>
      <li>&delta; is a function.  The value &delta;(s, c) indicates the state that the DFA should move to if it is in state s and sees the character c on the input.</li>
      <li>s<sub>0</sub> &isin; S is the start state</li>
      <li>S<sub>F</sub> &sube; S is the set of final states</li>
    </ul>
  </li>
  <li>A DFA begins in its start state, consuming each input symbol in order, and using the &delta; function to determine which state to move to.  If, after consuming all the input, the DFA is in a final state, the input is accepted.  If the DFA is not in a final state, the input is rejected.</li>
  <li>We say that the set of strings accepted by a DFA D is the <i>language of D</i>, denoted L(D).</li>
  <li>Implementing a DFA in a computer program turns out to be relatively straightforward:
    <ul>
      <li>Declare a variable, say an integer, to keep track of the current state.</li>
      <li>Initialize that variable to the start state.</li>
      <li>Process the input characters in a loop, setting the state variable to the new state after each character.</li>
      <li>To easily look up the value of the &delta; function, store it in a two-dimensional array, with states as the rows and input characters (or groups of input characters) as the columns.</li>
    </ul>
  </li>
  <li>In trying to use DFA's directly to build a scanner, we realize two things:
    <ul>
      <li>Implementing a DFA in this way is tedious.  Specifying the &delta; function in a two-dimensional array will be painful.  A tool would help.</li>
      <li>Even with a tool that would take the definition of a DFA as input and spit out code for it as output, there's a problem.  There's quite a semantic distance between the problem we're trying to solve -- specifying the patterns we're interested in recognizing -- and the formalism we're using to solve it.</li.>
      <li>Ideally, we'd rather specify the patterns in some more intuitive notation, and let a tool convert it to a DFA and spit out the code for it.</li>
    </ul>
  </li>
</ul>

<p><i>Regular expressions</i></p>

<ul>
  <li>A <i>regular expression</i> defines a language over some alphabet &Sigma;.</li>
  <li>&epsilon; is a regular expression denoting the set containing only the empty string.</li>
  <li>A character c &isin; &Sigma; is, itself, a regular expression that denotes a language consisting only of a string containing only c.</li>
  <li>The <i>concatenation</i> of two regular expressions R and S, denoted RS, is a regular expression.  The resulting regular expression describes a language of all strings that consist of a string in L(R) followed by a string in L(S).</li>
  <li>The <i>alternation</i> of two regular expressions R and S, denoted R | S, is a regular expression.  The resulting regular expression describes a language of all strings that are in L(R) &cup; L(S).</li>
  <li>The <i>Kleene closure</i> of a regular expression R, denoted R*, is a regular expression.  The resulting regular expression describes a language of all strings that consist of zero or more occurrences of strings in L(R) concatenated together.</li>
  <li>To simplify the notation, we specify operator precedences as follows:
    <ul>
      <li>Kleene closure has the highest precedence</li>
      <li>Concatenation has the next-highest precedence</li>
      <li>Alternation has the lowest precedence</li>
      <li>Parentheses are used to override precedence, in much the same way as we use them in mathematics and programming languages.</li>
    </ul>
  <li>While the above is a complete definition of regular expressions in a mathematical sense, we use a few shorthands sometimes, too:
    <ul>
      <li>We use the notation R+ to denote a language of all strings that consist of one or more occurrences of strings in L(R) concatenated together.  (In other words, RR*.)</li>
      <li>We use the notation R? to denote a language of all strings that consist of zero or one occurrences of strings in L(R).  (In other words, &epsilon; | R.)</li>
      <li><i>Character classes</i> are shorthands for a set of characters.  For example, the character class [0-9] denotes one occurrence of a character that is either 0, 1, 2, ..., 9.  Naturally, you can combine character classes with other operators, to yield regular expressions like [0-9]+ to denote patterns.</li>
    </ul>
  </li>
  <li>Examples:
    <ul>
      <li>Two regular expressions that recognize either the word "public", "protected", or "private":</li>
        <ul>
          <li>public | protected | private</li>
          <li>p(ublic | r(otected | ivate))</li>
        </ul>
      </li>
      <li>A regular expression that recognizes integers without leading zeroes:
        <ul>
          <li>0 | [1-9][0-9]*</li>
        </ul>
      </li>
      <li>A regular exrpession that recognizes real-number constants for a hypothetical programming language (including scientific notation):
        <ul>
          <li>[0-9]* . [0-9]+ ((e | E) [0-9]+)?</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>Regular expressions are a much more intuitive notation for humans to use to specify patterns.  Unfortunately, they make a lousy implementation strategy.</li>
  <li>Fortunately, some theory can help.  Regular expressions can be converted to DFA's mechanically, which implies that a tool could do the following:
    <ul>
      <li>Take a regular expression as input.</li>
      <li>Convert the regular expression to a DFA.</li>
      <li>Emit code that implements the DFA.</li>
    </ul>
  </li>
</ul>

<p><i>Converting regular expressions to DFA's</i></p>

<ul>
  <li>A useful theoretical result is that regular expressions and DFA's describe the same set of languages.
    <ul>
      <li>In other words, any language that can be described by a regular expression can be recognized by a DFA and vice versa.</li>
      <li><b><i>The algorithm given in the book for converting a DFA to a regular expression will not be covered on the exam.</i></b></li>
    </ul>
  </li>
  <li>This implies that it must be possible to convert a regular expression to a DFA.  Unfortunately, it needs to be done in multiple steps.</li>
  <li>The first step is to convert the regular expression to an intermediate form called a <i>non-deterministic finite automata</i> or NFA.  An NFA is just like a DFA, with two differences:
    <ul>
      <li>It can specify more than one transition from some state on a given input character.</li>
      <li>It can specify &epsilon;-transitions, which can be followed without consuming an input character.</li>
      <li>Perhaps surprisingly, even with these differences, NFA's and not theoretically more powerful than DFA's are.
        <ul>
          <li>In other words, any language that can be recognized by an NFA can also be recognized by a DFA.</li>
          <li>This implies that any NFA can be converted to a DFA.</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>An NFA processes an input string differently from a DFA.
    <ul>
      <li>A DFA is in exactly one state at any given time.  It begins in the start state.  Upon consuming each input character, it moves to exactly one state.</li>
      <li>An NFA is in a <i>set</i> of states at any given time.  
        <ul>
          <li>It begins in the &epsilon;-closure of the start state, which is the start state along with any states that can be reached from the start state by taking only &epsilon;-transitions.</li>
          <li>Upon consuming each input character, it moves to the &epsilon;-closure of all the states it reaches by following transitions on that character from all the states it was in.</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>An NFA can be constructed from a regular expression mechanically, using a construction called <i>Thompson's construction</i>.
    <ul>
      <li>It should be noted that there are other constructions that can be used to construct an NFA from a regular expression.</li>
      <li>Thompson's construction is used in automated tools because it can be implemented more efficiently than others.</li>
      <li>The principle it is built upon is that the NFA it constructs (and all of the intermediate ones it constructs) have a single start state and a single final state, with no transitions entering the start state and no transitions leaving the final state.</li>
    </ul>
  </li>
  <li>Thompson's construction proceeds by taking a regular expression and applying operators to it in precedence order.
    <ul>
      <li>Applying each operator requires taking the NFA for its operands and pasting it together into one NFA using a template.</li>
      <li>The templates are shown in the textbook and were shown in lecture.</li>
      <li>After applying the templates for all of the operators in the regular expression, the resulting NFA recognizes the same language described by the regular expression.</li>
    </ul>
  </li>
  <li>An NFA, unfortunately, is not a very good implementation tool.  No problem!  We'll convert it to a DFA, using the <i>subset construction</i>.
    <ul>
      <li>The subset construction builds a DFA that simulates the behavior of the NFA.</li>
      <li>Each state in the DFA corresponds to a subset of the states in the NFA.  (The total number of states in the DFA could be the size of the power set of the states in the NFA, but in practice they turn out to be much smaller, since most of these states cannot be reached.)</li>
      <li>For every state s in the DFA, there is a transition on an input character to the state s' if the NFA would go from the subset of its states corresponding to s to the subset of its states corresponding to s' on that input character.</li>
    </ul>
  </li>
  <li>After constructing a DFA using the subset construction, we can run a <i>DFA minimization algorithm</i> to minimize the number of states in the DFA.
    <ul>
      <li><b><i>This algorithm was not covered in lecture and will not be covered on the exam.</i></b></li>
    </ul>
  </li>
</ul>

<p><i>Constructing an automated scanner</i></p>

<ul>
  <li>A DFA takes an input string and, ultimately, says "accept" or "reject" as its output.</li>
  <li>We need a tool that takes an input program, a stream of characters, and returns a stream of tokens.  In other words, we need a DFA to recognize many words, not just one.</li>
  <li>Using an automated tool such as JFlex, you specify a list of regular expressions that specify all the patterns you'd like your scanner to recognize.</li>
  <li>The tool will do a few things:
    <ul>
      <li>Use alternation ('|') to build one regular expression out of all of your patterns.</li>
      <li>Convert the regular expression to an NFA using Thompson's construction.</li>
      <li>Convert the NFA to a DFA using the subset construction.</li>
      <li>Minimize the number of DFA states using a minimization algorithm.</li>
      <li>Emit code that recognizes patterns using the DFA.</li>
    </ul>
  </li>
  <li>One approach would involve using the DFA as a recognizer.  Whenever a final state was reached in the DFA, we could consider the consumed input to be a token, return that token, then go back to the start state.  There's a problem with this approach:
    <ul>
      <li>Due to overlapping of patterns, this would result in some very odd behavior.  For example, the word <b>fork</b> in a Java program should be considered an identifier.  But our pattern matcher would recognize it as the keyword <b>for</b> followed by the identifier <b>k</b>.</li>
      <li>To solve problems like this, automated scanners search for the <i>longest</i> possible pattern instead, using the following approach:
        <ul>
          <li>Continue running the DFA and consuming input until it reaches a situation in which there is no output transition on the current character.</li>
          <li>If, at that point, the DFA is in a final state, you've recognized the pattern represented by that final state.</li>
          <li>If not, backtrack through the input you consumed until you encounter a final state, and that's your pattern instead.</li>
          <li>If you were never in a final state, the input does not begin with a lexeme, and an error will be reported.</li>
        </ul>
      </li>
      <li>Since more than one pattern will often be matched by the same sequence of input, an automated tool will generally disambiguate by choosing the first pattern listed in the input script.</li>
    </ul>
  </li>
</ul>

<p><i>Will you be covering JFlex on the exam?</i></p>

<ul>
  <li><b><i>Intimate details of JFlex will not be covered, but I do expect you to understand the underlying theory discussed above.</i></b></li>
</ul>

<p><i>Parsing</i></p>

<ul>
  <li>The job of a <i>parser</i> is to determine if the sequence of tokens recognized by the scanner can be combined to form a syntactically legal input program.
    <ul>
      <li>Its output, theoretically speaking, is a parse tree for the input program.</li>
      <li>In practice, a boiled-down version of the parse tree, or a flat intermediate representation, is emitted instead.</li>
    </ul>
  </li>
  <li>A <i>context-free grammar</i> is a formalism that is suitable for specifying the syntax of a programming language.  It consists of:
    <ul>
      <li>A set of <i>terminal symbols</i>, which correspond to the tokens that can be recognized by the scanner.</li>
      <li>A set of <i>nonterminal symbols</i>, which are abstractions for groupings of tokens that are considered legal in an input program.</li>
      <li>A <i>start symbol</i>, which is a nonterminal symbol that is considered to be an abstraction for an entire input program.</li>
      <li>A set of <i>rules</i> (sometimes called <i>productions</i>) that explain how nonterminal symbols can be replaced legally with a sequence of nonterminal and/or terminal symbols.</li>
    </ul>
  </li>
  <li>A grammar describes a (potentially infinite) set of syntactically legal input programs.  This set is called the <i>language of the grammar</i>.</li>
  <li>An example grammar for identifiers surrounded by a matched set of parentheses:
    <ul>
      <li><i>S</i> &rarr; <b>'('</b> <i>S</i> <b>')'</b> | <b>identifier</b></li>
    </ul>
  </li>
  <li>There are two ways to demonstrate that an input program is in the language described by a grammar.
    <ul>
      <li>One is to draw a tree, with the start symbol as the root node, terminal symbols as leaves, and each node containing a nonterminal symbol having zero or more child nodes corresponding to the symbols on the right-hand side of one of its rules.</li>
      <li>Another is to write a <i>derivation</i>.  A derivation corresponds to some parse tree.  Examples:
        <ul>
          <li><i>S</i> &rArr; <b>(</b> <i>S</i> <b>)</b> &rArr; <b>(</b> <b>identifier</b> <b>)</b></li>
          <li><i>S</i> &rArr; <b>(</b> <i>S</i> <b>)</b> &rArr; <b>((</b> <i>S</i> <b>))</b> <b>((</b> <b>identifier</b> <b>))</b></li>
        </ul>
      </li>
      <li>Compiler writers are primarily interested in two kinds of derivations:
        <ul>
          <li><i>leftmost derivations</i>.  Derivations in which the leftmost nonterminal is replaced at each step.</li>
          <li><i>rightmost derivations</i>.  Derivations in which the rightmost nonterminal is replaced at each step.</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>A parser's job, then, is to discover either a parse tree or a derivation that indicates that the input program is in the language of the grammar.</li>
  <li>If there is some input program for which there is more than one parse tree (or more than one leftmost or rightmost derivation), the grammar is said to be <i>ambiguous</i>.
    <ul>
      <li>Since a compiler typically infers the program's meaning from the structure of the parse tree, ambiguity is generally considered to be a very bad thing in the grammar of a programming language.</li>
    </ul>
  </li>
  <li>There isn't one way to resolve ambiguity in a context-free grammar, though there are techniques that help.  One such technique is the <i>stratification</i> technique, which is used to establish precedence and associativity of operators.
    <ul>
      <li>Starting with this grammar for arbitrarily nested expressions:
        <ul>
          <li><i>E</i> &rarr; <i>E</i> <b>+</b> <i>E</i> | <i>E</i> <b>-</b> <i>E</i> | <i>E</i> <b>*</b> <i>E</i> | <i>E</i> <b>/</b> <i>E</i> | <b>(</b> <i>E</i> <b>)</b> | <b>identifier</b></li>
        </ul>
      </li>
      <li>We can transform it to this:
        <ul>
          <li><i>E</i> &rarr; <i>E</i> <b>+</b> <i>E2</i> | <i>E</i> <b>-</b> <i>E2</i> | <i>E2</i></li>
          <li><i>E2</i> &rarr; <i>E2</i> <b>*</b> <i>E3</i> | <i>E2</i> <b>/</b> <i>E3</i> | <i>E3</i></li>
          <li><i>E3</i> &rarr; <b>(</b> <i>E</i> <b>)</b> | <b>identifier</b></li>
        </ul>
      </li>
      <li>We often call this grammar the <i>classic expression grammar</i>.</li>
      <li>The resulting grammar establishes that:
        <ul>
          <li>+ and - have the lowest precedence and are left-associative</li>
          <li>* and / have the next-highest precedence and are left-associative</li>
          <li>parenthesized expressions have a higher precedence than those that are not parenthesized</li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<p><i>Top-down parsing</i></p>

<ul>
  <li>A <i>top-down parser</i> begins with a parse tree whose root contains the start symbol.
    <ul>
      <li>At every step, it attempts to expand one of the nonterminals at the lower fringe of the tree (i.e. a nonterminal in a leaf node) by one of its rules.</li>
      <li>To expand the nonterminal, the symbols on the right-hand side of the selected rule 
    </ul>
  </li>
  <li>A top-down parser, theoretically, could expand the nonterminals in any order.  In practice, however, top-down parsing algorithms are limited by a couple of desirable properties:
    <ul>
      <li>We'd like to be able to parse the input in the natural order that we'd read and scan the input file: left-to-right.</li>
      <li>We'd like to parse the input as efficiently as possible, ideally making the "right decision" at every step and only looking at each input token once.</li>
    </ul>
  </li>
  <li>In order to solve the first problem, parsing left-to-right, we could start with this algorithm:
    <ul>
      <li>
<pre>
make new parse tree, with start symbol in root
node = root of parse tree

loop
{
    if node contains a terminal t
        if next input token is t
            advance node to next node on lower fringe of tree
        else
            backtrack
    else if node contains a nonterminal nt
        pick a rule nt &rarr; &beta;
        extend tree using that rule
        node = leftmost symbol in &beta;
}
</pre>
      </li>
      <li>This algorithm works, theoretically speaking.  It is capable of finding a parse tree for the input program (provided that the rules are picked nondeterministically).</li>
      <li>However, as a practical matter, this algorithm is terribly inefficient.  It essentially amounts to an exhaustive search of all possible parse trees (or derivations), looking for the right one!</li>
    </ul>
  </li>
  <li>To solve the second problem, we need to find an algorithm that allows us, when looking at a nonterminal nt, always to choose the right rule to expand by.
    <ul>
      <li>In order to do this, we need some support from the grammar.  The grammar needs to be constructed in such a way that we can always make the right choice by looking only at the next token of input.</li>
    </ul>
  </li>
</ul>

<p><i>Recursive descent parsing</i></p>

<ul>
  <li>This topic is discussed in a great deal of detail in <a href="LabManual/Assignment2">Assignment #2</a> and also in the textbook.</li>
</ul>

<p><i>Table-driven LL(1) parsing</i></p>

<ul>
  <li>Recursive descent parsing is one form of top-down LL(1) parsing.
    <ul>
      <li>While it is straightforward to code by hand, it has a problem: the size of the code is directly proportional to the size of the grammar.</li>
      <li>Yet the code all follows a very regular, predictable pattern, directly encoding information from the grammar and its FIRST+/FOLLOW sets.</li>
      <li>If we were to restructure the program somewhat, we might be able to write code for the recurring pattern once, then encode the rules for expanding nonterminals into a table.</li>
    </ul>
  </li>
  <li>A <i>table-driven LL(1) parser</i> does just that!
    <ul>
      <li>It is built around a parsing table, with nonterminal symbols labeling the rows and terminal symbols (and eof) labeling the columns.</li>
      <li>Intuitively, the cell Table[X, y] contains an indication of the rule that should be used to expand X if the next input symbol is y.
        <ul>
          <li>The rules are generally numbered consecutively, and these numbers are stored in the table.</li>
        </ul>
      </li>
      <li>More precisely:
        <ul>
          <li>Table[X, y] = n if n is the number of a rule X &rarr; &beta; and y &isin; FIRST+(&beta;).</li>
          <li>If the rule X &rarr; &epsilon; is also in the grammar, Table[X, y] should be the number of this &epsilon;-rule for all symbols in FOLLOW(X).</li>
        </ul>
      </li>
      <li>It should be reiterated that this is exactly the same information that is encoded into the structure of the code of a recursive descent parser.  The information is encoded into the table, so that the code size is not affected by the size of the grammar.  (Obviously, the size of the table is, but the table is much more compact than the code was.)</li>
      <li>Once you have the table, the algorithm works like this:
        <ul>
          <li>
<pre>
push eof
push start symbol
loop
{
    if (top of stack is eof and next token is eof)
        ACCEPT!
    else if (top of stack is terminal or eof)
        if (top of stack is same as next token)
            pop terminal from stack
            consume next token
        else
            ERROR!
    else if (Table[top of stack, next token] is a rule A &rarr; &beta;<sub>1</sub> &beta;<sub>2</sub> ... &beta;<sub>k</sub>)
        pop A from stack
        push &beta;<sub>k</sub> ... &beta;<sub>1</sub>
    else
        ERROR!
}
</pre>
          </li>
        </ul>
      </li>
      <li>Naturally, you wouldn't want to hand-code one of these table-driven LL(1) parsers, but you can certainly imagine a tool that would take an LL(1) grammar as input and emit a table-driven LL(1) parser as output.</li>
    </ul>
  </li>
</ul>

<p><i>Bottom-up parsing</i></p>

<ul>
  <li>Top-down parsers, specifically recursive descent or table-driven LL(1) parsers, are simple and efficient.</li>
  <li>On the other hand, implementing them may require a number of transformations (e.g. left factoring, left recursion elimination) on the grammar of the programming language...
    <ul>
      <li>...making a formerly intuitive, clear grammar into a much clunkier one.</li>
    </ul>
  </li>
  <li>Particularly if we're using tools to generate our parser, in which the grammar is actually part of the source code of our compiler, keeping the grammar readable is important.</li>
  <li>Also, although most programming language constructs can be expressed using LL(1) grammars, some can't.</li>
  <li>For these reasons, we need bottom-up parsers.</li>
  <li>A <i>bottom-up parser</i> begins with the input program as leaves in a parse tree, and the start symbol in the root.
    <ul>
      <li>It endeavors, at every step, to combine a sequence of <i>orphaned nodes</i> (i.e. those with no parents) that represent the right-hand side of some grammar rule together, putting the nonterminal on the left-hand side of the rule above them.</li>
      <li>The process terminates when either there are no more sequences of orphaned nodes that can be combined in this fashion, or when the entire input program has been connected into one tree with the start symbol at the root.</li>
    </ul>
  </li>
</ul>

<p><i>Shift-reduce parsing</i></p>

<ul>
  <li>A typical bottom-up parser uses a <i>shift-reduce</i> technique.  A <i>shift-reduce parser</i> is one that is built around a parser stack.
    <ul>
      <li>The parser stack consists of (at least) nonterminal and terminal symbols.</li>
      <li>At every step, the parser makes a decision about whether to do one of two things:
        <ul>
          <li><i>Shift</i>.  Push the next token of input on to the stack.</li>
          <li><i>Reduce</i>.  Pop k symbols off the top of the stack and replace them with a nonterminal symbol whose righthand side is those k symbols.  (In other words, apply one of the grammar rules in reverse.)</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>The tricky part is knowing whether to shift or reduce.  If a sequence of symbols &beta; on the top of the stack is supposed to be reduced by the rule A &rarr; &beta;, we say that &beta; is a <i>handle</i>.
    <ul>
      <li>By "supposed to," I mean that if the correct move to make is to reduce by the rule A &rarr; &beta;, we call the top symbols on the stack &beta; a handle.</li>
    </ul>
  </li>
  <li>With this in mind, here's a simple shift-reduce parsing algorithm:
    <ul>
      <li>
<pre>
loop
{
    if the top of the stack is &beta; and A &rarr; &beta; is a handle
        pop |&beta;| symbols off the stack
        push A on the stack in their place
        // this action is called a reduction
    else if there are more tokens in the input
        push the next token
        // this action is called shifting
    else if the stack has only the start symbol on it
        ACCEPT!
    else
        ERROR!
}
</pre>
      </li>
    </ul>
  </li>
  <li>The problem with this algorithm, of course, is that it's left the most important part -- determining if there is a handle on top of the stack -- as voodoo magic.
    <ul>
      <li>We need an algorithm for finding handles.</li>
      <li>If we can develop such an algorithm, particularly one that can make the decision in constant time at each step, the entire parse will be linear with respect to <i>s</i> + <i>r</i>, where <i>s</i> is the total number of shifts and <i>r</i> is the total number of reductions.</li>
    </ul>
  </li>
</ul>

<p><i>LR(1) parsing</i></p>

<ul>
  <li>An <i>LR(1) parser</i> is a bottom-up, shift-reduce parser that uses one such mechanism for finding handles.</li>
  <li>At every step, the LR(1) parser is considered to be in one out of a finite set of <i>states</i> (somewhat like a DFA).  It encodes the knowledge of how to find handles into two tables:
    <ul>
      <li>An <i>Action</i> table, with the rows labeled with parser states and the columns labeled with terminal symbols (and eof).  Each entry in the table indicates one of four actions:
        <ul>
          <li><i>shift s'</i>, meaning that the parser should shift the next token of input and move to parser state s'.</li>
          <li><i>reduce A &rarr; &beta;</i>, meaning that the parser should reduce by the rule A &rarr; &beta;.  (In a typical LR(1) parser, all rules are numbered consecutively and uniquely, so a reduce action might be "reduce 3", meaning that the reduction should be done using rule #3 in the grammar.)</li>
          <li><i>accept</i>, meaning that the parser should accept the input program as being legal.</li>
          <li><i>error</i>, meaning that the parser has determined that there is an error in the input program.</li>
        </ul>
      </li>
      <li>A <i>Goto</i> table, with the rows labeled with parser states and the columns labeled with nonterminal symbols.  Each entry in the table is a parser state, and means that if the parser was in state s and then recognized an A, it should proceed to state Goto[s, A].</li>
    </ul>
  </li>
  <li>Given these tables, here is the LR parsing algorithm:
    <ul> 
      <li>
<pre>
push start state s<sub>0</sub>
loop
{
    if Action[top of stack, next token] is shift s<sub>1</sub>
        push next token
        push s<sub>i</sub>
    else if Action[top of stack, next token] is reduce A &rarr; &beta;
        pop 2|&beta;| symbols
        s = top of stack
        push A
        push Goto[s, A]
    else if Action[top of stack, next token] is accept
        ACCEPT!
    else
        ERROR!
}
</pre>
      </li>
      <li>An example of this algorithm in action appears in the textbook (and was covered in lecture).</li>
    </ul>
  </li>
  <li>Of course, this algorithm only works if the Action and Goto tables have been constructed.
    <ul>
      <li>To construct these tables, use the algorithm discussed in Section 3.5 of the textbook.</li>
    </ul>
  </li>
  <li>Fortunately, there are tools (e.g. CUP) that, given a grammar an a set of associated actions, will generate an LR parser for you, crunching through the details of the LR(1) construction (or a related construction, such as LALR) for you.  After each reduction, the associated action will be taken.</li>
</ul>

<p><b><i>A subset of the following topics will be covered in lecture on Wednesday, February 11.  These topics will be covered on the Midterm in whatever detail we cover them in that lecture.</i></b></p>

<ul>
  <li>Semantic analysis (a.k.a. context-sensitive analysis).  What is it?  Why is it different from syntax analysis (parsing)?</li>
  <li>Abstract syntax trees as an intermediate representation of an input program.</li>
  <li>Symbol tables.  What are they?  What do they store?  How can they be used to implement static scoping?</li>
  <li>Type checking.</li>
</ul>

</div>

</body>
</html>
Mis_redirected¢DtypeEvalueôIhttp_code¢DtypeEvalueÈQdownload_complete¢DtypeEvalueõ