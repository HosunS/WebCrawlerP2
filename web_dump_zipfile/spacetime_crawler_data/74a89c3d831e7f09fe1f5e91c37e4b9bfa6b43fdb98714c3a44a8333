¦Ifinal_url¡DtypeLhttp_headers¢DtypeEvalue‡¢Ak¢DtypeEvalueNContent-LengthAv¢DtypeEvalueD1032¢Ak¢DtypeEvalueMAccept-RangesAv¢DtypeEvalueEbytes¢Ak¢DtypeEvalueFServerAv¢DtypeEvalueX„Apache/2.4.6 (CentOS) OpenSSL/1.0.2k-fips SVN/1.7.14 mod_wsgi/3.4 Python/2.7.5 Phusion_Passenger/4.0.53 mod_perl/2.0.10 Perl/v5.16.3¢Ak¢DtypeEvalueMLast-ModifiedAv¢DtypeEvalueXWed, 17 Apr 2013 01:54:07 GMT¢Ak¢DtypeEvalueDETagAv¢DtypeEvalueS"408-4da84c2e26dc0"¢Ak¢DtypeEvalueDDateAv¢DtypeEvalueXFri, 08 Feb 2019 01:17:10 GMT¢Ak¢DtypeEvalueLContent-TypeAv¢DtypeEvalueXtext/plain; charset=UTF-8Kraw_content¢DtypeEvalueY/*  
 $Id: listmerger.h 4025 2008-10-01 00:01:14Z abehm $ 

 Copyright (C) 2007 by The Regents of the University of California
 	
 Redistribution of this file is permitted under the terms of the 
 BSD license

 Author: Chen Li, Jiaheng Lu, and Yiming Lu, Alexander Behm
 Date: 05/11/2007
*/
 	
#ifndef _listsmerger_h_
#define _listsmerger_h_

#include <vector>

#include "util/array.h"
#include "counttable.h"
#include "utilities.h"

using namespace std;

enum DataSet {URL, DBLP, IMDB, Google};
 
template <class ListsMergerConcrete, class InvList>
class ListsMerger {
 protected:
  bool hasDuplicateLists;

 public:

  ListsMerger(bool hasDuplicateLists = false){ this->hasDuplicateLists = hasDuplicateLists; }
  
  // the lists are assumed to be sorted in an ascending order
  void merge(vector<InvList*> &arrays, 
	     const unsigned threshold, // threshold of count
	     vector<unsigned> &results) {
    static_cast<ListsMergerConcrete*>(this)->merge_Impl(arrays, threshold, results);
  }
  
  ~ListsMerger() {};
}; 

#endif
Mis_redirected¢DtypeEvalueôIhttp_code¢DtypeEvalueÈQdownload_complete¢DtypeEvalueõ