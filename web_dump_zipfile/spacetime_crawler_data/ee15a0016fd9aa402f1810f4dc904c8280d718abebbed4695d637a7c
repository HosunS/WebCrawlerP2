¦Ifinal_url¡DtypeLhttp_headers¢DtypeEvalue‰¢Ak¢DtypeEvalueNContent-LengthAv¢DtypeEvalueD1301¢Ak¢DtypeEvaluePContent-EncodingAv¢DtypeEvalueDgzip¢Ak¢DtypeEvalueMAccept-RangesAv¢DtypeEvalueEbytes¢Ak¢DtypeEvalueDVaryAv¢DtypeEvalueOAccept-Encoding¢Ak¢DtypeEvalueFServerAv¢DtypeEvalueX4Apache/2.4.6 (CentOS) OpenSSL/1.0.2k-fips SVN/1.7.14¢Ak¢DtypeEvalueMLast-ModifiedAv¢DtypeEvalueXTue, 03 Apr 2018 16:14:39 GMT¢Ak¢DtypeEvalueDETagAv¢DtypeEvalueX"ac6-568f400e52b55-gzip"¢Ak¢DtypeEvalueDDateAv¢DtypeEvalueXTue, 05 Feb 2019 08:30:43 GMT¢Ak¢DtypeEvalueLContent-TypeAv¢DtypeEvalueXtext/html; charset=UTF-8Kraw_content¢DtypeEvalueY
Æ<html><head>
<title>Euler's Formula</title>
</head><body>
<h1><a href="http://www.ics.uci.edu/~eppstein/junkyard/"><img src="../junkyard.gif" align=center width="545" height="45" alt="The Geometry Junkyard" border=0></a></h1>
<hr>
<h1>Euler's Formula,
Proof 11: Ear Decomposition
</H1>

A graph is <I>two-edge-connected</I> if removing any edge leaves a connected subgraph.
Two-edge-connectivity is equivalent to the existence of an <I>ear decomposition</I>:
a partition of the edges of the graph into a sequence of <I>ears</I>
(simple paths and cycles), with the first ear being a single vertex; the
start and
end of each successive ear should be vertices occurring in previous
ears, but all
other vertices in an ear should be new.  Such a decomposition can be
found one ear at a time: start each ear by any unused edge <I>e</I> from an
already-explored vertex, and continue by a shortest path back to another
already-explored vertex (such a path must exist because <I>e</I> cannot
disconnect the graph).
<P>
We can use such a decomposition in a proof of the Euler formula for polyhedra:
<BLOCKQUOTE>
The graph G of a polyhedron is two-edge-connected, since if we remove an edge e
we can still connect its endpoints by a path around the other side of one of the
two faces of G containing e.
<P>
Find an ear decomposition of G, and consider the process of forming G by
adding ears one at a time starting
from a single vertex.  Initially there is one vertex, one face, and no edges.
Each new ear forms a path connecting two vertices on the boundary of a face,
splitting the face in two; the path has one more edge than it has vertices.
So if the ear has <I>k</I> edges, its addition increases V by
<I>k</I>-1, E by <I>k</I>, and F by 1,
and the result follows by induction on the number of ears.
</BLOCKQUOTE>
Ear decompositions have been especially useful in the design of parallel algorithms,
since they are easier to find in parallel than are other structural decompositions
of graphs such as depth first search trees.
For an example of this see my work on
<a href="http://www.ics.uci.edu/~eppstein/pubs/p-serpar.html">recognizing
series parallel graphs</a>.
<P><HR><P>
<a href="/~eppstein/junkyard/euler/">Proofs of Euler's Formula</a>.<BR>
From the <a href="/~eppstein/junkyard/">Geometry Junkyard</a>,
computational
and recreational geometry pointers.<BR>
<a href="http://www.ics.uci.edu/~eppstein/">David Eppstein</a>,
<a href="http://www.ics.uci.edu/~theory/">Theory Group</a>,
<a href="http://www.ics.uci.edu/">ICS</a>,
<a href="http://www.uci.edu/">UC Irvine</a>.<P>
<SMALL>Semi-automatically
<a href="http://www.ics.uci.edu/~eppstein/pubs/filter.html">filtered</a>
from a common source file.
Last update: <!--#flastmod file="euler.ff" -->.</SMALL>
Mis_redirected¢DtypeEvalueôIhttp_code¢DtypeEvalueÈQdownload_complete¢DtypeEvalueõ