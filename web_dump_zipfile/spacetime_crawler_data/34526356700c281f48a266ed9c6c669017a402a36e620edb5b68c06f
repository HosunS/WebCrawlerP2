¦Ifinal_url¡DtypeLhttp_headers¢DtypeEvalue‡¢Ak¢DtypeEvalueNContent-LengthAv¢DtypeEvalueD2040¢Ak¢DtypeEvalueMAccept-RangesAv¢DtypeEvalueEbytes¢Ak¢DtypeEvalueFServerAv¢DtypeEvalueX„Apache/2.4.6 (CentOS) OpenSSL/1.0.2k-fips SVN/1.7.14 mod_wsgi/3.4 Python/2.7.5 Phusion_Passenger/4.0.53 mod_perl/2.0.10 Perl/v5.16.3¢Ak¢DtypeEvalueMLast-ModifiedAv¢DtypeEvalueXWed, 17 Apr 2013 01:53:39 GMT¢Ak¢DtypeEvalueDETagAv¢DtypeEvalueS"7f8-4da84c1372ec0"¢Ak¢DtypeEvalueDDateAv¢DtypeEvalueXSun, 10 Feb 2019 11:09:26 GMT¢Ak¢DtypeEvalueLContent-TypeAv¢DtypeEvalueXtext/plain; charset=UTF-8Kraw_content¢DtypeEvalueYø//
// $Id: mapper.h 4143 2008-12-08 23:23:55Z abehm $
//
//        mapper.h
//
//  Copyright (C) 2003 - 2007 by The Regents of the University of
//  California
//
// Redistribution of this file is permitted under the terms of the 
// BSD license
//
// Date: March 2002
//
// Authors: 
//          Chen Li (chenli (at) ics.uci.edu)
//          Liang Jin (liangj (at) ics.uci.edu)
//


#ifndef __MAPPER_H__
#define __MAPPER_H__

#include <string>
#include <vector>

using namespace std;

typedef vector<double> Coordinates;

// compute the edit distance between two strings
int ed(string s1, string s2);
bool SimilarString(string s1, string s2, int threshold);

class Mapper
{
 public:
  Mapper(vector<string> &, int dimensionality);
  Mapper(const string dataFileName);
  ~Mapper();

  void map(); // map strings to a Euclidiean space
  vector<string> getStrings();

  void saveToFile(const string dataFileName); // save data to a file

  // compute the new coordinates for a given string
  Coordinates mappedCoordinates(string s);

  // compute the distance of two strings in the mapped space
  double mappedDistance(const string s1, const string s2);

  double getNewThreshold(const vector<string> &stringVector1,
			 const vector<string> &stringVector2,
			 const int edThreshold);

  double getNewThreshold(const vector<string> &stringVector1, const double percetange1,
			 const vector<string> &stringVector2, const double percentages,
			 const int edThreshold);

 private:
  vector<string> stringVector;
  vector< Coordinates > coordinatesVector;

  int size;
  double threshold;
  int dimensionality;

  // these two vectors store the pairs of pivots
  vector<int> pivotsA;
  vector<int> pivotsB;

  //double getCoordindate(int stringID, int dimensionID);
  //void   setCoordindate(int stringID, int dimensionID, double coord);

  void   nextsm(int);

  // find a point farthest to the point id using distances up to "dimLimit"
  int  findFarthestPoint(int id, int dimLimit);
  void choosePivot(int dim);

};

#endif // __MAPPER_H__
Mis_redirected¢DtypeEvalueôIhttp_code¢DtypeEvalueÈQdownload_complete¢DtypeEvalueõ