¦Ifinal_url¡DtypeLhttp_headers¢DtypeEvalue‡¢Ak¢DtypeEvalueNContent-LengthAv¢DtypeEvalueD1324¢Ak¢DtypeEvalueMAccept-RangesAv¢DtypeEvalueEbytes¢Ak¢DtypeEvalueFServerAv¢DtypeEvalueX„Apache/2.4.6 (CentOS) OpenSSL/1.0.2k-fips SVN/1.7.14 mod_wsgi/3.4 Python/2.7.5 Phusion_Passenger/4.0.53 mod_perl/2.0.10 Perl/v5.16.3¢Ak¢DtypeEvalueMLast-ModifiedAv¢DtypeEvalueXWed, 17 Apr 2013 01:53:42 GMT¢Ak¢DtypeEvalueDETagAv¢DtypeEvalueS"52c-4da84c164f580"¢Ak¢DtypeEvalueDDateAv¢DtypeEvalueXThu, 07 Feb 2019 10:47:34 GMT¢Ak¢DtypeEvalueLContent-TypeAv¢DtypeEvalueXtext/plain; charset=UTF-8Kraw_content¢DtypeEvalueY,/*
  $Id: topkscan.h 4786 2009-11-21 20:14:53Z rares $

  Copyright (C) 2007 by The Regents of the University of California
 
  Redistribution of this file is permitted under the terms of the BSD
  license

  Date: 11/28/2008
  Author: Rares Vernica <rares (at) ics.uci.edu>
*/

#ifndef _topkscan_h_
#define _topkscan_h_

#include <algorithm>
#include <cmath>

#include "common/tr1_local.h"
#include "topkindex.h"

namespace Topk
{
  namespace Scan
  {
    template<
      class RandomAccessIterator1, 
      class RandomAccessIterator2>  
    void getTopkCand(
      const RandomAccessIterator1 data, 
      const RandomAccessIterator2 weights, 
      uint nData, 
      const Query &que, 
      Cand *topkBuf)
    {
      std::fill(topkBuf, topkBuf + que.k, Cand());
      
      float whtMin = std::numeric_limits<float>::min();
      for (uint id = 0; id < nData; ++id)
        if (weights[id] >= whtMin) {
          float sc = score(que.sim(que.str, data[id]), weights[id]);
          if (sc > topkBuf[0].score) {
            std::pop_heap(topkBuf, topkBuf + que.k);
            topkBuf[que.k - 1] = Cand(id, sc);
            std::push_heap(topkBuf, topkBuf + que.k);
            whtMin = scoreInverseWht(topkBuf[0].score, 1);
          }
        }

      std::sort_heap(topkBuf, topkBuf + que.k);
    }
  }
}

#endif

Mis_redirected¢DtypeEvalueôIhttp_code¢DtypeEvalueÈQdownload_complete¢DtypeEvalueõ