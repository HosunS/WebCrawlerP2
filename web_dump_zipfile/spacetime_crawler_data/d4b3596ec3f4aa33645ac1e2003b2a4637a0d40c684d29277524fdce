¦Ifinal_url¡DtypeLhttp_headers¢DtypeEvalue†¢Ak¢DtypeEvalueNContent-LengthAv¢DtypeEvalueD2488¢Ak¢DtypeEvalueMAccept-RangesAv¢DtypeEvalueEbytes¢Ak¢DtypeEvalueFServerAv¢DtypeEvalueX4Apache/2.4.6 (CentOS) OpenSSL/1.0.2k-fips SVN/1.7.14¢Ak¢DtypeEvalueMLast-ModifiedAv¢DtypeEvalueXMon, 26 Nov 2018 23:13:02 GMT¢Ak¢DtypeEvalueDETagAv¢DtypeEvalueS"9b8-57b99797d1a5e"¢Ak¢DtypeEvalueDDateAv¢DtypeEvalueXFri, 01 Feb 2019 01:02:16 GMTKraw_content¢DtypeEvalueY	¸
library(tidyverse)
datainput <- read_csv("H://HAL/Courses/Stat210//realestate.csv")
homes <- data.frame(datainput)
#
# return to the real estate data set to illutrate approaches to non-constant variance with 
# weighted least squares
#

# id_num = id number of house
# price = list/sale price (in 000s)
# sqft = area of house in sq ft
# bedrms = number of bedrooms
# baths = number of bathrooms (1/2 bath = 0.1)
# ac = 1 if house has air conditioning
# garage = capacity of garage
# pool = 1 if swimming pool
# year = year of construction
# quality = measure of quality on 3 point scale (1 is best)
# house style = qualitative indicator of architectural style
# lotsize = lot size in sq ft
# highway = 1 if near highway

t(apply(homes,2,describe))
round(cor(homes[,2:12]),2)

# fit regression
homes_reg <- lm(price ~ sqft + lotsize + baths + bedrms + ac + garage + pool + quality + highway + year, data=homes)
summary(homes_reg)
# obtain and save standardized residuals and other diagnostics
homes_reg$stdres <- rstandard(homes_reg)
homes_reg$dffits <- dffits(homes_reg)
homes_reg$cooksd <- cooks.distance(homes_reg)
homes_reg$hat <- hatvalues(homes_reg)
homes_reg$studentr <- rstudent(homes_reg)

# check assumptions - residuals vs x, residuals vs fitted values
ggplot() +
  geom_point(data=homes, mapping=aes(x=homes_reg$fitted.values, y=homes_reg$stdres)) 

# check assumptions - normality
qqnorm(homes_reg$stdres)

#
# non-constant variance ... let's try and fix via WLS
# 
# guess that variance is related to size of house
# fit a regression of absolute residuals on size and use the reciprocal of the squared fitted value as weight
#
plot(homes$sqft,abs(homes_reg$stdres),type="p")
sdreg <- lm(abs(homes_reg$stdres) ~ homes$sqft)
w <- 1 / sdreg$fitted.values^2

homes_regw <- lm(price ~ sqft + lotsize + baths + bedrms + ac + garage + pool + quality + highway + year, data=homes, weights=w)
summary(homes_regw)
# obtain and save standardized residuals and other diagnostics
homes_regw$stdres <- rstandard(homes_regw)
homes_regw$dffits <- dffits(homes_regw)
homes_regw$cooksd <- cooks.distance(homes_regw)
homes_regw$hat <- hatvalues(homes_regw)
homes_regw$studentr <- rstudent(homes_regw)

# check assumptions - residuals vs x, residuals vs fitted values
ggplot() +
  geom_point(data=homes, mapping=aes(x=homes_regw$fitted.values, y=homes_regw$stdres)) 

# check assumptions - normality
qqnorm(homes_regw$stdres)
Mis_redirected¢DtypeEvalueôIhttp_code¢DtypeEvalueÈQdownload_complete¢DtypeEvalueõ