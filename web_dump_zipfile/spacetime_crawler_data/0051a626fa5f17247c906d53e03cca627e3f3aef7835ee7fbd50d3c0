¦Ifinal_url¡DtypeLhttp_headers¢DtypeEvalue‡¢Ak¢DtypeEvalueNContent-LengthAv¢DtypeEvalueD7781¢Ak¢DtypeEvalueMAccept-RangesAv¢DtypeEvalueEbytes¢Ak¢DtypeEvalueFServerAv¢DtypeEvalueXjApache/2.4.6 (CentOS) OpenSSL/1.0.2k-fips SVN/1.7.14 Phusion_Passenger/4.0.53 mod_perl/2.0.10 Perl/v5.16.3¢Ak¢DtypeEvalueMLast-ModifiedAv¢DtypeEvalueXWed, 17 Apr 2013 01:53:19 GMT¢Ak¢DtypeEvalueDETagAv¢DtypeEvalueT"1e65-4da84c00601c0"¢Ak¢DtypeEvalueDDateAv¢DtypeEvalueXThu, 31 Jan 2019 00:39:32 GMT¢Ak¢DtypeEvalueLContent-TypeAv¢DtypeEvalueXtext/html; charset=UTF-8Kraw_content¢DtypeEvalueYe<html xmlns="http://www.w3.org/1999/xhtml" xmlns:html="http://www.w3.org/1999/xhtml">
<head>
<title>FilterTreeDoc - Chen Li -- Group - Trac</title>
<style type="text/css">
           @import url(media/trac.css);
          </style>
</head>
<body>
<p>
<a href="index.html">Back to Index</a>
</p>
<hr/>
<div class="wikipage">
<div id="searchable">
<p>AppString
&gt; AppStringDoc</p>
<div class="wiki-toc">
<ol>
<li>
<a href="#Filtertree" shape="rect">Filtertree</a>
<ol>
<li>
<a href="#Introduction" shape="rect">Introduction</a>
</li>
<li>
<a href="#ApproximateStringSearch" shape="rect">Approximate String
Search</a>
</li>
<li>
<a href="#Overview" shape="rect">Overview</a>
</li>
<li>
<a href="#AnsweringApproximateStringQueries" shape="rect">Answering
Approximate String Queries</a>
</li>
<li>
<a href="#TheFiltertreeStructure" shape="rect">The Filtertree
Structure</a>
</li>
<li>
<a href="#High-LevelOverviewofImportantComponents" shape="rect">High-Level
Overview of Important Components</a>
</li>
<li>
<a href="#StatsGenOutput" shape="rect">StatsGen Output</a>
</li>
<li>
<a href="#Contributors" shape="rect">Contributors</a>
</li>
</ol>
</li>
</ol>
</div>
<h1 id="Filtertree">Filtertree</h1>
<h2 id="Introduction">Introduction</h2>
<p>This module supports efficient approximate string search on a
collection of strings. An approximate query asks for all strings in
the collection that are "similar" to the query string for a given
similarity function and similarity threshold.</p>
<h2 id="ApproximateStringSearch">Approximate String Search</h2>
<p>Many applications need to answer approximate string queries. The
following are a few examples:</p>
<ul>
<li>The "Did you mean" feature by many search engines partially
relies on finding words similar to a given keyword.</li>
<li>Spellchecking: suggest good words for a possibly mistyped
word.</li>
<li>Record linkage: identify records that could represent the same
real-world entity.</li>
</ul>
<h2 id="Overview">Overview</h2>
<ol>
<li>Our implementation stores everything in main memory. That
includes:
<ul>
<li>The string collection</li>
<li>The filtertree</li>
<li>The inverted lists</li>
</ul>
</li>
</ol>
<ol start="2">
<li>We support the following similarity functions / distance
measures:
<ul>
<li>Levenshtein Distance (aka the Edit Distance) <a class="ext-link" href="http://en.wikipedia.org/wiki/Levenshtein_distance" shape="rect">
<span class="icon">http://en.wikipedia.org/wiki/Levenshtein_distance</span>
</a>
</li>
<li>Jaccard Similarity <a class="ext-link" href="http://en.wikipedia.org/wiki/Jaccard_Similarity_Coefficient" shape="rect">
<span class="icon">
http://en.wikipedia.org/wiki/Jaccard_Similarity_Coefficient</span>
</a>
</li>
<li>Cosine Similarity <a class="ext-link" href="http://en.wikipedia.org/wiki/Cosine_similarity" shape="rect">
<span class="icon">http://en.wikipedia.org/wiki/Cosine_similarity</span>
</a>
</li>
<li>Dice Similarity <a class="ext-link" href="http://en.wikipedia.org/wiki/Dice%27s_coefficient" shape="rect">
<span class="icon">http://en.wikipedia.org/wiki/Dice%27s_coefficient</span>
</a>
</li>
</ul>
</li>
</ol>
<ol start="3">
<li>We support the following single-signature filters:
<ul>
<li>Length Filter</li>
<li>Checksum Filter</li>
</ul>
</li>
</ol>
<ol start="4">
<li>The index structure (filtertree + inverted lists) can be
saved/loaded to/from a file.</li>
</ol>
<h2 id="AnsweringApproximateStringQueries">Answering Approximate
String Queries</h2>
<p>To answer queries efficiently this module uses an inverted-list
index on the q-grams of the strings in the collection. That is,
each string is decomposed into substrings (grams) of size q using a
sliding window, and then for each gram we build a list of string
ids containing that gram (the inverted list of that gram). The
process of answering queries is based on the observation that if
two strings are similar, then they must share a certain number of
common grams (depending on the similarity function and similarity
threshold). False-positives must be removed in a post-processing
step, i.e. the true similarities are computed.</p>
<p>In addition to the above we can further increase the performance
of queries by using filters. A single-signature filter partitions
the string collection into disjoint subsets based on some criteria.
For answering a query we only need to consider some of the subsets.
For example, if we were looking for all strings in the collection
within an edit-distance of 1 to the string "abcde", then we know
that any answer string must have a length in [4,6]. So, if we
partition the string collection using the length of the strings we
can avoid processing irrelevant string ids during query answering.
The checksum filter is very similar to the length filter. We
partition the data strings based on their checksums. For query
answering we can determine a range of checksums that answers must
lie in.</p>
<h2 id="TheFiltertreeStructure">The Filtertree Structure</h2>
<p>The filtertree structure facilitates the use of multiple
single-signature filters. Each level in the tree partitions the
string collection based on one filter. Each leaf node contains an
inverted-list structure on the subset of strings belonging to that
leaf. For answering a query we traverse the tree to identify leaf
nodes that could contain answers to the query, and process them
independently. The following is an example of a filtertree with a
fanout of 3 and both the length and checksum filter applied:</p>
<p>
<img width="70%" alt="FilterTree Structure with two filters" src="media/FiltertreeStructure.png" title="FilterTree Structure with two filters"/>
</p>
<h2 id="High-LevelOverviewofImportantComponents">High-Level
Overview of Important Components</h2>
<ul>
<li>Includes components from core and from filtertree</li>
</ul>
<p>
<img src="media/FilterTree_CodeOverview.png" alt="Code overview of filtertree" title="Code overview of filtertree"/>
</p>
<h2 id="StatsGenOutput">StatsGen Output</h2>
<p>The StatsGenerator allows collecting of performance data on the
approximate string search library. For example, different filters,
merging algorithms, datasets, query workloads can be tested. A good
start is perftest.cc included in the filtertree folder. The
performance numbers are written to an output file (e.g. perftest.cc
writes to "perftest_search_stats.txt"). The StatsGenerator is
intended for advanced users who are familiar with the algorithmic
details of approximate string search. The numbers generated depict
different steps in the process of query answering and will only be
understood by people familiar with the subject. For getting an idea
of the query performance using certain parameters it is sufficient
to focus on field8 which measures the average query performance of
the given workload.</p>
<p>The output generated is semicolon-separated and has the
following format:</p>
<ul>
<li>field1: size of dataset</li>
<li>field2: filtertree fanout</li>
<li>field3: avg time for calculating merging-threshold (ms)</li>
<li>field4: avg time for pre-processing, traversing the filtertree,
etc. (ms)</li>
<li>field5: avg time for merging (ms)</li>
<li>field6: avg time for post-processing (ms)</li>
<li>field7: avg time for scans (ms)</li>
<li>field8: avg total time (ms)</li>
<li>field9: avg number of candidate strings to post-process</li>
<li>field10: total number of scans</li>
<li>field11: index build time (ms)</li>
</ul>
<h2 id="Contributors">Contributors</h2>
<ul>
<li>Alexander Behm (design, main author)</li>
<li>Chen Li (design, project leader)</li>
<li>Rares Vernica (design)</li>
<li>Shengyue Ji (design, implementation)</li>
<li>Yiming Lu (design, implementation)</li>
</ul>
</div>
</div>
<div class="footer">
<hr/>
<p>
<a href="index.html">Back to Index</a>
</p>
</div>
</body>
</html>
Mis_redirected¢DtypeEvalueôIhttp_code¢DtypeEvalueÈQdownload_complete¢DtypeEvalueõ