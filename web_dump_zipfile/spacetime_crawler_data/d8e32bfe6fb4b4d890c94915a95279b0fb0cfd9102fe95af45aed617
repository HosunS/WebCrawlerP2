¦Ifinal_url¡DtypeLhttp_headers¢DtypeEvalue‡¢Ak¢DtypeEvalueNContent-LengthAv¢DtypeEvalueD2146¢Ak¢DtypeEvalueMAccept-RangesAv¢DtypeEvalueEbytes¢Ak¢DtypeEvalueFServerAv¢DtypeEvalueXjApache/2.4.6 (CentOS) OpenSSL/1.0.2k-fips SVN/1.7.14 Phusion_Passenger/4.0.53 mod_perl/2.0.10 Perl/v5.16.3¢Ak¢DtypeEvalueMLast-ModifiedAv¢DtypeEvalueXWed, 17 Apr 2013 01:54:14 GMT¢Ak¢DtypeEvalueDETagAv¢DtypeEvalueS"862-4da84c34d3d80"¢Ak¢DtypeEvalueDDateAv¢DtypeEvalueXFri, 08 Feb 2019 16:46:38 GMT¢Ak¢DtypeEvalueLContent-TypeAv¢DtypeEvalueXtext/plain; charset=UTF-8Kraw_content¢DtypeEvalueYb/*
  $Id: filtertypes.h 4025 2008-10-01 00:01:14Z abehm $

  Copyright (C) 2008 by The Regents of the University of California
	
  Redistribution of this file is permitted under
  the terms of the BSD license  
    
  Date: 04/04/2008
  Author: Alexander Behm <abehm (at) ics.uci.edu>
*/

#ifndef _filtertypes_h_
#define _filtertypes_h_

#include <iostream>
#include <fstream>

#include "common/simmetric.h"

using namespace std;

// any single signature filter must inherit from this
class AbstractFilter {
 protected:
  FilterType ft;
  
 public:
  AbstractFilter() {}
  virtual unsigned getFilterLbound() const = 0;
  virtual unsigned getFilterUbound() const = 0;
  virtual unsigned getKey(const string& s) const = 0;  
  virtual AbstractFilter* clone() const = 0;
  FilterType getType() const { return ft; }

  // create appropriate sub-class from ifstream and FilterType
  static AbstractFilter* loadFilterInstance(ifstream& fpIn);
  virtual void saveFilterInstance(ofstream& fpOut) const = 0;

  virtual ~AbstractFilter() {};
};

class LengthFilter : public AbstractFilter {
 private:
  unsigned maxStrLength;

 public:
  LengthFilter(unsigned maxStringLength) { 
    ft = FT_LENGTH; 
    maxStrLength = maxStringLength;
  }

  LengthFilter(ifstream& fpIn);

  unsigned getFilterLbound() const;
  unsigned getFilterUbound() const;
  unsigned getKey(const string& s) const;
  AbstractFilter* clone() const;

  // methods for saving and loading to/from a file
  void saveFilterInstance(ofstream& fpOut) const;
};

unsigned checksum(const string& s);

class ChecksumFilter : public AbstractFilter {
 private:
  unsigned maxChecksum;
  unsigned maxStrLength;
  
 public:
  ChecksumFilter(unsigned maxStringLength) { 
    ft = FT_CHECKSUM; 
    maxStrLength = maxStringLength;
    maxChecksum = maxStringLength * CHECKSUM_ASCII_MAX;
  }

  ChecksumFilter(ifstream& fpIn);

  unsigned getFilterLbound() const;
  unsigned getFilterUbound() const;
  unsigned getKey(const string& s) const;  
  AbstractFilter* clone() const;

  // static methods for saving and loading to/from a file
  void saveFilterInstance(ofstream& fpOut) const;
};

#endif



Mis_redirected¢DtypeEvalueôIhttp_code¢DtypeEvalueÈQdownload_complete¢DtypeEvalueõ