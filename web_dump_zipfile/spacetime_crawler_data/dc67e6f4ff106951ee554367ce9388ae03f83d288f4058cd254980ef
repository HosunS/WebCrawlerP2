¦Ifinal_url¡DtypeLhttp_headers¢DtypeEvalue‡¢Ak¢DtypeEvalueNContent-LengthAv¢DtypeEvalueD1267¢Ak¢DtypeEvalueMAccept-RangesAv¢DtypeEvalueEbytes¢Ak¢DtypeEvalueFServerAv¢DtypeEvalueXjApache/2.4.6 (CentOS) OpenSSL/1.0.2k-fips SVN/1.7.14 Phusion_Passenger/4.0.53 mod_perl/2.0.10 Perl/v5.16.3¢Ak¢DtypeEvalueMLast-ModifiedAv¢DtypeEvalueXWed, 17 Apr 2013 01:53:07 GMT¢Ak¢DtypeEvalueDETagAv¢DtypeEvalueS"4f3-4da84bf4ee6c0"¢Ak¢DtypeEvalueDDateAv¢DtypeEvalueXFri, 01 Feb 2019 18:27:19 GMT¢Ak¢DtypeEvalueLContent-TypeAv¢DtypeEvalueXtext/plain; charset=UTF-8Kraw_content¢DtypeEvalueYó/*
  $Id: input.h 4026 2008-10-01 00:23:25Z abehm $

  Copyright (C) 2007 by The Regents of the University of California

  Redistribution of this file is permitted under the terms of the
  BSD license

  Date: 02/16/2007
  Author: Rares Vernica <rares (at) ics.uci.edu>
*/

#ifndef _input_h_
#define _input_h_

#include <fstream>
#include <iostream>
#include <string>
#include <vector>

using namespace std;

void readString(vector<string> &data, const string &filenameData, unsigned count = 0,
                unsigned maxLineLen = 255);
// ignores lines with length over maxLineLen, those lines will not affect the count

template <typename T> 
void readBin(vector<T> &data, 
             const string &filenameData)
{
  ifstream fileData(filenameData.c_str(), ios::in | ios::binary);
  if (!fileData) {
    cerr << "can't open input file \"" << filenameData << "\"" << endl;
    exit(EXIT_FAILURE);
  }

  cerr << "reading \"" << filenameData << "\"...";
  cerr.flush();

  T e;
  while (true) {
    fileData.read(reinterpret_cast<char*>(&e), sizeof(T));
    if (fileData.eof())
      break;
    data.push_back(e);
  }
    
  fileData.close();

  cerr << "OK" << endl;
}

bool existFile(const string &filename);
bool existFileBin(const string &filename);

#endif
Mis_redirected¢DtypeEvalueôIhttp_code¢DtypeEvalueÈQdownload_complete¢DtypeEvalueõ