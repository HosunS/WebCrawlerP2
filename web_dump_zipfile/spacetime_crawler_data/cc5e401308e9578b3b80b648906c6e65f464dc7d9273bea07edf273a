¦Ifinal_url¡DtypeLhttp_headers¢DtypeEvalue†¢Ak¢DtypeEvalueNContent-LengthAv¢DtypeEvalueD2150¢Ak¢DtypeEvalueMAccept-RangesAv¢DtypeEvalueEbytes¢Ak¢DtypeEvalueFServerAv¢DtypeEvalueX4Apache/2.4.6 (CentOS) OpenSSL/1.0.2k-fips SVN/1.7.14¢Ak¢DtypeEvalueMLast-ModifiedAv¢DtypeEvalueXWed, 31 Oct 2018 21:48:01 GMT¢Ak¢DtypeEvalueDETagAv¢DtypeEvalueS"866-5798d419ea35e"¢Ak¢DtypeEvalueDDateAv¢DtypeEvalueXMon, 04 Feb 2019 07:06:30 GMTKraw_content¢DtypeEvalueYf
library(tidyverse)
datainput <- read_csv("H://HAL/Courses/Stat210//homesoreg.csv")
homesall <- data.frame(datainput)

# deleting an incomplete observation that we use later
# price = list/sale price (in 000s)
# sqft = house size in sq ft
# lotsize = lot size category (1-11), presumed to be approx linear effect
# bath = number of bathrooms (1/2 bath = 0.1)
# bedrms = number of bedrooms
# bath.bed = product of bathroom / bedrooms (possible interaction?)
# year = year of construction
# age = (year - 1970)/10   
# age2 = age^2 
# garage = capacity of garage in cars
# status = category (sold, active, pending)
# active? = 1 if active; 0 if sold/pending
# elem = category (local elementary)
# edison,harris,adams,crest,parker = indicators for those schools (westwood = reference)
# 
homes <- homesall[1:76,]

# plot data
par(mfrow=c(3,3))
plot(homes$sqft, homes$price, type="p")
plot(homes$lotsize, homes$price, type="p")
plot(homes$bath, homes$price, type="p")
plot(homes$bedrms, homes$price, type="p")
plot(homes$year, homes$price, type="p")
plot(homes$age, homes$price, type="p")
plot(homes$garage, homes$price, type="p")
plot(homes$active., homes$price, type="p")
par(mfrow=c(1,1))
#ggplot() +
#  geom_point(data=homes, mapping=aes(x=sqft, y=)) + 
#  xlab("ACT") +
#  ylab("GPA") 
quantcols <- c(2,3,4,5,6,8,9,11,13)
round(cor(homes[,quantcols]),2)

# fit regression
homes_reg <- lm(price ~ sqft + lotsize + bath + bedrms + age + age2 + garage + active., data=homes)
anova(homes_reg)
simpleanova(homes_reg)
summary(homes_reg)
# obtain and save standardized residuals
homes_reg$stdres <- rstandard(homes_reg)

# check assumptions - residuals vs x, residuals vs fitted values
ggplot() +
  geom_point(data=homes, mapping=aes(x=homes_reg$fitted.values, y=homes_reg$stdres)) 

# check assumptions - normality
qqnorm(homes_reg$stdres)

# regression predictions at new values
preddata <- data.frame(sqft=1.879,lotsize=4,bath=2.1,bedrms=3,age=0.5,age2=0.25,garage=2,active.=1)
predict(homes_reg,newdata=preddata,interval="confidence")
predict(homes_reg,newdata=preddata,interval="prediction") Mis_redirected¢DtypeEvalueôIhttp_code¢DtypeEvalueÈQdownload_complete¢DtypeEvalueõ