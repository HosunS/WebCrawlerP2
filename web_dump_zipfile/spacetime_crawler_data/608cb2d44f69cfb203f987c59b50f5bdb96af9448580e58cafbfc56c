¦Ifinal_url¢DtypeEvaluex1https://www.ics.uci.edu/~eppstein/pubs/j-sjc.htmlLhttp_headers¢DtypeEvalue‰¢Ak¢DtypeEvalueNContent-LengthAv¢DtypeEvalueD3772¢Ak¢DtypeEvaluePContent-EncodingAv¢DtypeEvalueDgzip¢Ak¢DtypeEvalueMAccept-RangesAv¢DtypeEvalueEbytes¢Ak¢DtypeEvalueDVaryAv¢DtypeEvalueOAccept-Encoding¢Ak¢DtypeEvalueFServerAv¢DtypeEvalueX4Apache/2.4.6 (CentOS) OpenSSL/1.0.2k-fips SVN/1.7.14¢Ak¢DtypeEvalueMLast-ModifiedAv¢DtypeEvalueXFri, 18 Jan 2019 21:54:45 GMT¢Ak¢DtypeEvalueDETagAv¢DtypeEvalueX"250c-57fc28f296a85-gzip"¢Ak¢DtypeEvalueDDateAv¢DtypeEvalueXFri, 01 Feb 2019 03:28:34 GMT¢Ak¢DtypeEvalueLContent-TypeAv¢DtypeEvalueXtext/html; charset=UTF-8Kraw_content¢DtypeEvalueY%<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 3.2//EN">
<html><head>
<title>David Eppstein - Publications</title>
<meta name="viewport" content="width=device-width, initial-scale=1">
</head>
<body bgcolor="#ffffff" text="#000000">
<h1>David Eppstein - Publications</h1>
<hr><p>
<h2>
SIAM Journal on Computing
</h2>
I was on the editorial board from 1995 to 2004.
<p>
<ul>
<li><b>Reset sequences for monotonic automata</b>.<br>
D. Eppstein.<br>
<i>15th Int. Coll. Automata, Languages and Programming,</i>
Tampere, Finland, 1988.<br>
Springer, <i>Lecture Notes in Comp. Sci.</i> 317, 1988, pp. 230&ndash;238.<br>
<a href="Epp-SJC-90.pdf"><i>SIAM J. Computing</i> 19 (3): 500&ndash;510, 1990</a>.
<p>
Automata theory.
A reset sequence for a DFA is an input such that, no matter which
state the DFA starts in, it ends up after the input in a known state.
These have been used by Natarajan and Goldberg for certain robot motion
planning problems (in fact the conference version of this paper used
the title "Reset sequences for finite automata
with application to design of parts orienters"), and also in coding
theory where they arise in the design of
self-synchronizing codes.  This paper considers DFAs in which the
transition functions respect a given cyclic ordering of the states, and
shows that their shortest reset sequences can be found quickly.
It also considers parallel algorithms for the problem.
There remains open a gap between <i>n<sup>2</sup></i> and <i>n<sup>3</sup></i>
in the maximum length of reset sequences for general automata.
<p>(<a href="/~eppstein/bibs/eppstein.html#Reset sequences for monotonic automata">BibTeX</a> &ndash;
<a href="//fano.ics.uci.edu/cites/Document/Reset-sequences-for-monotonic-automata.html">Citations</a> &ndash;
<a href="//citeseer.ist.psu.edu/eppstein90reset.html">CiteSeer</a> &ndash;
<a href="//portal.acm.org/citation.cfm?id=681434">ACM DL (ICALP)</a> &ndash;
<a href="//portal.acm.org/citation.cfm?id=80025">ACM DL (SJC)</a>)
<p>
<li><b>Separator based sparsification II: edge and vertex connectivity</b>.<br>
D. Eppstein,
<a href="//www.scs.gatech.edu/people/zvi-galil">Z. Galil</a>, 
<a href="//www.info.uniroma2.it/~italiano/">
G.F. Italiano</a>, and T. Spencer.<br>
Tech. Rep. CS96-13, Univ. Ca' Foscari di Venezia, Oct. 1996.<br>
<a href="//doi.org/10.1137/S0097539794269072"><i>SIAM
J. Computing</i> 28 (1): 341&ndash;381, 1999</a>.
<p>
Second half of journal version of
<a href="p-egis.html">Separator based sparsification for dynamic planar graph algorithms</a>.
<p>
(<a href="//fano.ics.uci.edu/cites/Document/Separator-based-sparsification-II-edge-and-vertex-connectivity.html">Citations</a> &ndash;
<a href="//portal.acm.org/citation.cfm?id=298566">ACM DL</a>)
<p>
<li><b>Finding the <i>k</i> shortest paths</b>.<br>
D. Eppstein.<br>
<i>35th IEEE Symp. Foundations of Comp. Sci.,</i> Santa Fe, 1994, pp. 154&ndash;165.<br>
<a href="Epp-TR-94-26.pdf">Tech. Rep. 94-26</a>, ICS, UCI, 1994.<br>
<a href="//doi.org/10.1137/S0097539795290477">
<i>SIAM J. Computing</i> 28 (2): 652&ndash;673, 1998</a>.
<p>
This paper presents an algorithm that finds multiple short paths connecting
two terminals in a graph
(allowing repeated vertices and edges in the paths)
in constant time per path after a preprocessing stage
dominated by a single-source shortest path computation.
The paths it finds are the <i>k</i> shortest in the graph, where <i>k</i> is a
parameter given as input to the algorithm.
<p>
The <i>k</i> shortest paths problem has many important applications for finding
alternative solutions to geographic path planning problems, network
routing, hypothesis generation in computational linguistics, and
sequence alignment and metabolic pathway finding in
bioinformatics. Although there have been many papers on the
<i>k</i> shortest paths problem before and after this one, it has become
frequently cited in those application areas.
Additionally, it marks a boundary in the theoretical study of the problem:
prior theoretical work largely concerned how quickly the problem could
be solved, a line of research that was closed off by the optimal time
bounds of this paper. Subsequent work has focused instead
on devising efficient algorithms for more complex alternative
formulations of the problem that avoid the repeated
vertices and other shortcomings of the alternative paths produced by
this formulation.
<p>(<a href="/~eppstein/bibs/eppstein.html#Finding the $k$ shortest paths">BibTeX</a> &ndash;
<a href="Epp-SJC-98.pdf">Full paper</a> &ndash;
<a href="//fano.ics.uci.edu/cites/Document/Finding-the-k-shortest-paths.html">Citations</a> &ndash;
<a href="graehl.zip">Graehl implementation</a> &ndash;
<a href="//terra.act.uji.es/REA/">Jim&eacute;nez-Marzal implementations</a> &ndash;
<a href="Shibuya.tar.gz">Shibuya implementation</a> &ndash;
<a href="//www.mat.uc.pt/~eqvm/cientificos/research.html">Martins implementation</a> &ndash;
<a href="//christophercliff.com/eppstein/">Cliff OpenStreetMap demo</a> &ndash;
CiteSeer:
<a href="//citeseer.ist.psu.edu/eppstein94finding.html">TR '94</a>,
<a href="//citeseer.ist.psu.edu/eppstein98finding.html">SJC '98</a> &ndash;
<a href="//portal.acm.org/citation.cfm?id=299886">ACM DL</a>)
<p>
<li><b>Setting parameters by example</b>.<br>
D. Eppstein.<br>
<a href="//arXiv.org/abs/cs.DS/9907001">arXiv:cs.DS/9907001</a>.<br>
<a href="//www.computer.org/proceedings/focs/0409/04090309abs.htm"><i>40th
IEEE Symp. Foundations of Comp. Sci.</i>, 1999, pp. 309&ndash;318</a>.<br>
<a href="//doi.org/10.1137/S0097539700370084">
<i>SIAM J. Computing</i> 32 (3): 643&ndash;653, 2003</a>.
<p>
We introduce a class of "inverse parametric optimization"
problems, in which one is given both a parametric optimization problem
and a desired optimal solution; the task is to determine parameter
values that lead to the given solution.  We use
<a href="geom-lp.html">low-dimensional linear programming</a>
and geometric sampling techniques to solve
such problems for
<a href="mst.html">minimum spanning trees</a>,
<a href="graph-path.html">shortest paths</a>, and
other optimal subgraph problems, and discuss applications in
multicast routing, vehicle path planning, resource allocation, and board
game programming.
<p>(<a href="/~eppstein/bibs/eppstein.html#Setting parameters by
example">BibTeX</a> &ndash;
<a href="//fano.ics.uci.edu/cites/Document/Setting-parameters-by-example.html">Citations</a> &ndash;
<a href="//portal.acm.org/citation.cfm?id=796502">ACM DL (FOCS)</a> &ndash;
<a href="//portal.acm.org/citation.cfm?id=639091">ACM DL (SJC)</a>)
<p>
<li><b>Improved combinatorial group testing for
real-world problem sizes.</b><br>
D. Eppstein,
<a href="//www.ics.uci.edu/~goodrich/">M. T. Goodrich</a>,
and <a href="//www.ics.uci.edu/~dan/">D. S. Hirschberg</a>.<br>
<i>9th Worksh. Algorithms and Data Structures,</i> Waterloo, 2005.<br>
Springer, <i>Lecture Notes in Comp. Sci.</i> 3608, 2005, pp. 86&ndash;98.<br>
<a href="//arxiv.org/abs/cs.DS/0505048">arXiv:cs.DS/0505048</a>.<br>
<i>SIAM J. Computing</i> 36 (5): 1360&ndash;1375, 2007.
<p>
We study practically efficient methods for finding few
flawed items among large sets of items, by testing whether there
exist flaws in each of a small number of batches of items.
<p>
(<a href="//www.ics.uci.edu/~eppstein/bibs/eppstein.html#Improved combinatorial group testing for real-world problem sizes">BibTeX</a> &ndash;
<a href="EppGooHir-WADS-05.pdf">Mike's WADS talk slides</a>)
<p>
<li><b>Linear-time algorithms for geometric graphs with sublinearly many
crossings</b>.<br>
D. Eppstein,
<a href="//www.ics.uci.edu/~goodrich/">M. T. Goodrich</a>, and
<a href="//www.ics.uci.edu/~dstrash/">D. Strash</a>.<br>
<a href="//arxiv.org/abs/0812.0893">arXiv:0812.0893</a>.<br>
<a href="//www.siam.org/proceedings/soda/2009/SODA09_018_eppsteind.pdf"><i>20th ACM-SIAM Symp. Discrete Algorithms,</i>
New York, 2009, pp. 150&ndash;159</a>.<br>
<a href="//doi.org/10.1137/090759112"><i>SIAM J. Computing</i> 39 (8): 3814&ndash;3829, 2010</a>.
<p>
If a connected graph corresponds to a set of points and line segments in
the plane, in such a way that the number of crossing pairs of line
segments is sublinear in the size of the graph by an iterated-log
factor, then we can find the arrangement of the segments in linear
time. It was previously known how to find the arrangement in linear time
when the number of crossings is superlinear by an iterated-log factor,
so the only remaining open case is when the number of crossings is close to the
size of the graph.
<p>
<li><b>Area-universal and constrained rectangular layouts</b>.<br>
D. Eppstein,
E. Mumford,
<a href="//www.win.tue.nl/~speckman/">B. Speckmann</a>, and
<a href="//www.tue.nl/staff/k.a.b.verbeek">K. Verbeek</a>.<br>
<a href="//doi.org/10.1137/110834032"><i>SIAM J. Computing</i> 41 (3): 537&ndash;564, 2012</a>.
<p>
A combined journal version of
"<a href="p-area-universal.html">Area-universal rectangular layouts</a>"
and
"<a href="p-orientation-constrained">Orientation-constrained
rectangular layouts</a>".
<p>
(<a href="EppMumSpe-SJC-12.pdf">Local copy of article</a>)
<p>
</ul>

<hr><p>
<a href="jour.html">Journals</a> &ndash;
<a href="/~eppstein/pubs/">Publications</a> &ndash;
<a href="/~eppstein/">David Eppstein</a> &ndash;
<a href="/~theory/">Theory Group</a> &ndash;
<a href="/">Inf. &amp; Comp. Sci.</a> &ndash;
<a href="//www.uci.edu/">UC Irvine</a>
<p>
<small>Semi-automatically <a href="filter.html">filtered</a>
from a common source file.</small>
</body></html>
Mis_redirected¢DtypeEvalueõIhttp_code¢DtypeEvalueÈQdownload_complete¢DtypeEvalueõ