¦Ifinal_url¡DtypeLhttp_headers¢DtypeEvalue‰¢Ak¢DtypeEvalueNContent-LengthAv¢DtypeEvalueE51773¢Ak¢DtypeEvalueJSet-CookieAv¢DtypeEvalueX°trac_form_token=e3b245bb9fcdfb7074eaa05f; httponly; Path=/wiki/public, trac_session=768f38fa2905d0e3e4d17796; expires=Thu, 09 May 2019 22:52:39 GMT; httponly; Path=/wiki/public¢Ak¢DtypeEvalueGExpiresAv¢DtypeEvalueXFri, 01 Jan 1999 00:00:00 GMT¢Ak¢DtypeEvalueJKeep-AliveAv¢DtypeEvalueRtimeout=5, max=100¢Ak¢DtypeEvalueFServerAv¢DtypeEvalueX„Apache/2.4.6 (CentOS) OpenSSL/1.0.2k-fips SVN/1.7.14 mod_wsgi/3.4 Python/2.7.5 Phusion_Passenger/4.0.53 mod_perl/2.0.10 Perl/v5.16.3¢Ak¢DtypeEvalueJConnectionAv¢DtypeEvalueJKeep-Alive¢Ak¢DtypeEvalueMCache-ControlAv¢DtypeEvalueOmust-revalidate¢Ak¢DtypeEvalueDDateAv¢DtypeEvalueXFri, 08 Feb 2019 22:52:39 GMT¢Ak¢DtypeEvalueLContent-TypeAv¢DtypeEvalueWtext/html;charset=utf-8Kraw_content¢DtypeEvalueYÊ=<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">

    <html xmlns="http://www.w3.org/1999/xhtml">
  
  


  <head>
    <title>
      cs122b-2018-winter-project5 (diff) â€“ Public
    </title>
      <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
      <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <!--[if IE]><script type="text/javascript">
      if (/^#__msie303:/.test(window.location.hash))
        window.location.replace(window.location.hash.replace(/^#__msie303:/, '#'));
    </script><![endif]-->
        <link rel="search" href="/wiki/public/search" />
        <link rel="help" href="/wiki/public/wiki/TracGuide" />
        <link rel="up" href="/wiki/public/wiki/cs122b-2018-winter-project5?action=history" title="Page history" />
        <link rel="next" href="/wiki/public/wiki/cs122b-2018-winter-project5?action=diff&amp;version=3" title="Version 3" />
        <link rel="start" href="/wiki/public/wiki" />
        <link rel="stylesheet" href="/wiki/public/chrome/common/css/trac.css" type="text/css" /><link rel="stylesheet" href="/wiki/public/chrome/common/css/wiki.css" type="text/css" /><link rel="stylesheet" href="/wiki/public/chrome/common/css/diff.css" type="text/css" /><link rel="stylesheet" href="/wiki/public/chrome/tracwysiwyg/wysiwyg.css" type="text/css" />
        <link rel="tracwysiwyg.stylesheet" href="/wiki/public/chrome/common/css/trac.css" /><link rel="tracwysiwyg.stylesheet" href="/wiki/public/chrome/tracwysiwyg/editor.css" />
        <link rel="tracwysiwyg.base" href="/wiki/public" />
        <link rel="prev" href="/wiki/public/wiki/cs122b-2018-winter-project5?action=diff&amp;version=1" title="Version 1" />
        <link rel="shortcut icon" href="/wiki/public/chrome/site/favicon.ico" type="image/x-icon" />
        <link rel="icon" href="/wiki/public/chrome/site/favicon.ico" type="image/x-icon" />
    <style id="trac-noscript" type="text/css">.trac-noscript { display: none !important }</style>
    <script type="text/javascript">
      var _tracwysiwyg={};
    </script>
      <script type="text/javascript" charset="utf-8" src="/wiki/public/chrome/common/js/jquery.js"></script>
      <script type="text/javascript" charset="utf-8" src="/wiki/public/chrome/common/js/babel.js"></script>
      <script type="text/javascript" charset="utf-8" src="/wiki/public/chrome/common/js/trac.js"></script>
      <script type="text/javascript" charset="utf-8" src="/wiki/public/chrome/common/js/search.js"></script>
      <script type="text/javascript" charset="utf-8" src="/wiki/public/chrome/common/js/diff.js"></script>
      <script type="text/javascript" charset="utf-8" src="/wiki/public/chrome/tracwysiwyg/wysiwyg.js"></script>
    <script type="text/javascript">
      jQuery("#trac-noscript").remove();
      jQuery(document).ready(function($) {
        $(".trac-autofocus").focus();
        $(".trac-target-new").attr("target", "_blank");
        setTimeout(function() { $(".trac-scroll").scrollToTop() }, 1);
        $(".trac-disable-on-submit").disableOnSubmit();
      });
    </script>
    <link rel="stylesheet" type="text/css" href="/wiki/public/chrome/common/css/diff.css" />
    <meta name="ROBOTS" content="NOINDEX, NOFOLLOW" />
  </head>
  <body>
    <div id="banner">
      <div id="header">
        <a id="logo" href="http://www.ics.uci.edu/"><img src="/wiki/public/chrome/site/ics.jpg" alt="ICS Logo" height="67" width="128" /></a>
      </div>
      <form id="search" action="/wiki/public/search" method="get">
      </form>
      <div id="metanav" class="nav">
    <ul>
      <li class="first"><a href="/wiki/public/login">Login</a></li><li><a href="/wiki/public/prefs">Preferences</a></li><li class="last"><a href="/wiki/public/about">About Trac</a></li>
    </ul>
  </div>
    </div>
    <div id="mainnav" class="nav">
  </div>
    <div id="main">
      <div id="ctxtnav" class="nav">
        <h2>Context Navigation</h2>
        <ul>
          <li class="first"><span>&larr; <a class="prev" href="/wiki/public/wiki/cs122b-2018-winter-project5?action=diff&amp;version=1" title="Version 1">Previous Change</a></span></li><li><a href="/wiki/public/wiki/cs122b-2018-winter-project5?action=history" title="Page history">Wiki History</a></li><li class="last"><span><a class="next" href="/wiki/public/wiki/cs122b-2018-winter-project5?action=diff&amp;version=3" title="Version 3">Next Change</a> &rarr;</span></li>
        </ul>
        <hr />
      </div>
    <div id="content" class="wiki">
      <h1>
        Changes between
          <a href="/wiki/public/wiki/cs122b-2018-winter-project5?version=1">Version 1</a> and
          <a href="/wiki/public/wiki/cs122b-2018-winter-project5?version=2">Version 2</a> of
          <a href="/wiki/public/wiki/cs122b-2018-winter-project5">cs122b-2018-winter-project5</a>
      </h1>
      <form method="post" id="prefs" action="/wiki/public/wiki/cs122b-2018-winter-project5?version=2"><div><input type="hidden" name="__FORM_TOKEN" value="e3b245bb9fcdfb7074eaa05f" /></div>
        <div>
          <input type="hidden" name="action" value="diff" />
          <input type="hidden" name="version" value="2" />
          <input type="hidden" name="old_version" value="1" />
          
  <label for="style">View differences</label>
  <select id="style" name="style">
    <option selected="selected" value="inline">inline</option>
    <option value="sidebyside">side by side</option>
  </select>
  <div class="field">
    <label><input type="radio" name="contextall" value="0" checked="checked" />
             Show</label>
      <label><input type="text" name="contextlines" id="contextlines" size="2" maxlength="3" value="2" />
             lines around each change</label><br />
    <label><input type="radio" name="contextall" value="1" />
           Show the changes in full context</label>
  </div>
  <fieldset id="ignore">
    <legend>Ignore:</legend>
    <div class="field">
      <input type="checkbox" id="ignoreblanklines" name="ignoreblanklines" />
      <label for="ignoreblanklines">Blank lines</label>
    </div>
    <div class="field">
      <input type="checkbox" id="ignorecase" name="ignorecase" />
      <label for="ignorecase">Case changes</label>
    </div>
    <div class="field">
      <input type="checkbox" id="ignorewhitespace" name="ignorewhitespace" />
      <label for="ignorewhitespace">White space changes</label>
    </div>
  </fieldset>
  <div class="buttons">
    <input type="submit" name="update" value="Update" />
  </div>

        </div>
      </form>
      <dl id="overview">
        <dt class="property time">Timestamp:</dt>
        <dd class="time">
            Mar 6, 2018 5:27:10 PM (<a class="timeline" href="/wiki/public/timeline?from=2018-03-06T17%3A27%3A10-08%3A00&amp;precision=second" title="See timeline at Mar 6, 2018 5:27:10 PM">11 months</a> ago)
        </dd>
        <dt class="property author">Author:</dt>
        <dd class="author">
          avinask
        </dd>
        <dt class="property message">Comment:</dt>
        <dd class="message">
          
          <p>
--
</p>

        </dd>
      </dl>
      <div class="diff">
        <div class="legend" id="diff-legend">
          <h3>Legend:</h3>
          <dl>
            <dt class="unmod"></dt><dd>Unmodified</dd>
            <dt class="add"></dt><dd>Added</dd>
            <dt class="rem"></dt><dd>Removed</dd>
            <dt class="mod"></dt><dd>Modified</dd>
          </dl>
        </div>
        <div class="diff">
  <ul class="entries">
      <li class="entry">
        <h2 id="file0">
          <a href="/wiki/public/wiki/cs122b-2018-winter-project5?version=2">cs122b-2018-winter-project5</a>
        </h2>
        <table class="trac-diff inline" summary="Differences" cellspacing="0">
              <colgroup><col class="lineno" /><col class="lineno" /><col class="content" /></colgroup>
              <thead>
                <tr>
                  <th title="Version 1">
                    <a href="/wiki/public/wiki/cs122b-2018-winter-project5?version=1#L2">
                      v1</a>
                  </th>
                  <th title="Version 2">
                    <a href="/wiki/public/wiki/cs122b-2018-winter-project5?version=2#L2">
                      v2</a>
                  </th>
                  <td>Â </td>
                </tr>
              </thead>
            <tbody class="unmod">
                  <tr>
                          <th>2</th><th>2</th><td class="l"><span></span></td>
                  </tr><tr>
                          <th>3</th><th>3</th><td class="l"><span>= CS122B Project 5: Scaling Fabflix and Performance Tuning =</span></td>
                  </tr>
            </tbody><tbody class="mod">
                      <tr class="first">
                        <th>4</th><th>Â </th><td class="l"><span>'''D<del>ue: March 18, 2017, Saturday, 11:45 pm. Submit on EEE.'''[[BR]] Notice that we use 1 day after the official deadline as the submission cut-off time on EEE to allow you to use the 24-hour grace period if you chose so. After that, EEE will no longer accept submissions.</del></span></td>
                      </tr><tr>
                        <th>5</th><th>Â </th><td class="l"><span></span></td>
                      </tr><tr>
                        <th>6</th><th>Â </th><td class="l"><span><del></del>This project has the following tasks:</span></td>
                      </tr>
                      <tr>
                        <th>Â </th><th>4</th><td class="r"><span>'''D<ins>eadline: Sunday, 3/18/2018, 11:45pm. Due on Github '''[[BR]]</ins></span></td>
                      </tr><tr>
                        <th>Â </th><th>5</th><td class="r"><span></span></td>
                      </tr><tr class="last">
                        <th>Â </th><th>6</th><td class="r"><span><ins>&nbsp;</ins>This project has the following tasks:</span></td>
                      </tr>
            </tbody><tbody class="unmod">
                  <tr>
                          <th>7</th><th>7</th><td class="l"><span></span></td>
                  </tr><tr>
                          <th>8</th><th>8</th><td class="l"><span>&nbsp;1. JDBC connection pooling and Prepared statements</span></td>
                  </tr>
            </tbody>
              <tbody class="skipped">
                <tr>
                  <th><a href="/wiki/public/wiki/cs122b-2018-winter-project5?version=1#L20">â€¦</a></th>
                  <th><a href="/wiki/public/wiki/cs122b-2018-winter-project5?version=2#L20">â€¦</a></th>
                  <td>Â </td>
                </tr>
              </tbody>
            <tbody class="unmod">
                  <tr>
                          <th>20</th><th>20</th><td class="l"><span>'''Step 2:''' Enable JDBC connection pooling for Fabflix. We will use our running application of "!TomcatTest" to show how to change it to use connection pooling. Note: We do not know whether the instructions will work for JSP or not.</span></td>
                  </tr><tr>
                          <th>21</th><th>21</th><td class="l"><span></span></td>
                  </tr>
            </tbody><tbody class="mod">
                      <tr class="first">
                        <th>22</th><th>Â </th><td class="l"><span>&nbsp;1. Download and deploy the following [attachment:wiki:cs122b-201<del>7</del>-winter-project5:TomcatPooling.war TomcatPooling.war] file. The file '''!TomcatPooling\META-INF\context.xml''' includes important information about the database, user name, password, and pooling configuration. If you want to change this file, you need to undeploy the war file, make those changes, make a new war file, and deploy the new war file. Otherwise, the Tomcat server may still use the previous context.xml. Check [http://tomcat.apache.org/tomcat-8.5-doc/jndi-datasource-examples-howto.html] for more information about how to configure connection pooling.</span></td>
                      </tr>
                      <tr class="last">
                        <th>Â </th><th>22</th><td class="r"><span>&nbsp;1. Download and deploy the following [attachment:wiki:cs122b-201<ins>8</ins>-winter-project5:TomcatPooling.war TomcatPooling.war] file. The file '''!TomcatPooling\META-INF\context.xml''' includes important information about the database, user name, password, and pooling configuration. If you want to change this file, you need to undeploy the war file, make those changes, make a new war file, and deploy the new war file. Otherwise, the Tomcat server may still use the previous context.xml. Check [http://tomcat.apache.org/tomcat-8.5-doc/jndi-datasource-examples-howto.html] for more information about how to configure connection pooling.</span></td>
                      </tr>
            </tbody><tbody class="unmod">
                  <tr>
                          <th>23</th><th>23</th><td class="l"><span>&nbsp;1. Go to the link http://localhost:8080/TomcatPooling/servlet/TomcatTest to test your application.&nbsp; You must see a list of rows displayed on the webpage.</span></td>
                  </tr><tr>
                          <th>24</th><th>24</th><td class="l"><span>&nbsp;1. Look into the following files for the main changes in this war file&nbsp; &nbsp;compared to the previous war file without connection pooling:</span></td>
                  </tr>
            </tbody>
              <tbody class="skipped">
                <tr>
                  <th><a href="/wiki/public/wiki/cs122b-2018-winter-project5?version=1#L29">â€¦</a></th>
                  <th><a href="/wiki/public/wiki/cs122b-2018-winter-project5?version=2#L29">â€¦</a></th>
                  <td>Â </td>
                </tr>
              </tbody>
            <tbody class="unmod">
                  <tr>
                          <th>29</th><th>29</th><td class="l"><span>You may also find some useful links for connection pooling from [http://archive.oreilly.com/pub/a/onjava/2006/04/19/database-connection-pooling-with-tomcat.html?page=1 this tutorial].</span></td>
                  </tr><tr>
                          <th>30</th><th>30</th><td class="l"><span></span></td>
                  </tr>
            </tbody><tbody class="mod">
                      <tr class="first">
                        <th>31</th><th>Â </th><td class="l"><span>__'''When you are done,'''__ write a<del>n explanation of how/where you use the JDBC connection pooling in your code. You should submit this report to EEE</del>.</span></td>
                      </tr>
                      <tr class="last">
                        <th>Â </th><th>31</th><td class="r"><span>__'''When you are done,'''__ write a<ins>&nbsp;brief explanation of how/where you use the JDBC connection pooling in your code. You should submit this report to Github</ins>.</span></td>
                      </tr>
            </tbody><tbody class="unmod">
                  <tr>
                          <th>32</th><th>32</th><td class="l"><span></span></td>
                  </tr><tr>
                          <th>33</th><th>33</th><td class="l"><span>----</span></td>
                  </tr><tr>
                          <th>34</th><th>34</th><td class="l"><span>== Task 2: Scaling Fabflix ==</span></td>
                  </tr>
            </tbody><tbody class="rem">
                  <tr class="last first">
                          <th>35</th><th>Â </th><td class="l"><del></del></td>
                  </tr>
            </tbody><tbody class="unmod">
                  <tr>
                          <th>36</th><th>35</th><td class="l"><span>[[Span(id=Replication)]]</span></td>
                  </tr><tr>
                          <th>37</th><th>36</th><td class="l"><span></span></td>
                  </tr>
            </tbody>
              <tbody class="skipped">
                <tr>
                  <th><a href="/wiki/public/wiki/cs122b-2018-winter-project5?version=1#L39">â€¦</a></th>
                  <th><a href="/wiki/public/wiki/cs122b-2018-winter-project5?version=2#L38">â€¦</a></th>
                  <td>Â </td>
                </tr>
              </tbody>
            <tbody class="unmod">
                  <tr>
                          <th>39</th><th>38</th><td class="l"><span></span></td>
                  </tr><tr>
                          <th>40</th><th>39</th><td class="l"><span>'''Step 2 (master/slave)''': Create a dummy user for two example Tomcat applications:</span></td>
                  </tr>
            </tbody><tbody class="add">
                  <tr class="last first">
                          <th>Â </th><th>40</th><td class="r"><ins></ins></td>
                  </tr>
            </tbody><tbody class="unmod">
                  <tr>
                          <th>41</th><th>41</th><td class="l"><span>{{{</span></td>
                  </tr><tr>
                          <th>42</th><th>42</th><td class="l"><span>shell&gt; mysql -u root -p</span></td>
                  </tr>
            </tbody>
              <tbody class="skipped">
                <tr>
                  <th><a href="/wiki/public/wiki/cs122b-2018-winter-project5?version=1#L44">â€¦</a></th>
                  <th><a href="/wiki/public/wiki/cs122b-2018-winter-project5?version=2#L44">â€¦</a></th>
                  <td>Â </td>
                </tr>
              </tbody>
            <tbody class="unmod">
                  <tr>
                          <th>44</th><th>44</th><td class="l"><span>mysql&gt; GRANT ALL ON *.* TO 'mytestuser'@'localhost';</span></td>
                  </tr><tr>
                          <th>45</th><th>45</th><td class="l"><span>}}}</span></td>
                  </tr>
            </tbody><tbody class="rem">
                  <tr class="last first">
                          <th>46</th><th>Â </th><td class="l"><del></del></td>
                  </tr>
            </tbody><tbody class="unmod">
                  <tr>
                          <th>47</th><th>46</th><td class="l"><span>'''Step 3 (master/slave)''': Setup Tomcat on each master/slave instance. (You should have done it many times.)</span></td>
                  </tr><tr>
                          <th>48</th><th>47</th><td class="l"><span></span></td>
                  </tr>
            </tbody><tbody class="mod">
                      <tr class="first">
                        <th>49</th><th>Â </th><td class="l"><span>'''Step 4 (master/slave)''': On each master/slave instance, deploy [https://grape.ics.uci.edu/wiki/public/attachment/wiki/cs122b-201<del>7</del>-winter-project5/TomcatTest.war TomcatTest.war]. Make the URL http://PUBLIC_IP:8080/TomcatTest/servlet/TomcatTest work. You may need to modify the username/password and IP address (use the internal AWS instance address). Also make sure to modify the AWS security group setting for these two instances to allow remote access to their 8080 port.</span></td>
                      </tr><tr>
                        <th>50</th><th>Â </th><td class="l"><span></span></td>
                      </tr><tr>
                        <th>51</th><th>Â </th><td class="l"><span>'''Step 5 (master/slave)''': On each master/slave instance, deploy [https://grape.ics.uci.edu/wiki/public/attachment/wiki/cs122b-201<del>7</del>-winter-project5/Session.war Session.war]. Make the URL http://PUBLIC_IP:8080/Session/servlet/ShowSession?myname=Michael work.</span></td>
                      </tr>
                      <tr>
                        <th>Â </th><th>48</th><td class="r"><span>'''Step 4 (master/slave)''': On each master/slave instance, deploy [https://grape.ics.uci.edu/wiki/public/attachment/wiki/cs122b-201<ins>8</ins>-winter-project5/TomcatTest.war TomcatTest.war]. Make the URL http://PUBLIC_IP:8080/TomcatTest/servlet/TomcatTest work. You may need to modify the username/password and IP address (use the internal AWS instance address). Also make sure to modify the AWS security group setting for these two instances to allow remote access to their 8080 port.</span></td>
                      </tr><tr>
                        <th>Â </th><th>49</th><td class="r"><span></span></td>
                      </tr><tr class="last">
                        <th>Â </th><th>50</th><td class="r"><span>'''Step 5 (master/slave)''': On each master/slave instance, deploy [https://grape.ics.uci.edu/wiki/public/attachment/wiki/cs122b-201<ins>8</ins>-winter-project5/Session.war Session.war]. Make the URL http://PUBLIC_IP:8080/Session/servlet/ShowSession?myname=Michael work.</span></td>
                      </tr>
            </tbody><tbody class="unmod">
                  <tr>
                          <th>52</th><th>51</th><td class="l"><span></span></td>
                  </tr><tr>
                          <th>53</th><th>52</th><td class="l"><span>'''Step 6 (instance 1)''': On the instance that runs the original Fablix instance (called "instance 1"), setup Apache and its proxy by doing the following:</span></td>
                  </tr>
            </tbody>
              <tbody class="skipped">
                <tr>
                  <th><a href="/wiki/public/wiki/cs122b-2018-winter-project5?version=1#L85">â€¦</a></th>
                  <th><a href="/wiki/public/wiki/cs122b-2018-winter-project5?version=2#L84">â€¦</a></th>
                  <td>Â </td>
                </tr>
              </tbody>
            <tbody class="unmod">
                  <tr>
                          <th>85</th><th>84</th><td class="l"><span>&nbsp;1. Modify the security group of the two backend instances to allow instance 1 to access their 8080 port.</span></td>
                  </tr><tr>
                          <th>86</th><th>85</th><td class="l"><span></span></td>
                  </tr>
            </tbody><tbody class="mod">
                      <tr class="first">
                        <th>87</th><th>Â </th><td class="l"><span>These settings will redirect HTTP requests to "instance1_IP/TomcatTest" to one of the two backend instances. To test it, use a browser to point to http://instance1_IP/TomcatTest/servlet/TomcatTest. Be sure to open port 80 of instance 1 to your IP address. Check the Tomcat log of the two backend instances.<del>&nbsp; </del></span></td>
                      </tr><tr>
                        <th>88</th><th>Â </th><td class="l"><span>{{{</span></td>
                      </tr><tr>
                        <th>89</th><th>Â </th><td class="l"><span>instance2-shell&gt; tail -f /var/log/tomcat7/*.log /var/log/tomcat7/*.txt /var/log/tomcat7/*.out</span></td>
                      </tr><tr>
                        <th>90</th><th>Â </th><td class="l"><span>}}}</span></td>
                      </tr><tr>
                        <th>91</th><th>Â </th><td class="l"><span></span></td>
                      </tr>
                      <tr>
                        <th>Â </th><th>86</th><td class="r"><span>These settings will redirect HTTP requests to "instance1_IP/TomcatTest" to one of the two backend instances. To test it, use a browser to point to http://instance1_IP/TomcatTest/servlet/TomcatTest. Be sure to open port 80 of instance 1 to your IP address. Check the Tomcat log of the two backend instances.<ins></ins></span></td>
                      </tr><tr>
                        <th>Â </th><th>87</th><td class="r"><span></span></td>
                      </tr><tr>
                        <th>Â </th><th>88</th><td class="r"><span>{{{</span></td>
                      </tr><tr>
                        <th>Â </th><th>89</th><td class="r"><span>instance2-shell&gt; tail -f /var/log/tomcat8/*.log /var/log/tomcat8/*.txt /var/log/tomcat8/*.out</span></td>
                      </tr><tr class="last">
                        <th>Â </th><th>90</th><td class="r"><span>}}}</span></td>
                      </tr>
            </tbody><tbody class="unmod">
                  <tr>
                          <th>92</th><th>91</th><td class="l"><span>One of them should receive that request.&nbsp; Keep refreshing the page to send multiple requests, and check if the two backends are receiving the requests evenly.</span></td>
                  </tr><tr>
                          <th>93</th><th>92</th><td class="l"><span></span></td>
                  </tr>
            </tbody>
              <tbody class="skipped">
                <tr>
                  <th><a href="/wiki/public/wiki/cs122b-2018-winter-project5?version=1#L104">â€¦</a></th>
                  <th><a href="/wiki/public/wiki/cs122b-2018-winter-project5?version=2#L103">â€¦</a></th>
                  <td>Â </td>
                </tr>
              </tbody>
            <tbody class="unmod">
                  <tr>
                          <th>104</th><th>103</th><td class="l"><span>}}}</span></td>
                  </tr><tr>
                          <th>105</th><th>104</th><td class="l"><span>Also do the following:</span></td>
                  </tr>
            </tbody><tbody class="mod">
                      <tr class="first">
                        <th>106</th><th>Â </th><td class="l"><span>1. Add two new rules in the body of the !VirtualHost tag.[[BR]]</span></td>
                      </tr>
                      <tr>
                        <th>Â </th><th>105</th><td class="r"><span></span></td>
                      </tr><tr class="last">
                        <th>Â </th><th>106</th><td class="r"><span>&nbsp;1. Add two new rules in the body of the !VirtualHost tag.[[BR]]</span></td>
                      </tr>
            </tbody><tbody class="unmod">
                  <tr>
                          <th>107</th><th>107</th><td class="l"><span>{{{</span></td>
                  </tr><tr>
                          <th>108</th><th>108</th><td class="l"><span>ProxyPass /Session balancer://Session_balancer</span></td>
                  </tr><tr>
                          <th>109</th><th>109</th><td class="l"><span>ProxyPassReverse /Session balancer://Session_balancer</span></td>
                  </tr><tr>
                          <th>110</th><th>110</th><td class="l"><span>}}}</span></td>
                  </tr>
            </tbody><tbody class="mod">
                      <tr class="first">
                        <th>111</th><th>Â </th><td class="l"><span><del></del>1. Restart Apache:</span></td>
                      </tr>
                      <tr class="last">
                        <th>Â </th><th>111</th><td class="r"><span><ins>&nbsp;</ins>1. Restart Apache:</span></td>
                      </tr>
            </tbody><tbody class="unmod">
                  <tr>
                          <th>112</th><th>112</th><td class="l"><span>{{{</span></td>
                  </tr><tr>
                          <th>113</th><th>113</th><td class="l"><span>instance1-shell&gt; sudo service apache2 restart</span></td>
                  </tr><tr>
                          <th>114</th><th>114</th><td class="l"><span>}}}</span></td>
                  </tr>
            </tbody><tbody class="add">
                  <tr class="last first">
                          <th>Â </th><th>115</th><td class="r"><ins></ins></td>
                  </tr>
            </tbody><tbody class="unmod">
                  <tr>
                          <th>115</th><th>116</th><td class="l"><span>Test if it works by pointing to the URL http://instance1_IP/Session/servlet/ShowSession?myname=Michael of instance 1. It should access one of the backend instances only.</span></td>
                  </tr><tr>
                          <th>116</th><th>117</th><td class="l"><span></span></td>
                  </tr>
            </tbody><tbody class="rem">
                  <tr class="first">
                          <th>117</th><th>Â </th><td class="l"><del>'''Step 8 (instance 1)''': Send write operations to the master instance only. Since eventually we want the master instance to handle write operations, we need to make sure all write requests to instance 1 are redirected to the master only. We can achieve the goal by defining an additional pair of `ProxyPass` and `ProxyPassReverse` in the `VirtualHost` tag using a new URL pattern. In particular, add the following '''before''' the old "!ProxyPass /Session" proxy:</del></td>
                  </tr><tr>
                          <th>118</th><th>Â </th><td class="l"><del></del></td>
                  </tr><tr>
                          <th>119</th><th>Â </th><td class="l"><del>{{{</del></td>
                  </tr><tr>
                          <th>120</th><th>Â </th><td class="l"><del>ProxyPass /Session/write http://172.2.2.2:8080/Session</del></td>
                  </tr><tr>
                          <th>121</th><th>Â </th><td class="l"><del>ProxyPassReverse /Session/write http://172.2.2.2:8080/Session</del></td>
                  </tr><tr>
                          <th>122</th><th>Â </th><td class="l"><del>}}}</del></td>
                  </tr><tr>
                          <th>123</th><th>Â </th><td class="l"><del>Notice that the proxy rules in the Apache configuration file are called sequentially.&nbsp; That's why we have to define this rule '''before''' the old "!ProxyPass /Session" rule.</del></td>
                  </tr><tr>
                          <th>124</th><th>Â </th><td class="l"><del></del></td>
                  </tr><tr>
                          <th>125</th><th>Â </th><td class="l"><del>Reload and restart the Apache2 web server:</del></td>
                  </tr><tr>
                          <th>126</th><th>Â </th><td class="l"><del></del></td>
                  </tr><tr>
                          <th>127</th><th>Â </th><td class="l"><del>{{{</del></td>
                  </tr><tr>
                          <th>128</th><th>Â </th><td class="l"><del>sudo service apache2 force-reload</del></td>
                  </tr><tr>
                          <th>129</th><th>Â </th><td class="l"><del>sudo service apache2 restart</del></td>
                  </tr><tr>
                          <th>130</th><th>Â </th><td class="l"><del>}}}</del></td>
                  </tr><tr>
                          <th>131</th><th>Â </th><td class="l"><del>Test the URL http://instance1_IP/Session/write/servlet/ShowSession?myname=Michael. It should be sent to the master instance only.</del></td>
                  </tr><tr class="last">
                          <th>132</th><th>Â </th><td class="l"><del></del></td>
                  </tr>
            </tbody><tbody class="unmod">
                  <tr>
                          <th>133</th><th>118</th><td class="l"><span>Here's a sample Apache configuration file [attachment:000-default.conf].</span></td>
                  </tr><tr>
                          <th>134</th><th>119</th><td class="l"><span></span></td>
                  </tr>
            </tbody><tbody class="mod">
                      <tr class="first">
                        <th>135</th><th>Â </th><td class="l"><span>'''Step 9 (master/slave):''' Make the two backend instances form a master/slave cluster based on the instructions you learned in step 1 about [https://grape.ics.uci.edu/wiki/public/wiki/cs122b-2017-winter-project5-mysql-master-slave MySQL replication tutorial].</span></td>
                      </tr><tr>
                        <th>136</th><th>Â </th><td class="l"><span></span></td>
                      </tr><tr>
                        <th>137</th><th>Â </th><td class="l"><span>'''Step 10 (main task)''': Deploy your Fabflix system to the two backend instances. Do MySQL master/slave replication. Configure the original instance properly to enable load balancing, connection pooling, support sessions, and send write requests to the master instance only. Enabling the scaled version with HTTPS is '''optional'''. Note that you are required to add a section to the connection pooling report and explain how to use connection pooling in the case of having two backend servers.</span></td>
                      </tr>
                      <tr class="last">
                        <th>Â </th><th>120</th><td class="r"><span>'''Step 8 (main task)''': Deploy your Fabflix system to the two backend instances. Do MySQL master/slave replication. Configure the original instance properly to enable load balancing, connection pooling, sticky sessions. Also make sure the write request must be sent to the master mysql instance, while read request should be sent to either master or slave mysql instance. Enabling the scaled version with HTTPS is '''optional'''. '''Note that you are required to add a section to the connection pooling report and explain how to use connection pooling in the case of having two backend servers.'''</span></td>
                      </tr>
            </tbody><tbody class="unmod">
                  <tr>
                          <th>138</th><th>121</th><td class="l"><span></span></td>
                  </tr><tr>
                          <th>139</th><th>122</th><td class="l"><span>The following is the architecture diagram:</span></td>
                  </tr><tr>
                          <th>140</th><th>123</th><td class="l"><span></span></td>
                  </tr>
            </tbody><tbody class="mod">
                      <tr class="first">
                        <th>141</th><th>Â </th><td class="l"><span>&nbsp; [[Image(wiki:cs122b-2017-winter-project5:load_balancing.png)]]</span></td>
                      </tr><tr>
                        <th>142</th><th>Â </th><td class="l"><span></span></td>
                      </tr><tr>
                        <th>143</th><th>Â </th><td class="l"><span>Notice that in this architecture, each Tomcat only talks to its own MySQL. Sometimes we may want to setup a cluster of MySQL, and let each Tomcat talk to the cluster through another load balancer.&nbsp; If interested, you can read this [http://mysqlhighavailability.com/setting-up-mysql-router/ page] on how to set it up.</span></td>
                      </tr>
                      <tr>
                        <th>Â </th><th>124</th><td class="r"><span>&nbsp; [[Image(wiki:cs122b-2018-spring-project5:CS122B-Project5-Cluster-Architecture.png, 500px)]]</span></td>
                      </tr><tr>
                        <th>Â </th><th>125</th><td class="r"><span></span></td>
                      </tr><tr>
                        <th>Â </th><th>126</th><td class="r"><span>Notice that in this architecture, each Tomcat can talk to both mysql instances. Sometimes we may want to setup a cluster of MySQL, and let each Tomcat talk to the cluster through another load balancer.&nbsp; If interested, you can read this [http://mysqlhighavailability.com/setting-up-mysql-router/ page] on how to set it up.</span></td>
                      </tr><tr>
                        <th>Â </th><th>127</th><td class="r"><span></span></td>
                      </tr><tr>
                        <th>Â </th><th>128</th><td class="r"><span>'''Step 9 (Google Cloud):''' After finishing the main task, you then need to install and configure the load balancer on one Google Cloud instance. As before, this load balancer needs to redirect requests to one of the Tomcat servers. However, the load balancer needs to use the public IPs of the AWS instances, and make sure you have port 8080 open to the Google Cloud instance.</span></td>
                      </tr><tr>
                        <th>Â </th><th>129</th><td class="r"><span></span></td>
                      </tr><tr class="last">
                        <th>Â </th><th>130</th><td class="r"><span>You can get $300 free credits for Google Cloud from [https://cloud.google.com/free/ free-trial]. After that, start a computing engine (using Ubuntu 16.04) by following this [https://console.cloud.google.com/getting-started?project=applied-plexus-163600 tutorial], and repeat the exact same steps as you did for installing the load balancer on AWS.</span></td>
                      </tr>
            </tbody><tbody class="unmod">
                  <tr>
                          <th>144</th><th>131</th><td class="l"><span></span></td>
                  </tr><tr>
                          <th>145</th><th>132</th><td class="l"><span>----</span></td>
                  </tr><tr>
                          <th>146</th><th>133</th><td class="l"><span>== Task 3: Measuring the performance of Fabflix search feature ==</span></td>
                  </tr>
            </tbody><tbody class="mod">
                      <tr class="first">
                        <th>147</th><th>Â </th><td class="l"><span>In this part, we will measure the performance of the keyword search feature that you have implemented in the past projects. The measurement results described in subtasks 3.1 and 3.2 must be reported for both the single-instance (i.e., the <del>version that you prepared in Task </del>1) and the scaled version of Fabflix.''' Note: '''The URL to the single-instance version should be http:///INSTANCE1_PUBLIC_IP:8080/fabflix, while it should be http://INSTANCE1_PUBLIC_IP:80/fabflix for the scaled version that you prepared in Task 2.</span></td>
                      </tr>
                      <tr class="last">
                        <th>Â </th><th>134</th><td class="r"><span>In this part, we will measure the performance of the keyword search feature that you have implemented in the past projects. The measurement results described in subtasks 3.1 and 3.2 must be reported for both the single-instance (i.e., the <ins>instance that you prepared in earlier projects and Task</ins>1) and the scaled version of Fabflix.''' Note: '''The URL to the single-instance version should be http:///INSTANCE1_PUBLIC_IP:8080/fabflix, while it should be http://INSTANCE1_PUBLIC_IP:80/fabflix for the scaled version that you prepared in Task 2.</span></td>
                      </tr>
            </tbody><tbody class="unmod">
                  <tr>
                          <th>148</th><th>135</th><td class="l"><span></span></td>
                  </tr><tr>
                          <th>149</th><th>136</th><td class="l"><span>=== Task 3.1: Preparing the codebase for time measurement ===</span></td>
                  </tr>
            </tbody>
              <tbody class="skipped">
                <tr>
                  <th><a href="/wiki/public/wiki/cs122b-2018-winter-project5?version=1#L167">â€¦</a></th>
                  <th><a href="/wiki/public/wiki/cs122b-2018-winter-project5?version=2#L154">â€¦</a></th>
                  <td>Â </td>
                </tr>
              </tbody>
            <tbody class="unmod">
                  <tr>
                          <th>167</th><th>154</th><td class="l"><span>'''Submission-related note:''' The usage of this script, which is expected to be found at the root of your .war file, must be explained in your README file.</span></td>
                  </tr><tr>
                          <th>168</th><th>155</th><td class="l"><span></span></td>
                  </tr>
            </tbody><tbody class="add">
                  <tr class="first">
                          <th>Â </th><th>156</th><td class="r"><ins>[[Span(id=Jmeter)]]</ins></td>
                  </tr><tr class="last">
                          <th>Â </th><th>157</th><td class="r"><ins></ins></td>
                  </tr>
            </tbody><tbody class="unmod">
                  <tr>
                          <th>169</th><th>158</th><td class="l"><span>=== Task 3.2: Preparing the test plan in Apache JMeter ===</span></td>
                  </tr>
            </tbody><tbody class="mod">
                      <tr class="first">
                        <th>170</th><th>Â </th><td class="l"><span>In this part, you will use [http://jmeter.apache.org/ Apache JMeter] to measure the performance of the search feature of the Fabflix website. In particular, you must measure the '''average query time''' of the search feature using a set of queries based on the movie tiles in this [attachment:wiki:cs122b-201<del>7</del>-winter-project5:query_load.txt file]. Assume the page size is 50, and we only want the first page of results.</span></td>
                      </tr>
                      <tr class="last">
                        <th>Â </th><th>159</th><td class="r"><span>In this part, you will use [http://jmeter.apache.org/ Apache JMeter] to measure the performance of the search feature of the Fabflix website. In particular, you must measure the '''average query time''' of the search feature using a set of queries based on the movie tiles in this [attachment:wiki:cs122b-201<ins>8</ins>-winter-project5:query_load.txt file]. Assume the page size is 50, and we only want the first page of results.</span></td>
                      </tr>
            </tbody><tbody class="unmod">
                  <tr>
                          <th>171</th><th>160</th><td class="l"><span></span></td>
                  </tr><tr>
                          <th>172</th><th>161</th><td class="l"><span>The following figure illustrates the round-trip time of a query from a client to the server then back to client. The ''query time''&nbsp; of a query (i.e., "Tq") is&nbsp; the total time starting from when the search request is sent from the client (Ts) until the time when the response has completely received by the client (Te). It includes two major parts: (1) ''response time'' (Tr) is the time it takes until the client hears the first bit of the response, and (2) "payload time" (Tp) is the time it takes for the response data to be downloaded by the client completely.</span></td>
                  </tr>
            </tbody>
              <tbody class="skipped">
                <tr>
                  <th><a href="/wiki/public/wiki/cs122b-2018-winter-project5?version=1#L178">â€¦</a></th>
                  <th><a href="/wiki/public/wiki/cs122b-2018-winter-project5?version=2#L167">â€¦</a></th>
                  <td>Â </td>
                </tr>
              </tbody>
            <tbody class="unmod">
                  <tr>
                          <th>178</th><th>167</th><td class="l"><span>Step 2: Download and install JMeter from this [http://jmeter.apache.org/download_jmeter.cgi link].</span></td>
                  </tr><tr>
                          <th>179</th><th>168</th><td class="l"><span></span></td>
                  </tr>
            </tbody><tbody class="mod">
                      <tr class="first">
                        <th>180</th><th>Â </th><td class="l"><span>Step 3: Use [http://jmeter.apache.org/usermanual/build-web-test-plan.html this link] to make a test plan for the search feature of your website. You will run the Jmeter test from your local development against the remote AWS instance.&nbsp; The plan must iteratively generate a proper HTTP or HTTPS search request for every movie title in the provided [attachment:wiki:cs122b-201<del>7-winter-project5:query_load.txt query file]. Here is a useful [http://ivetetecedor.com/how-to-use-a-csv-file-with-jmeter/ page] about how to use a CSV file for Jmeter. Here are other useful tutorials on how to get request parameter values from an external CSV file: [http://sqa.fyicenter.com/FAQ/Apache-JMeter/_How_do_I_use_external_data_files_to_define_var.html Link 1], [http://executeautomation.com/blog/csv-data-driven-parameterization-in-jmeter-series-2/ Link 2], and [https://blazemeter.com/jmeter-training/using-dynamic-data-csv-file-jmeter Link 3]</del>.</span></td>
                      </tr>
                      <tr class="last">
                        <th>Â </th><th>169</th><td class="r"><span>Step 3: Use [http://jmeter.apache.org/usermanual/build-web-test-plan.html this link] to make a test plan for the search feature of your website. You will run the Jmeter test from your local development against the remote AWS instance.&nbsp; The plan must iteratively generate a proper HTTP or HTTPS search request for every movie title in the provided [attachment:wiki:cs122b-201<ins>8-winter-project5:query_load.txt query file]. Here is a useful [http://ivetetecedor.com/how-to-use-a-csv-file-with-jmeter/ page] about how to use a CSV file for Jmeter</ins>.</span></td>
                      </tr>
            </tbody><tbody class="unmod">
                  <tr>
                          <th>181</th><th>170</th><td class="l"><span></span></td>
                  </tr><tr>
                          <th>182</th><th>171</th><td class="l"><span>=== Task 3.3: Collecting the performance results ===</span></td>
                  </tr>
            </tbody><tbody class="mod">
                      <tr class="first">
                        <th>183</th><th>Â </th><td class="l"><span>Run the tests for all the following settings to collect performance results. For each case, remember to make the necessary changes to the JMeter test plan and/or the codebase.&nbsp; Use the results to fill out this [attachment:wiki:cs122b-201<del>7-winter-project5:jmeter_report.html HTML file] as your measurement report. For each case, report the requested values in the corresponding columns, and write a short analysis for that case in the last column. This [attachment:wiki:cs122b-2017</del>-winter-project5:graph_results_case1.png image] is an example of what you should report in the second column called "Graph Results Screenshot".</span></td>
                      </tr>
                      <tr class="last">
                        <th>Â </th><th>172</th><td class="r"><span>Run the tests for all the following settings to collect performance results. For each case, remember to make the necessary changes to the JMeter test plan and/or the codebase.&nbsp; Use the results to fill out this [attachment:wiki:cs122b-201<ins>8-winter-project5:jmeter_report.html HTML file] as your measurement report. For each case, report the requested values in the corresponding columns, and write a short analysis for that case in the last column. This [attachment:wiki:cs122b-2018</ins>-winter-project5:graph_results_case1.png image] is an example of what you should report in the second column called "Graph Results Screenshot".</span></td>
                      </tr>
            </tbody><tbody class="unmod">
                  <tr>
                          <th>184</th><th>173</th><td class="l"><span></span></td>
                  </tr><tr>
                          <th>185</th><th>174</th><td class="l"><span>'''Notes''':</span></td>
                  </tr>
            </tbody><tbody class="add">
                  <tr class="last first">
                          <th>Â </th><th>175</th><td class="r"><ins></ins></td>
                  </tr>
            </tbody><tbody class="unmod">
                  <tr>
                          <th>186</th><th>176</th><td class="l"><span>&nbsp;1. In all cases, if not mentioned otherwise, your Fabflix codebase is assumed to use both the Prepared Statements and Connection Pooling optimization techniques.</span></td>
                  </tr><tr>
                          <th>187</th><th>177</th><td class="l"><span>&nbsp;1. If more than one JMeter thread is to be used, each thread should start a new session in Tomcat (i.e., threads should not share a session-id).</span></td>
                  </tr>
            </tbody>
              <tbody class="skipped">
                <tr>
                  <th><a href="/wiki/public/wiki/cs122b-2018-winter-project5?version=1#L203">â€¦</a></th>
                  <th><a href="/wiki/public/wiki/cs122b-2018-winter-project5?version=2#L193">â€¦</a></th>
                  <td>Â </td>
                </tr>
              </tbody>
            <tbody class="unmod">
                  <tr>
                          <th>203</th><th>193</th><td class="l"><span></span></td>
                  </tr><tr>
                          <th>204</th><th>194</th><td class="l"><span>----</span></td>
                  </tr>
            </tbody><tbody class="mod">
                      <tr class="first">
                        <th>205</th><th>Â </th><td class="l"><span>=&nbsp; =</span></td>
                      </tr><tr>
                        <th>206</th><th>Â </th><td class="l"><span>= Preparing the Package for Submission =</span></td>
                      </tr><tr>
                        <th>207</th><th>Â </th><td class="l"><span>&nbsp;1. There will be no demo for this project.</span></td>
                      </tr><tr>
                        <th>208</th><th>Â </th><td class="l"><span>&nbsp;1. You should take the following steps to prepare your package for submission. When prepared, submit the package to EEE (i.e., one submission per team).</span></td>
                      </tr><tr>
                        <th>209</th><th>Â </th><td class="l"><span>&nbsp; &nbsp;* Create a directory, called `"project5_[GROUP ID]"` on your local machine. You are required to include all the three `reports, README,` as well as the `"fabflix_webapp.war"`.</span></td>
                      </tr><tr>
                        <th>210</th><th>Â </th><td class="l"><span>&nbsp; &nbsp;* In README, write down the address of your AWS instance</span></td>
                      </tr><tr>
                        <th>211</th><th>Â </th><td class="l"><span>&nbsp; &nbsp;* Open ports 80 and 8080 of your AWS instance to the following addresses:</span></td>
                      </tr><tr>
                        <th>212</th><th>Â </th><td class="l"><span>&nbsp; &nbsp; &nbsp;* 128.195.52.56</span></td>
                      </tr><tr>
                        <th>213</th><th>Â </th><td class="l"><span>&nbsp; &nbsp; &nbsp;* 128.195.52.58</span></td>
                      </tr>
                      <tr>
                        <th>Â </th><th>195</th><td class="r"><span>[[Span(id=DeploymentOnAWS)]]</span></td>
                      </tr><tr>
                        <th>Â </th><th>196</th><td class="r"><span></span></td>
                      </tr><tr>
                        <th>Â </th><th>197</th><td class="r"><span>== Deployment On AWS and Submissions ==</span></td>
                      </tr><tr>
                        <th>Â </th><th>198</th><td class="r"><span></span></td>
                      </tr><tr>
                        <th>Â </th><th>199</th><td class="r"><span>The same as before, use Github for your project 5 code and deploy (web code) on AWS.</span></td>
                      </tr><tr>
                        <th>Â </th><th>200</th><td class="r"><span></span></td>
                      </tr><tr>
                        <th>Â </th><th>201</th><td class="r"><span>----</span></td>
                      </tr><tr>
                        <th>Â </th><th>202</th><td class="r"><span>[[Span(id=Grading)]]</span></td>
                      </tr><tr>
                        <th>Â </th><th>203</th><td class="r"><span></span></td>
                      </tr><tr>
                        <th>Â </th><th>204</th><td class="r"><span>== Demonstration and Grading Criteria ==</span></td>
                      </tr><tr class="last">
                        <th>Â </th><th>205</th><td class="r"><span>The same as before, '''You are required to demonstrate&nbsp; this project''', and time is '''15 minutes''' per team. </span></td>
                      </tr>
            </tbody>
        </table>
      </li>
  </ul>
</div>
      </div>
  </div>
    </div>
    <div id="footer" lang="en" xml:lang="en"><hr />
      <a id="tracpowered" href="http://trac.edgewall.org/"><img src="/wiki/public/chrome/common/trac_logo_mini.png" height="30" width="107" alt="Trac Powered" /></a>
      <p class="left">Powered by <a href="/wiki/public/about"><strong>Trac 1.0.13</strong></a><br />
        By <a href="http://www.edgewall.org/">Edgewall Software</a>.</p>
      <p class="right">Visit the Trac open source project at<br /><a href="http://trac.edgewall.org/">http://trac.edgewall.org/</a></p>
    </div>
  </body>
</html>
Mis_redirected¢DtypeEvalueôIhttp_code¢DtypeEvalueÈQdownload_complete¢DtypeEvalueõ