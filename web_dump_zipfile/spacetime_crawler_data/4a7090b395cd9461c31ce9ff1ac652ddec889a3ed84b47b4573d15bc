¦Ifinal_url¡DtypeLhttp_headers¢DtypeEvalue‰¢Ak¢DtypeEvalueNContent-LengthAv¢DtypeEvalueE37225¢Ak¢DtypeEvalueJSet-CookieAv¢DtypeEvalueX°trac_form_token=38fca726590aebdede223d14; httponly; Path=/wiki/public, trac_session=d4a00dbafaac5b994a814970; expires=Thu, 09 May 2019 11:42:41 GMT; httponly; Path=/wiki/public¢Ak¢DtypeEvalueGExpiresAv¢DtypeEvalueXFri, 01 Jan 1999 00:00:00 GMT¢Ak¢DtypeEvalueJKeep-AliveAv¢DtypeEvalueRtimeout=5, max=100¢Ak¢DtypeEvalueFServerAv¢DtypeEvalueX„Apache/2.4.6 (CentOS) OpenSSL/1.0.2k-fips SVN/1.7.14 mod_wsgi/3.4 Python/2.7.5 Phusion_Passenger/4.0.53 mod_perl/2.0.10 Perl/v5.16.3¢Ak¢DtypeEvalueJConnectionAv¢DtypeEvalueJKeep-Alive¢Ak¢DtypeEvalueMCache-ControlAv¢DtypeEvalueOmust-revalidate¢Ak¢DtypeEvalueDDateAv¢DtypeEvalueXFri, 08 Feb 2019 11:42:41 GMT¢Ak¢DtypeEvalueLContent-TypeAv¢DtypeEvalueWtext/html;charset=utf-8Kraw_content¢DtypeEvalueY‘i<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">

    <html xmlns="http://www.w3.org/1999/xhtml">
  
  


  <head>
    <title>
      cs122b-2018-winter-project4 (diff) â€“ Public
    </title>
      <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
      <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <!--[if IE]><script type="text/javascript">
      if (/^#__msie303:/.test(window.location.hash))
        window.location.replace(window.location.hash.replace(/^#__msie303:/, '#'));
    </script><![endif]-->
        <link rel="search" href="/wiki/public/search" />
        <link rel="help" href="/wiki/public/wiki/TracGuide" />
        <link rel="up" href="/wiki/public/wiki/cs122b-2018-winter-project4?action=history" title="Page history" />
        <link rel="next" href="/wiki/public/wiki/cs122b-2018-winter-project4?action=diff&amp;version=7" title="Version 7" />
        <link rel="start" href="/wiki/public/wiki" />
        <link rel="stylesheet" href="/wiki/public/chrome/common/css/trac.css" type="text/css" /><link rel="stylesheet" href="/wiki/public/chrome/common/css/wiki.css" type="text/css" /><link rel="stylesheet" href="/wiki/public/chrome/common/css/diff.css" type="text/css" /><link rel="stylesheet" href="/wiki/public/chrome/tracwysiwyg/wysiwyg.css" type="text/css" />
        <link rel="tracwysiwyg.stylesheet" href="/wiki/public/chrome/common/css/trac.css" /><link rel="tracwysiwyg.stylesheet" href="/wiki/public/chrome/tracwysiwyg/editor.css" />
        <link rel="tracwysiwyg.base" href="/wiki/public" />
        <link rel="prev" href="/wiki/public/wiki/cs122b-2018-winter-project4?action=diff&amp;version=5" title="Version 5" />
        <link rel="shortcut icon" href="/wiki/public/chrome/site/favicon.ico" type="image/x-icon" />
        <link rel="icon" href="/wiki/public/chrome/site/favicon.ico" type="image/x-icon" />
    <style id="trac-noscript" type="text/css">.trac-noscript { display: none !important }</style>
    <script type="text/javascript">
      var _tracwysiwyg={};
    </script>
      <script type="text/javascript" charset="utf-8" src="/wiki/public/chrome/common/js/jquery.js"></script>
      <script type="text/javascript" charset="utf-8" src="/wiki/public/chrome/common/js/babel.js"></script>
      <script type="text/javascript" charset="utf-8" src="/wiki/public/chrome/common/js/trac.js"></script>
      <script type="text/javascript" charset="utf-8" src="/wiki/public/chrome/common/js/search.js"></script>
      <script type="text/javascript" charset="utf-8" src="/wiki/public/chrome/common/js/diff.js"></script>
      <script type="text/javascript" charset="utf-8" src="/wiki/public/chrome/tracwysiwyg/wysiwyg.js"></script>
    <script type="text/javascript">
      jQuery("#trac-noscript").remove();
      jQuery(document).ready(function($) {
        $(".trac-autofocus").focus();
        $(".trac-target-new").attr("target", "_blank");
        setTimeout(function() { $(".trac-scroll").scrollToTop() }, 1);
        $(".trac-disable-on-submit").disableOnSubmit();
      });
    </script>
    <link rel="stylesheet" type="text/css" href="/wiki/public/chrome/common/css/diff.css" />
    <meta name="ROBOTS" content="NOINDEX, NOFOLLOW" />
  </head>
  <body>
    <div id="banner">
      <div id="header">
        <a id="logo" href="http://www.ics.uci.edu/"><img src="/wiki/public/chrome/site/ics.jpg" alt="ICS Logo" height="67" width="128" /></a>
      </div>
      <form id="search" action="/wiki/public/search" method="get">
      </form>
      <div id="metanav" class="nav">
    <ul>
      <li class="first"><a href="/wiki/public/login">Login</a></li><li><a href="/wiki/public/prefs">Preferences</a></li><li class="last"><a href="/wiki/public/about">About Trac</a></li>
    </ul>
  </div>
    </div>
    <div id="mainnav" class="nav">
  </div>
    <div id="main">
      <div id="ctxtnav" class="nav">
        <h2>Context Navigation</h2>
        <ul>
          <li class="first"><span>&larr; <a class="prev" href="/wiki/public/wiki/cs122b-2018-winter-project4?action=diff&amp;version=5" title="Version 5">Previous Change</a></span></li><li><a href="/wiki/public/wiki/cs122b-2018-winter-project4?action=history" title="Page history">Wiki History</a></li><li class="last"><span><a class="next" href="/wiki/public/wiki/cs122b-2018-winter-project4?action=diff&amp;version=7" title="Version 7">Next Change</a> &rarr;</span></li>
        </ul>
        <hr />
      </div>
    <div id="content" class="wiki">
      <h1>
        Changes between
          <a href="/wiki/public/wiki/cs122b-2018-winter-project4?version=5">Version 5</a> and
          <a href="/wiki/public/wiki/cs122b-2018-winter-project4?version=6">Version 6</a> of
          <a href="/wiki/public/wiki/cs122b-2018-winter-project4">cs122b-2018-winter-project4</a>
      </h1>
      <form method="post" id="prefs" action="/wiki/public/wiki/cs122b-2018-winter-project4?version=6"><div><input type="hidden" name="__FORM_TOKEN" value="38fca726590aebdede223d14" /></div>
        <div>
          <input type="hidden" name="action" value="diff" />
          <input type="hidden" name="version" value="6" />
          <input type="hidden" name="old_version" value="5" />
          
  <label for="style">View differences</label>
  <select id="style" name="style">
    <option selected="selected" value="inline">inline</option>
    <option value="sidebyside">side by side</option>
  </select>
  <div class="field">
    <label><input type="radio" name="contextall" value="0" checked="checked" />
             Show</label>
      <label><input type="text" name="contextlines" id="contextlines" size="2" maxlength="3" value="2" />
             lines around each change</label><br />
    <label><input type="radio" name="contextall" value="1" />
           Show the changes in full context</label>
  </div>
  <fieldset id="ignore">
    <legend>Ignore:</legend>
    <div class="field">
      <input type="checkbox" id="ignoreblanklines" name="ignoreblanklines" />
      <label for="ignoreblanklines">Blank lines</label>
    </div>
    <div class="field">
      <input type="checkbox" id="ignorecase" name="ignorecase" />
      <label for="ignorecase">Case changes</label>
    </div>
    <div class="field">
      <input type="checkbox" id="ignorewhitespace" name="ignorewhitespace" />
      <label for="ignorewhitespace">White space changes</label>
    </div>
  </fieldset>
  <div class="buttons">
    <input type="submit" name="update" value="Update" />
  </div>

        </div>
      </form>
      <dl id="overview">
        <dt class="property time">Timestamp:</dt>
        <dd class="time">
            Feb 22, 2018 9:38:06 PM (<a class="timeline" href="/wiki/public/timeline?from=2018-02-22T21%3A38%3A06-08%3A00&amp;precision=second" title="See timeline at Feb 22, 2018 9:38:06 PM">12 months</a> ago)
        </dd>
        <dt class="property author">Author:</dt>
        <dd class="author">
          zuozhi
        </dd>
        <dt class="property message">Comment:</dt>
        <dd class="message">
          
          <p>
--
</p>

        </dd>
      </dl>
      <div class="diff">
        <div class="legend" id="diff-legend">
          <h3>Legend:</h3>
          <dl>
            <dt class="unmod"></dt><dd>Unmodified</dd>
            <dt class="add"></dt><dd>Added</dd>
            <dt class="rem"></dt><dd>Removed</dd>
            <dt class="mod"></dt><dd>Modified</dd>
          </dl>
        </div>
        <div class="diff">
  <ul class="entries">
      <li class="entry">
        <h2 id="file0">
          <a href="/wiki/public/wiki/cs122b-2018-winter-project4?version=6">cs122b-2018-winter-project4</a>
        </h2>
        <table class="trac-diff inline" summary="Differences" cellspacing="0">
              <colgroup><col class="lineno" /><col class="lineno" /><col class="content" /></colgroup>
              <thead>
                <tr>
                  <th title="Version 5">
                    <a href="/wiki/public/wiki/cs122b-2018-winter-project4?version=5#L15">
                      v5</a>
                  </th>
                  <th title="Version 6">
                    <a href="/wiki/public/wiki/cs122b-2018-winter-project4?version=6#L15">
                      v6</a>
                  </th>
                  <td>Â </td>
                </tr>
              </thead>
            <tbody class="unmod">
                  <tr>
                          <th>15</th><th>15</th><td class="l"><span></span></td>
                  </tr><tr>
                          <th>16</th><th>16</th><td class="l"><span>== Task 1: Improving the GUI by using AJAX ==</span></td>
                  </tr>
            </tbody><tbody class="rem">
                  <tr class="last first">
                          <th>17</th><th>Â </th><td class="l"><del>Consider our Project 2, in which we implemented two functionalities: search and movie list add to the shopping cart. A user had to click on a search button after typing some keywords in order to see the search results. Also, on each movie list page, a user had to click on a movie in order to see its details; also, adding to the shopping cart required us to change/refresh the page to see if the cart had been updated.&nbsp; We will improve these features with AJAX.</del></td>
                  </tr>
            </tbody><tbody class="unmod">
                  <tr>
                          <th>18</th><th>17</th><td class="l"><span></span></td>
                  </tr>
            </tbody><tbody class="mod">
                      <tr class="first">
                        <th>19</th><th>Â </th><td class="l"><span>&nbsp;* '''Autocompletion Search:'''</span></td>
                      </tr><tr>
                        <th>20</th><th>Â </th><td class="l"><span></span></td>
                      </tr><tr>
                        <th>21</th><th>Â </th><td class="l"><span>* The "Advanced Search" feature you implemented on project 2, although provides precise search capabilities, is not very user friendly. Most search interfaces in real world websites simply have one input box and can perform search intelligently. Autocomplete feature on the search bar ( auto-suggest, search-as-you-type) is now considered a must-have functionality. A good autocomplete search interface can dramatically improve user experience. In this project, you need to implement a search input box that can search on more things and have the autocomplete feature.</span></td>
                      </tr>
                      <tr class="last">
                        <th>Â </th><th>18</th><td class="r"><span>The "Advanced Search" feature you implemented on project 2, although provides precise search capabilities, is not very user friendly. Most search interfaces in real world websites simply have one input box and can perform search intelligently. Autocomplete feature on the search bar ( auto-suggest, search-as-you-type) is now considered a must-have functionality. A good autocomplete search interface can dramatically improve user experience. In this task, you need to implement a search input box that can search on more things and have the autocomplete feature.</span></td>
                      </tr>
            </tbody><tbody class="unmod">
                  <tr>
                          <th>22</th><th>19</th><td class="l"><span></span></td>
                  </tr><tr>
                          <th>23</th><th>20</th><td class="l"><span></span></td>
                  </tr><tr>
                          <th>24</th><th>21</th><td class="l"><span>'''Search features'''</span></td>
                  </tr><tr>
                          <th>25</th><th>22</th><td class="l"><span></span></td>
                  </tr>
            </tbody><tbody class="mod">
                      <tr class="first">
                        <th>26</th><th>Â </th><td class="l"><span>* <del>The new search requires searching for more than the title field. You should compare the user's query with title, director, and star. </del></span></td>
                      </tr>
                      <tr class="last">
                        <th>Â </th><th>23</th><td class="r"><span>* <ins>Have a search input box into the main page of the website (the page you show to the user after logging in).</ins></span></td>
                      </tr>
            </tbody><tbody class="unmod">
                  <tr>
                          <th>27</th><th>24</th><td class="l"><span></span></td>
                  </tr>
            </tbody><tbody class="mod">
                      <tr class="first">
                        <th>28</th><th>Â </th><td class="l"><span>* <del>You need to tokenize the query string into words by space. For example, the query "good u" is tokenized into two words: "good" and "u". The search results will be all the movie titles that contains the word that starts with "good" and starts with "u". For example, "The Good, The Bad and The Ugly", and "Goodbye Uncle Tom"</del></span></td>
                      </tr>
                      <tr class="last">
                        <th>Â </th><th>25</th><td class="r"><span>* <ins>This search box should search for more than the title field. You should compare the user's query against title, director, and star. </ins></span></td>
                      </tr>
            </tbody><tbody class="unmod">
                  <tr>
                          <th>29</th><th>26</th><td class="l"><span></span></td>
                  </tr>
            </tbody><tbody class="mod">
                      <tr class="first">
                        <th>30</th><th>Â </th><td class="l"><span>* (TODO: discuss if fuzzy search is possible on name field. Since we don't have separate first name and last name field, the edit distance of typing only first name or last name might be too large)</span></td>
                      </tr>
                      <tr>
                        <th>Â </th><th>27</th><td class="r"><span>* You need to do full text prefix search. For example, the query "good u" is first tokenized into two words: "good" and "u". The search results will be all the movie titles that contains the word that starts with "good" and starts with "u". For example, "The Good, The Bad and The Ugly", and "Goodbye Uncle Tom".&nbsp; Check the Netflix screenshot as an example of full text search.</span></td>
                      </tr><tr>
                        <th>Â </th><th>28</th><td class="r"><span></span></td>
                      </tr><tr>
                        <th>Â </th><th>29</th><td class="r"><span>* You should jump to the movie list page to display the search results.</span></td>
                      </tr><tr>
                        <th>Â </th><th>30</th><td class="r"><span></span></td>
                      </tr><tr class="last">
                        <th>Â </th><th>31</th><td class="r"><span>* For example, the query "logan" should return a list of movies that where either: 1) title contains "logan" or 2) the director is "logan" or 3) one of the actors is called "logan".</span></td>
                      </tr>
            </tbody><tbody class="unmod">
                  <tr>
                          <th>31</th><th>32</th><td class="l"><span></span></td>
                  </tr><tr>
                          <th>32</th><th>33</th><td class="l"><span></span></td>
                  </tr><tr>
                          <th>33</th><th>34</th><td class="l"><span>'''Autocomplete suggestion:'''</span></td>
                  </tr><tr>
                          <th>34</th><th>35</th><td class="l"><span></span></td>
                  </tr>
            </tbody><tbody class="mod">
                      <tr class="first">
                        <th>35</th><th>Â </th><td class="l"><span>* As the user types in the query in the search box, your Javascript code should send the query to the backend server to get a list of suggested results, and then display the suggestions in the dropdown list. </span></td>
                      </tr><tr>
                        <th>36</th><th>Â </th><td class="l"><span></span></td>
                      </tr><tr>
                        <th>37</th><th>Â </th><td class="l"><span>It's very important for software engineers to find the right tool to use instead of reinventing the wheel. We recommend you to use a Javascript autocomplete library instead of implementing the autocomplete .</span></td>
                      </tr><tr>
                        <th>38</th><th>Â </th><td class="l"><span></span></td>
                      </tr><tr>
                        <th>39</th><th>Â </th><td class="l"><span>We provide a sample autocomplete code using a library (TODO: write sample code). But learning and using a different library worthes x points(TODO: determine how man points for using other library).</span></td>
                      </tr><tr>
                        <th>40</th><th>Â </th><td class="l"><span></span></td>
                      </tr><tr>
                        <th>41</th><th>Â </th><td class="l"><span>Here are some recommended popular libraries. You can also use any library you like that is not on the list.</span></td>
                      </tr><tr>
                        <th>42</th><th>Â </th><td class="l"><span>-- TODO: add libraries</span></td>
                      </tr>
                      <tr class="last">
                        <th>Â </th><th>36</th><td class="r"><span>As the user types in the query in the search box, your Javascript code should send the query to the backend server to get a list of suggested results, and then display the suggestions in the dropdown list. Check the IMDB and Rotten Tomatoes search interface for examples.</span></td>
                      </tr>
            </tbody><tbody class="unmod">
                  <tr>
                          <th>43</th><th>37</th><td class="l"><span></span></td>
                  </tr><tr>
                          <th>44</th><th>38</th><td class="l"><span></span></td>
                  </tr>
            </tbody><tbody class="rem">
                  <tr class="last first">
                          <th>45</th><th>Â </th><td class="l"><del>'''Specific Requirements:'''</del></td>
                  </tr>
            </tbody><tbody class="unmod">
                  <tr>
                          <th>46</th><th>39</th><td class="l"><span></span></td>
                  </tr>
            </tbody><tbody class="mod">
                      <tr class="first">
                        <th>47</th><th>Â </th><td class="l"><span>(The autocomplete libraries can just satisfy the requirements or provide you a very easy way to meet the requirement)</span></td>
                      </tr>
                      <tr class="last">
                        <th>Â </th><th>40</th><td class="r"><span>We recommend you to use a Javascript autocomplete library instead of implementing the autocomplete on your own. We provide a sample autocomplete code using a library (TODO: write sample code). </span></td>
                      </tr>
            </tbody><tbody class="unmod">
                  <tr>
                          <th>48</th><th>41</th><td class="l"><span></span></td>
                  </tr>
            </tbody><tbody class="add">
                  <tr class="last first">
                          <th>Â </th><th>42</th><td class="r"><ins>The autocomplete libraries can just satisfy the requirements or provide you a very easy way to meet the requirements:</ins></td>
                  </tr>
            </tbody><tbody class="unmod">
                  <tr>
                          <th>49</th><th>43</th><td class="l"><span></span></td>
                  </tr>
            </tbody><tbody class="rem">
                  <tr class="last first">
                          <th>50</th><th>Â </th><td class="l"><del>* The autocomplete suggestion list should not have more than 10 items.</del></td>
                  </tr>
            </tbody><tbody class="unmod">
                  <tr>
                          <th>51</th><th>44</th><td class="l"><span></span></td>
                  </tr><tr>
                          <th>52</th><th>45</th><td class="l"><span>* The user should be able to navigate the suggestions in dropdown list using up and down arrow keys on the keyboard. During this process, when a suggested item is selected, the item should be highlighted, the text in the input box should be changed to the item's name.</span></td>
                  </tr><tr>
                          <th>53</th><th>46</th><td class="l"><span></span></td>
                  </tr><tr>
                          <th>54</th><th>47</th><td class="l"><span>* Your autocomplete suggestion list need to be grouped in to 3 categories: movies, stars, and directors. See how Rotten Tomatoes search divided the suggestions into different groups (movies, celebrities, etc..): https://www.rottentomatoes.com/. You can also not group them explicitly, but indicate clearly on each item instead. See how IMDB search suggestion list shows each item as a movie or as an actor. http://www.imdb.com/</span></td>
                  </tr>
            </tbody><tbody class="add">
                  <tr class="first">
                          <th>Â </th><th>48</th><td class="r"><ins></ins></td>
                  </tr><tr class="last">
                          <th>Â </th><th>49</th><td class="r"><ins>* The autocomplete suggestion list should not have more than 10 items (the total number of items from all 3 categories). </ins></td>
                  </tr>
            </tbody><tbody class="unmod">
                  <tr>
                          <th>55</th><th>50</th><td class="l"><span></span></td>
                  </tr><tr>
                          <th>56</th><th>51</th><td class="l"><span>* Clicking on any of the suggestion items, or pressing "Enter" when a item is selected during keyboard navigation, should jump to:</span></td>
                  </tr>
            </tbody>
              <tbody class="skipped">
                <tr>
                  <th><a href="/wiki/public/wiki/cs122b-2018-winter-project4?version=5#L61">â€¦</a></th>
                  <th><a href="/wiki/public/wiki/cs122b-2018-winter-project4?version=6#L56">â€¦</a></th>
                  <td>Â </td>
                </tr>
              </tbody>
            <tbody class="unmod">
                  <tr>
                          <th>61</th><th>56</th><td class="l"><span>* If the user doesn't choose any of the suggestions using keyboard, and just hits "Enter" on keyboard or clicks the search button, you should do the search normally as stated above and go to the movie list page.</span></td>
                  </tr><tr>
                          <th>62</th><th>57</th><td class="l"><span></span></td>
                  </tr>
            </tbody><tbody class="rem">
                  <tr class="last first">
                          <th>63</th><th>Â </th><td class="l"><del></del></td>
                  </tr>
            </tbody><tbody class="unmod">
                  <tr>
                          <th>64</th><th>58</th><td class="l"><span>* When the user types only one or two characters, you should not do any search because the results may not be helpful. You should only perform the autocomplete search when the user types in &gt;= 3 characters.</span></td>
                  </tr><tr>
                          <th>65</th><th>59</th><td class="l"><span></span></td>
                  </tr>
            </tbody>
              <tbody class="skipped">
                <tr>
                  <th><a href="/wiki/public/wiki/cs122b-2018-winter-project4?version=5#L68">â€¦</a></th>
                  <th><a href="/wiki/public/wiki/cs122b-2018-winter-project4?version=6#L62">â€¦</a></th>
                  <td>Â </td>
                </tr>
              </tbody>
            <tbody class="unmod">
                  <tr>
                          <th>68</th><th>62</th><td class="l"><span>* If the autocomplete query has been issued before, you don't want to send the request to the server again. (for example, when the user deletes some of the characters). Store the suggestion list of each query in Javascript. Everytime before your code need to do autocomplete search, first check if you can the stored suggestions, if not, then send the query to the server.</span></td>
                  </tr><tr>
                          <th>69</th><th>63</th><td class="l"><span></span></td>
                  </tr>
            </tbody><tbody class="mod">
                      <tr class="first">
                        <th>70</th><th>Â </th><td class="l"><span>* Since we limit the suggestion list to a max of 10 items, it is important to show users the most relevant items. Implement a ranking method to reasonable rank the most relevant search results.</span></td>
                      </tr><tr>
                        <th>71</th><th>Â </th><td class="l"><span></span></td>
                      </tr><tr>
                        <th>72</th><th>Â </th><td class="l"><span>* Your autocomplete search needs to be fast. The time that user sees your autocomplete result is the delay time + the query time. It's not user friendly if your autocomplete search takes too long.</span></td>
                      </tr>
                      <tr class="last">
                        <th>Â </th><th>64</th><td class="r"><span>* Your autocomplete search needs to be fast. The time that user sees your autocomplete result is the delay time + the query time. Some points will be deducted if your autocomplete search takes too long.</span></td>
                      </tr>
            </tbody><tbody class="unmod">
                  <tr>
                          <th>73</th><th>65</th><td class="l"><span></span></td>
                  </tr><tr>
                          <th>74</th><th>66</th><td class="l"><span></span></td>
                  </tr>
            </tbody><tbody class="mod">
                      <tr class="first">
                        <th>75</th><th>Â </th><td class="l"><span>* <del>Print to the Javascript console:</del></span></td>
                      </tr>
                      <tr class="last">
                        <th>Â </th><th>67</th><td class="r"><span>* <ins>'''Print to the Javascript console:'''</ins></span></td>
                      </tr>
            </tbody><tbody class="unmod">
                  <tr>
                          <th>76</th><th>68</th><td class="l"><span>&nbsp; * In order to verify that your code satisfies the constraints, you need to print messages to the Javascript console. In Javascript, "console.log()" is equivalent to "System.out.println()". To see the printed messages, in Chrome, open your webpage -&gt; right click "Inspect", then choose "Console" tab. All popular browsers have something similar, look for "Developer Tools".</span></td>
                  </tr><tr>
                          <th>77</th><th>69</th><td class="l"><span></span></td>
                  </tr>
            </tbody>
              <tbody class="skipped">
                <tr>
                  <th><a href="/wiki/public/wiki/cs122b-2018-winter-project4?version=5#L122">â€¦</a></th>
                  <th><a href="/wiki/public/wiki/cs122b-2018-winter-project4?version=6#L114">â€¦</a></th>
                  <td>Â </td>
                </tr>
              </tbody>
            <tbody class="unmod">
                  <tr>
                          <th>122</th><th>114</th><td class="l"><span></span></td>
                  </tr><tr>
                          <th>123</th><th>115</th><td class="l"><span>&nbsp;* Login page, which should behave like the website login page, ''without'' the reCAPTCHA feature.</span></td>
                  </tr>
            </tbody><tbody class="mod">
                      <tr class="first">
                        <th>124</th><th>Â </th><td class="l"><span>&nbsp;* A search box that <del>supports full-text search on the movie "title" attribute. The search results page can be as simple as a list of movie titles.</del></span></td>
                      </tr>
                      <tr class="last">
                        <th>Â </th><th>116</th><td class="r"><span>&nbsp;* A search box that <ins>has the same behavior as the the searching requirement in task 1 (searching in title, directors, and stars).&nbsp; </ins></span></td>
                      </tr>
            </tbody><tbody class="unmod">
                  <tr>
                          <th>125</th><th>117</th><td class="l"><span>&nbsp;* Your app should continue to work correctly (e.g., by keeping the content in those input boxes) after the following events:</span></td>
                  </tr><tr>
                          <th>126</th><th>118</th><td class="l"><span>&nbsp; &nbsp;* Pressing the home and the back buttons, and</span></td>
                  </tr><tr>
                          <th>127</th><th>119</th><td class="l"><span>&nbsp; &nbsp;* Turning the screen on and off.</span></td>
                  </tr><tr>
                          <th>128</th><th>120</th><td class="l"><span>* Pagination on the search result list. "Previous" and "Next" buttons are required, and the page size can be constant.</span></td>
                  </tr>
            </tbody><tbody class="add">
                  <tr class="last first">
                          <th>Â </th><th>121</th><td class="r"><ins></ins></td>
                  </tr>
            </tbody><tbody class="unmod">
                  <tr>
                          <th>129</th><th>122</th><td class="l"><span>----</span></td>
                  </tr><tr>
                          <th>130</th><th>123</th><td class="l"><span>[[Span(id=UDF)]]</span></td>
                  </tr><tr>
                          <th>131</th><th>124</th><td class="l"><span></span></td>
                  </tr>
            </tbody><tbody class="mod">
                      <tr class="first">
                        <th>132</th><th>Â </th><td class="l"><span>== Task 3 (Optional<del></del>): Fuzzy Searching Using User Defined Functions ==</span></td>
                      </tr><tr>
                        <th>133</th><th>Â </th><td class="l"><span>Currently, when a !FabFlix&nbsp; customer is searching for a movie by its title, director or (one of)&nbsp; its stars (that is, searching via a "key" value), the user must spell <del>&nbsp;that key correctly; otherwise, the desired movie will not be retrieved. </del> For example, some stars' names, such as "Schwarzenegger," are&nbsp; sufficiently difficult to spell that customers are likely to spell them&nbsp; incorrectly--and so perhaps believe we do not stock the Terminator&nbsp; movies when, in fact, we do!</span></td>
                      </tr>
                      <tr>
                        <th>Â </th><th>125</th><td class="r"><span>== Task 3 (Optional<ins>&nbsp;Extra Credit</ins>): Fuzzy Searching Using User Defined Functions ==</span></td>
                      </tr><tr class="last">
                        <th>Â </th><th>126</th><td class="r"><span>Currently, when a !FabFlix&nbsp; customer is searching for a movie by its title, director or (one of)&nbsp; its stars (that is, searching via a "key" value), the user must spell <ins>that key correctly; otherwise, the desired movie will not be retrieved.</ins> For example, some stars' names, such as "Schwarzenegger," are&nbsp; sufficiently difficult to spell that customers are likely to spell them&nbsp; incorrectly--and so perhaps believe we do not stock the Terminator&nbsp; movies when, in fact, we do!</span></td>
                      </tr>
            </tbody><tbody class="unmod">
                  <tr>
                          <th>134</th><th>127</th><td class="l"><span></span></td>
                  </tr><tr>
                          <th>135</th><th>128</th><td class="l"><span>To make it more likely that customers&nbsp; find the movies they desire--and thus increase our likelihood of making&nbsp; sales--the exact string matching in !FabFlix for key searches is to be replaced with a fuzzy matching, one that returns a movie whose value is close to the key's value.</span></td>
                  </tr>
            </tbody>
              <tbody class="skipped">
                <tr>
                  <th><a href="/wiki/public/wiki/cs122b-2018-winter-project4?version=5#L137">â€¦</a></th>
                  <th><a href="/wiki/public/wiki/cs122b-2018-winter-project4?version=6#L130">â€¦</a></th>
                  <td>Â </td>
                </tr>
              </tbody>
            <tbody class="unmod">
                  <tr>
                          <th>137</th><th>130</th><td class="l"><span>The designers have decided that using the SQL LIKE command combined with an&nbsp; Levenshtein (Edit Distance) Algorithm (LEDA) is the approach to take.</span></td>
                  </tr><tr>
                          <th>138</th><th>131</th><td class="l"><span></span></td>
                  </tr>
            </tbody><tbody class="mod">
                      <tr class="first">
                        <th>139</th><th>Â </th><td class="l"><span>The <del>&nbsp;</del>LEDA algorithm, to be implemented as a dynamic function in C or C++, is&nbsp; to be accessed using the interface SIMILARTO. SIMILARTO takes three&nbsp; parameters: the first is the key as a string, the second the string&nbsp; against which the key is being compared, the third the maximum distance&nbsp; he two strings can differ and still be considered similar to each other.&nbsp; Take the union of the results from LIKE and SIMILARTO.</span></td>
                      </tr>
                      <tr class="last">
                        <th>Â </th><th>132</th><td class="r"><span>The <ins></ins>LEDA algorithm, to be implemented as a dynamic function in C or C++, is&nbsp; to be accessed using the interface SIMILARTO. SIMILARTO takes three&nbsp; parameters: the first is the key as a string, the second the string&nbsp; against which the key is being compared, the third the maximum distance&nbsp; he two strings can differ and still be considered similar to each other.&nbsp; Take the union of the results from LIKE and SIMILARTO.</span></td>
                      </tr>
            </tbody><tbody class="unmod">
                  <tr>
                          <th>140</th><th>133</th><td class="l"><span></span></td>
                  </tr><tr>
                          <th>141</th><th>134</th><td class="l"><span>lastName LIKE '%Schwarseneger%' OR SIMILARTO(lastName, 'Schwarseneger', 2)</span></td>
                  </tr><tr>
                          <th>142</th><th>135</th><td class="l"><span></span></td>
                  </tr>
            </tbody><tbody class="mod">
                      <tr class="first">
                        <th>143</th><th>Â </th><td class="l"><span><del>Add&nbsp; the fuzzy search feature in the web application of project 2. The user&nbsp; should be able to search with either the LIKE operator or the SIMILARTO&nbsp; operator with a given edit distance</del>. Feel free to use the User Defined Functions (described above) from this [http://flamingo.ics.uci.edu/toolkit/ example].</span></td>
                      </tr>
                      <tr class="last">
                        <th>Â </th><th>136</th><td class="r"><span><ins>We will give 10 point extra credits if you: successfully implement this feature on your AWS instance AND integrate fuzzy search into the searching functionality in task 1 and 2. Your search results should combine the full text search and fuzzy search</ins>. Feel free to use the User Defined Functions (described above) from this [http://flamingo.ics.uci.edu/toolkit/ example].</span></td>
                      </tr>
            </tbody><tbody class="unmod">
                  <tr>
                          <th>144</th><th>137</th><td class="l"><span></span></td>
                  </tr>
            </tbody><tbody class="rem">
                  <tr class="last first">
                          <th>145</th><th>Â </th><td class="l"><del>'''We will give you 5 points&nbsp; as extra credits for successfully implementing this feature on your AWS instance.'''</del></td>
                  </tr>
            </tbody><tbody class="unmod">
                  <tr>
                          <th>146</th><th>138</th><td class="l"><span></span></td>
                  </tr><tr>
                          <th>147</th><th>139</th><td class="l"><span>----</span></td>
                  </tr>
            </tbody>
        </table>
      </li>
  </ul>
</div>
      </div>
  </div>
    </div>
    <div id="footer" lang="en" xml:lang="en"><hr />
      <a id="tracpowered" href="http://trac.edgewall.org/"><img src="/wiki/public/chrome/common/trac_logo_mini.png" height="30" width="107" alt="Trac Powered" /></a>
      <p class="left">Powered by <a href="/wiki/public/about"><strong>Trac 1.0.13</strong></a><br />
        By <a href="http://www.edgewall.org/">Edgewall Software</a>.</p>
      <p class="right">Visit the Trac open source project at<br /><a href="http://trac.edgewall.org/">http://trac.edgewall.org/</a></p>
    </div>
  </body>
</html>
Mis_redirected¢DtypeEvalueôIhttp_code¢DtypeEvalueÈQdownload_complete¢DtypeEvalueõ