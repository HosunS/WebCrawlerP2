¦Ifinal_url¡DtypeLhttp_headers¢DtypeEvalue‰¢Ak¢DtypeEvalueNContent-LengthAv¢DtypeEvalueD1110¢Ak¢DtypeEvaluePContent-EncodingAv¢DtypeEvalueDgzip¢Ak¢DtypeEvalueMAccept-RangesAv¢DtypeEvalueEbytes¢Ak¢DtypeEvalueDVaryAv¢DtypeEvalueOAccept-Encoding¢Ak¢DtypeEvalueFServerAv¢DtypeEvalueX4Apache/2.4.6 (CentOS) OpenSSL/1.0.2k-fips SVN/1.7.14¢Ak¢DtypeEvalueMLast-ModifiedAv¢DtypeEvalueXThu, 06 Apr 2017 21:06:27 GMT¢Ak¢DtypeEvalueDETagAv¢DtypeEvalueX"877-54c85e1dae3fb-gzip"¢Ak¢DtypeEvalueDDateAv¢DtypeEvalueXThu, 31 Jan 2019 03:00:25 GMT¢Ak¢DtypeEvalueLContent-TypeAv¢DtypeEvalueXtext/html; charset=UTF-8Kraw_content¢DtypeEvalueYw<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01//EN">
<html>
<head>
<title>CompSci 263, Spring 2014, Homework 8</title>
<meta name="viewport" content="width=device-width, initial-scale=1">
<script type="text/x-mathjax-config">
MathJax.Hub.Config({
  tex2jax: {inlineMath: [['$','$'], ['\\(','\\)']]}
});
</script>
<script type="text/javascript"
  src="//cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js?config=TeX-AMS-MML_HTMLorMML">
</script>
</head>
<body>
<h1>CS 263, Spring 2014, Homework 8</h1>
<h2>Due at the start of class, Thursday, May 29</h2>

<ol>
<li><p>A <i>dominating set</i> in a graph is a subset $D$ of the vertices such that every vertex in the graph either belongs to $D$ or is adjacent to $D$. Use backtracking to show that, in graphs with maximum degree three, a dominating set of $k$ vertices (if one exists) can be found in fixed-parameter-tractable time.</p></li>
<li><p>A <i>complete bipartite cover</i> of a graph $G$ is a collection of complete bipartite subgraphs of $G$ that together include every edge in $G$. The <i>size</i> of a complete bipartite cover is the number of complete bipartite subgraphs in it. Use kernelization to show that finding a complete bipartite cover of size $k$ (if one exists) is fixed-parameter tractable.</p></li>
<li><p>An algorithm is defined to be fixed-parameter tractable if its running time is $O(f(k)p(n))$ where $n$ is the input size, $k$ is the additional parameter we're using to analyze the algorithm, $p$ is a polynomial that does not depend on $k$, and $f$ is an arbitrary (computable) function. Define an algorithm to be <i>strongly fixed-parameter tractable</i> if its running time is instead $O(f(k)+p(n))$ for a (possibly different) computable function $f$ and polynomial $p$. Show that every fixed-parameter tractable algorithm is strongly fixed-parameter tractable.</p></li>
<li><p>In class we analyzed the time for finding $k$-vertex paths, using color-coding with $k$ colors, as
$$O(\frac{k^k}{k!}2^k(n+m)).$$
Suppose we use $k+1$ colors instead of $k$ colors. Would the time be slower or faster, and by how much?</p></li>
</ol>
</body>
</html>
Mis_redirected¢DtypeEvalueôIhttp_code¢DtypeEvalueÈQdownload_complete¢DtypeEvalueõ