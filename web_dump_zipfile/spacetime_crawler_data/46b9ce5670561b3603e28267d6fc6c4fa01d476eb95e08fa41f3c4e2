¦Ifinal_url¡DtypeLhttp_headers¢DtypeEvalue‡¢Ak¢DtypeEvalueNContent-LengthAv¢DtypeEvalueD3117¢Ak¢DtypeEvalueMAccept-RangesAv¢DtypeEvalueEbytes¢Ak¢DtypeEvalueFServerAv¢DtypeEvalueX„Apache/2.4.6 (CentOS) OpenSSL/1.0.2k-fips SVN/1.7.14 mod_wsgi/3.4 Python/2.7.5 Phusion_Passenger/4.0.53 mod_perl/2.0.10 Perl/v5.16.3¢Ak¢DtypeEvalueMLast-ModifiedAv¢DtypeEvalueXWed, 17 Apr 2013 01:54:07 GMT¢Ak¢DtypeEvalueDETagAv¢DtypeEvalueS"c2d-4da84c2e26dc0"¢Ak¢DtypeEvalueDDateAv¢DtypeEvalueXFri, 08 Feb 2019 01:16:49 GMT¢Ak¢DtypeEvalueLContent-TypeAv¢DtypeEvalueXtext/plain; charset=UTF-8Kraw_content¢DtypeEvalueY-/*  
 $Id: example.cc 4025 2008-10-01 00:01:14Z abehm $   

 Copyright (C) 2007 by The Regents of the University of California
 	
 Redistribution of this file is permitted under the terms of the BSD license

 Date: 02/05/2008
 Author: Jiaheng Lu
 */

 
#include <fstream>
#include <iostream>
#include <vector>

#include "listmerger.h"
#include "divideskipmerger.h"
#include "heapmerger.h"
#include "mergeoptmerger.h"
#include "mergeskipmerger.h"
#include "mergeskipplusmerger.h"
#include "scancountmerger.h"
#include "mergeskiptest.h"
#include "showutil.h"
#include "util/array.h"

using namespace std;

void example1()
{
  cout << "Example 1: merge lists without duplicate" << endl;
 
  Array<unsigned> list1;
  list1.append(1);
  list1.append(5);
  list1.append(8);

  Array<unsigned> list2;
  list2.append(3);
  list2.append(4);
  list2.append(5);

  Array<unsigned> list3;
  list3.append(8);
  list3.append(10);
  list3.append(13);
  list3.append(15);

  Array<unsigned> list4;
  list4.append(8);
  list4.append(10);
  list4.append(13);
  list4.append(15);


  vector<Array<unsigned>*> lists;
  lists.push_back(&list1);
  lists.push_back(&list3);
  lists.push_back(&list2); 
  lists.push_back(&list4);

  const unsigned threshold = 2;

  cout<< "Merging threshold is " << threshold << endl;

  vector<unsigned> result;

  
  //ListsMerger *mergeLists = new HeapMerger();
  //ListsMerger *mergeLists = new MergeOptMerger();
  //set max reord ID as the maxmal unsigned integer
  //ListsMerger *mergeLists = new ScanCountMerger(9999999);
  //ListsMerger *mergeLists = new MergeSkipMerger();  
  DivideSkipMerger<> *mergeLists = new DivideSkipMerger<>();  
  //ListsMerger *mergeLists = new MergeSkipPlusMerger();  

  mergeLists->merge(lists, threshold, result);

  cout<<"Results size is "<<result.size()<<endl;

}//end example1


void example2()
{
  cout << "Example 2: merge lists with duplicate" << endl;
 
  Array<unsigned> list1;
  list1.append(1);
  list1.append(5);
  list1.append(8);

  Array<unsigned> list2;
  list2.append(3);
  list2.append(4);
  list2.append(5);

  Array<unsigned> list3;
  list3.append(8);
  list3.append(10);
  list3.append(13);
  list3.append(15);

  Array<unsigned> list4;
  list4.append(8);
  list4.append(10);
  list4.append(13);
  list4.append(15);


  vector<Array<unsigned>*> lists;
  lists.push_back(&list1);
  lists.push_back(&list1);
  lists.push_back(&list2); 
  lists.push_back(&list3);
  lists.push_back(&list3);
  lists.push_back(&list3);
  lists.push_back(&list4);
  lists.push_back(&list4);


  const unsigned threshold = 5;

  cout<< "Merging threshold is " << threshold << endl;

  vector<unsigned> result;

  
  //set max reord ID as the maxmal unsigned integer
  //ListsMerger *mergeLists = new ScanCountMerger(9999999);
  DivideSkipMerger<> *mergeLists = new DivideSkipMerger<>(true);  
 
  mergeLists->merge(lists, threshold, result);

  cout<<"Results size is "<<result.size()<<endl;

}//end example2

int main() 
{
  
  //Example 1: merge lists without any duplicate
  
  example1();
  
  //Example 2: merge lists with duplicate
  
  example2();


}//end main
Mis_redirected¢DtypeEvalueôIhttp_code¢DtypeEvalueÈQdownload_complete¢DtypeEvalueõ