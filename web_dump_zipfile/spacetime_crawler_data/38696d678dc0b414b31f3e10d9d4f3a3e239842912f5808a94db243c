¦Ifinal_url¡DtypeLhttp_headers¢DtypeEvalue‡¢Ak¢DtypeEvalueNContent-LengthAv¢DtypeEvalueD3447¢Ak¢DtypeEvalueMAccept-RangesAv¢DtypeEvalueEbytes¢Ak¢DtypeEvalueFServerAv¢DtypeEvalueX4Apache/2.4.6 (CentOS) OpenSSL/1.0.2k-fips SVN/1.7.14¢Ak¢DtypeEvalueMLast-ModifiedAv¢DtypeEvalueXFri, 04 May 2018 20:10:31 GMT¢Ak¢DtypeEvalueDETagAv¢DtypeEvalueS"d77-56b66e97bb4a0"¢Ak¢DtypeEvalueDDateAv¢DtypeEvalueXWed, 30 Jan 2019 20:10:31 GMT¢Ak¢DtypeEvalueLContent-TypeAv¢DtypeEvalueXtext/plain; charset=UTF-8Kraw_content¢DtypeEvalueYwThe following is a list of all the material that we have covered this quarter.
It is very large, and with 8 questions over 110 minutes on the midterm, I will
be able to cover just a small fraction of it all. My goal is to cover the most
important material: material important enough to have been covered on quizzes 
and in programs. This is not a guarantee of what will/won't be on the exam, but
an indication of what is typically on midterm exams.

			Material Covered/Midterm


Week 1) Review/Extension
  data types: list (sorting), tuple/named-tuple, set/frozenset, dict/defaultdict
  iterators : iterating over sorted/reversed data; 3 ways to iterate over dicts
  importing: forms and meanings
  construction on iterable data
  comprehensions
  function calls: argument/parameter binding options; *args/**kargs
  important functions: split/join, all/any, sum/min/max, zip/enumerate
  lambdas
  sharing vs copying
  raising exceptions and exception/handling with try/except
  classes (__dict__ for object name spaces)

Week 2) Text Patterns
  reading files
    standard iteration (and variations with readlines and read)
    calling rstrip and split
    a special function for parsing lines (it uses generators, covered week 4)
  EBNF
    Forms of rules
    Meaning of sequence, option [], alternative |, and repetition
    Determining whether strings match descriptions
    Synthesizing descriptions from example
  regular expressions
    elements of the matching language (e.g., what [], {}, |, ?, +, *, etc. mean)
    re functions: match, search, sub, split, compile
    specifying/extracting groups (numbered and named) after matching
    re methods on match objects: mostly group (by number/name) and groupdict

Week 3) Classes
  how state and methods are stored in an object's namespace (using __dict__)
  the Fundamental Equation of Object Oriented Programming
  the meaning of _ and __ prefixes in names
  operator overloading via method definition
    misc: __init__, __len__, __bool__, __str__/__repr__
    unary: +, -, abs
    general relational and arithmetic:
      how are translated, evaluated (incl. further attempts when type problems)
    container: __getitem__, __setitem__, __delitem__, __contains__
    function call: __call__
    iterators: __iter__, __next__
    attribute: __getattr__, __setattr__, __delattr__, (ignore __getattribute__)
    context managers: __enter__, __exit__

Week 4) Iterators
  how iterators work
    translating for loops into while loops with explicit calls to iter/next
  general review of use/illustrations of how to write some builtin (prange)
  implementation of iterators with simple nested classes
  generators
    implementation of iterators with generators
      space efficiency (iterating over many value without storing them all)
  decorators for iterators using generators: e.g., repeat, unique, filter 
     decorated is an iterable; decorator produces an iterable

Week 5) Recursive and Functional Programming
  recursive programming for standard Python data structures: int, string, list
    recurring on multiple parameters
  proof rules and their application to write/prove code correct
  map/filter/reduce (+ lambdas)
  accumulation and tail recursion
  the minimum number of stamps problem
  decorators for things called
    special @ syntax
    examples: Track_Calls, Memoize, Illustrate_Recursive

Mis_redirected¢DtypeEvalueôIhttp_code¢DtypeEvalueÈQdownload_complete¢DtypeEvalueõ