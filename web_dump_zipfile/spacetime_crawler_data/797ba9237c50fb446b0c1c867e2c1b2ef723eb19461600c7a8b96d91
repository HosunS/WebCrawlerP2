¦Ifinal_url¢DtypeEvaluex>https://www.ics.uci.edu/~thornton/ics65/ProjectGuide/Project1/Lhttp_headers¢DtypeEvalue‡¢Ak¢DtypeEvalueNContent-LengthAv¢DtypeEvalueE20960¢Ak¢DtypeEvalueMAccept-RangesAv¢DtypeEvalueEbytes¢Ak¢DtypeEvalueFServerAv¢DtypeEvalueX4Apache/2.4.6 (CentOS) OpenSSL/1.0.2k-fips SVN/1.7.14¢Ak¢DtypeEvalueMLast-ModifiedAv¢DtypeEvalueXThu, 15 Nov 2012 10:12:26 GMT¢Ak¢DtypeEvalueDETagAv¢DtypeEvalueT"51e0-4ce85e3489680"¢Ak¢DtypeEvalueDDateAv¢DtypeEvalueXFri, 01 Feb 2019 02:55:43 GMT¢Ak¢DtypeEvalueLContent-TypeAv¢DtypeEvalueXtext/html; charset=UTF-8Kraw_content¢DtypeEvalueYQà<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE html PUBLIC
 "-//W3C//DTD XHTML 1.1//EN"
 "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">

<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en">

<head>
<meta http-equiv="content-type" content="text/html; charset=iso-8859-1" />
<link rel="stylesheet" href="../../course.css" type="text/css" />

<title>ICS 65 Fall 2012, Project #1: Letter Never Sent</title>
</head>

<body>

<div class="navbar">

<p>
ICS 65 Fall 2012 |
<a href="../../index.html">News</a> |
<a href="../../CourseReference.html">Course Reference</a> |
<a href="../../Schedule.html">Schedule</a> |
<a href="../../ProjectGuide">Project Guide</a> |
<a href="../../CodeExamples">Code Examples</a> |
<a href="http://www.ics.uci.edu/~thornton/">About Alex</a>
</p>

<hr />

</div>

<div class="header">

<p>ICS 65 Fall 2012<br />
   Project #1: <i>Letter Never Sent</i></p>
   
</div>

<div class="section">

<p class="center"><b>Due date and time:</b> <i>Wednesday, October 24, 11:59pm</i></p>

</div>

<div class="section">

<hr />

<p class="title">Introduction</p>

<p>Over my years of teaching, I've become quite fond of a grading scale that I jokingly refer to as the "Whatever I Want" scale.  Of course, it's not quite as open-ended as my glib joke about it; it's a fair scale in the sense that any two students who perform at a particular level will receive the same grade &mdash; though it is neither a straight scale nor a curve, requiring me instead to decide, at the end of the quarter, where to set <i>cutpoints</i> that divide students who receive one grade from students who receive another.  This is the grading scale that I'll employ at the end of the quarter in this course.</p>

<p>This project asks you to write a utility program that is given input via the console describing the set of graded artifacts for a course, the students enrolled in the course, and their scores on the various artifacts.  Additionally, it is given a sequence of <i>cutpoint sets</i> describing the cutpoints (i.e., the number of total points necessary) dividing various grade levels.  The program's output is twofold: the <i>total score</i> received by each student in the course and, for each cutpoint set, final course grades for each student.</p>

<p>Not surprisingly, you will need to write the program in C++, though there are some fairly heavy restrictions on what parts of C++ you're permitted to use, as we're still early in the process of learning it and I'd like you to gain some experience with some of the lower-level abstractions (most notably arrays, <b>new</b>, <b>delete</b>, and <b>delete[ ]</b>) before we layer less error-prone abstractions on top of them.  Our goal in the early part of this course is to develop an understanding of what is happening behind the scenes in a C++ program, and it's impossible to develop this understanding if you sit at too high of a level of abstraction.</p>

</div>

<div class="section">

<hr />

<p class="title">Getting started</p>

<p>It's not a bad idea to start by reading the <a href="../VisualStudioTutorial.html">Visual Studio 2012 tutorial</a>, if you haven't already, and to use the <a href="../65Solution.zip">pre-built ICS 65 Visual Studio 2012 solution</a> as the starting point for each of your projects, as it's been set up to accommodate a properly-configured C++ console application compatible with our work this quarter.</p>

</div>

<div class="section">

<hr />

<p class="title">The input</p>

<p>The program's input is to be read from the console (i.e., <b>cin</b>).  It is separated into four sections:</p>

<ul>
  <li>A description of a course's <i>graded artifacts</i>, defining both a <i>number of points possible</i> and a <i>relative weight</i> for each.</li>
  <li>A description of the students in the course, listing a <i>student ID</i> and a <i>name</i> for each.</li>
  <li>A list of the raw scores received on each graded artifact by students in the course.</li>
  <li>A list of <i>cutpoint sets</i>, describing the total score required to receive an A, B, C, or D, respectively.  (This project assumes that there are no +/- modifiers on grades, and that there are no other kinds of grades, such as Pass/NotPass, Incomplete, etc.)</li>
</ul>

<p>Each section is described in more detail below.</p>

<p class="subtitle">Graded artifacts</p>

<p>The section describing graded artifacts begins with a positive integer, alone on a line, specifying the number of graded artifacts.  This is followed, on another line, a sequence of integers, separated by spaces, indicating the total points possible on each graded artifact.  Finally, on one more line, there will be a sequence of integers, separated by spaces, indicating the relative weight of each graded artifact.  An example of this section would be:</p>

<blockquote><pre>
7
15 15 15 15 15 50 50
12 12 12 12 12 15 25
</pre></blockquote>

<p>This example describes seven graded artifacts, the first five having 15 points possible and relative weights of 12, the sixth having 50 points possible and a relative weight of 15, and the last having 50 points possible and a relative weight of 25.</p>

<p class="subtitle">Students</p>

<p>The next section of input describes the students enrolled in the course.  It begins with a positive integer, alone on a line, specifying the number of students enrolled.  Given that positive integer <i>n</i>, there will be <i>n</i> additional lines, each consisting of a non-negative integer <i>student ID</i>, followed by a space, followed by the student's name.  Every character on the line after the student ID and space is considered to be part of the student's name.  An example of this section would be:</p>

<blockquote><pre>
5
123 Alex Thornton
234 Boo Thornton
345 Jane Student
456 Joe Student
567 Too-Many Courses
</pre></blockquote>

<p>Student IDs do not necessarily have to be three digits, and they do not necessarily all have to be the same number of digits.</p>

<p class="subtitle">Raw scores</p>

<p>The next section of input describes the raw scores earned by students on each graded artifact.  The section begins with a positive integer, alone on a line, specifying the number of students for which raw scores are listed.  Given that positive integer <i>n</i>, there will be <i>n</i> additional lines, each consisting of a sequence of non-negative integers separated by spaces, the first of which is a student ID, and the rest of which are raw scores for each graded artifact.  If there are <i>m</i> graded artifacts, you can assume each of these lines will contain <i>m</i> + 1 integers (one student ID, followed by <i>m</i> raw scores), and that the scores correspond, in order, to the graded artifacts listed in the first section.  Example:</p>

<blockquote><pre>
5
345 14 14 14 14 14 45 45
123 13 10 8 14 12 50 37
456 12 9 15 13 11 38 26
234 15 15 15 15 15 50 50
567 8 4 0 10 0 24 12
</pre></blockquote>

<p>It is possible for a student to be listed in the previous section but <i>not</i> to be listed in this section.  In that case, assume that the student's raw scores are all 0.  It is also possible for a student to be listed in this section who does not appear in the previous section; in that case, ignore the student's raw scores, as the student is assumed to have dropped the course.</p>

<p>It is also possible for a raw scores to be higher than the number of points possible on a graded artifact.  This is to be interpreted as extra credit, and fits into the formula below as-is.</p>

<p class="subtitle">Cutpoint sets</p>

<p>The last section of input is the <i>cutpoint sets</i>.  This section begins with a positive integer, alone on a line, specifying the number of cutpoint sets.  Given that positive integer <i>n</i>, the next <i>n</i> lines will consist of four non-negative numeric values (possibly including a decimal point and additional digits) that specify, respectively, the total points required for an A, B, C, or D in the course.  Example:</p>

<blockquote><pre>
3
90.0 80.0 70.0 60.0
85.0 75.0 65.0 55.0
80.0 70.0 60.0 50.0
</pre></blockquote>

<p>You may assume that each of the cutpoint values can safely be read into a variable of type <b>double</b>.</p>

<p class="subtitle">A complete example input</p>

<p>A complete example input for the program follows.  It should be possible to copy and paste this into the console window, or to save this into a file and use redirection to send the file's contents into your program as input.</p>

<blockquote><pre>
7
15 15 15 15 15 50 50
12 12 12 12 12 15 25
5
123 Alex Thornton
234 Boo Thornton
345 Jane Student
456 Joe Student
567 Too-Many Courses
5
345 14 14 14 14 14 45 45
123 13 10 8 14 12 50 37
456 12 9 15 13 11 38 26
234 15 15 15 15 15 50 50
567 8 4 0 10 0 24 12
3
90.0 80.0 70.0 60.0
85.0 75.0 65.0 55.0
80.0 70.0 60.0 50.0
</pre></blockquote>

<p>Note that there is nothing that explicitly separates one section of the input from the next, though you will always be able to tell from context (e.g., the number of graded artifacts, the number of students, etc.) where one section ends and the next begins.</p>

<p class="subtitle">Other requirements about the input</p>

<p>The program must not print prompts (e.g., "Enter the number of students") or any other output <i>except</i> for what is specified in the section titled <i>The output</i> below.</p>

<p>It is reasonable for your program to assume that the program's input will always be structured as specified here.  It is fine for your program to misbehave or even crash if given input that does conform to these specifications.</p>

<p>It is safe to assume that all integers will be small enough that they will fit into an <b>unsigned int</b> or <b>int</b> variable (by Visual Studio 2012's definition, the largest value that would fit in both of these kinds of variables is 2,147,483,647).</p>

</div>

<div class="section">

<hr />

<p class="title">Calculating the total points</p>

<p>The program's output is largely determined by the <i>total score</i> earned by each student in the course.  In order to complete the program, you'll need to understand the correct formula to use.</p>

<p>In the example input above, there are seven graded artifacts defined:</p>

<ol>
  <li>15 points possible, with a relative weight of 12</li>
  <li>15 points possible, with a relative weight of 12</li>
  <li>15 points possible, with a relative weight of 12</li>
  <li>15 points possible, with a relative weight of 12</li>
  <li>15 points possible, with a relative weight of 12</li>
  <li>50 points possible, with a relative weight of 15</li>
  <li>50 points possible, with a relative weight of 25</li>
</ol>

<p>From this example, we can see that simply adding together the raw scores on the various graded artifacts won't work, because, for example, artifact #6 is being graded on a 50-point scale, but is worth only slightly more, overall, than aritfact #5, wihch is being graded on a 15-point scale; summing the scores would give too much weight to artifact #6.  So we'll need to scale each of the raw scores, then add the scaled scores together.</p>

<p>The total relative weight of all graded artifacts in this example is 100, which means that the total score for each student will range from 0.0 to 100.0.  We calculate this by multiplying the <i>percentage of points earned</i> on each graded artifact by its relative weight, then summing the results.  For example, suppose a student received these scores:</p>

<ol>
  <li>14</li>
  <li>13</li>
  <li>15</li>
  <li>12</li>
  <li>10</li>
  <li>40</li>
  <li>45</li>
</ol>

<p>The calculations would proceed as follows:</p>

<ol>
  <li>(14 / 15) * 12 = 11.2</li>
  <li>(13 / 15) * 12 = 10.4</li>
  <li>(15 / 15) * 12 = 12.0</li>
  <li>(12 / 15) * 12 = 9.6</li>
  <li>(10 / 15) * 12 = 8.0</li>
  <li>(40 / 50) * 15 = 12.0</li>
  <li>(45 / 50) * 25 = 22.5</li>
</ol>

<p>Summing these together would yield a total of 11.2 + 10.4 + 12.0 + 9.6 + 8.0 + 12.0 + 22.5 = 85.7.  So this student's <i>total score</i> is 85.7 out of a possible 100.</p>

<p>Scores that include extra credit (i.e., a raw score higher than the number of points possible on a graded artifact) do not need to be treated differently; they should be plugged into the formula the same way as any other.</p>

</div>

<div class="section">

<hr />

<p class="title">Determining final course grades</p>

<p>The final course grade for a student is determined by comparing the <i>total score</i> earned by that student to the cutpoints for an A, B, C, or D.</p>

<ul>
  <li>If a student's total score is greater than or equal to the A cutpoint, the student's final course grade is A</li>
  <li>Otherwise, if a student's total score is greater than or equal to the B cutpoint, the student's final course grade is B</li>
  <li>Otherwise, if a student's total score is greater than or equal to the C cutpoint, the student's final course grade is C</li>
  <li>Otherwise, if a student's total score is greater than or equal to the D cutpoint, the student's final course grade is D</li>
  <li>Otherwise, the student's final course grade is F</li>
</ul>

</div>

<div class="section">

<hr />

<p class="title">The output</p>

<p>While reading the input, there are specified points at which output will be generated and printed to the console (i.e., <b>cout</b>).  These are specified, along with the format of that output, below.</p>

<p class="subtitle">Student roster</p>

<p>After reading the raw scores on all graded artifacts, total scores are printed for all students.  The format for this output is as follows:</p>

<ul>
  <li>The words <b>TOTAL SCORES</b>, alone on a line</li>
  <li>For each student enrolled in the course, the student ID, followed by a space, followed by the student's name, followed by a space, followed by the student's total score</li>
</ul>

<p>Example:</p>

<blockquote><pre>
TOTAL SCORES
123 Alex Thornton 79.1
234 Boo Thornton 100
345 Jane Student 92
456 Joe Student 72.4
567 Too-Many Courses 30.8
</pre></blockquote>

<p>It is not necessary to format the total score to a particular number of decimal places, though you should not truncate it or round it to an integer.  However the C++ <b>iostream</b> library formats a <b>double</b> value by default is fine here.</p>

<p class="subtitle">Course grades</p>

<p>After reading <i>each</i> cutpoint set, final course grades for that cutpoint set are printed.  For the purposes of this output, cutpoint sets are numbered consecutively starting from 1.  The format of this output is as follows:</p>

<ul>
  <li>The words <b>CUTPOINT SET <i>n</i></b>, alone on a line, where <i>n</i> is replaced by the cutpoint set number (1 for the first cutpoint set, 2 for the second, and so on)</li>
  <li>For each student enrolled in the course, the student ID, followed by a space, followed by the student's name, followed by a space, followed by the student's grade</li>
</ul>

<p>Example:</p>

<blockquote><pre>
CUTPOINT SET 1
123 Alex Thornton C
234 Boo Thornton A
345 Jane Student A
456 Joe Student C
567 Too-Many Courses F
</pre></blockquote>

<p class="subtitle">Output timing</p>

<p>Do not store all of the output in memory and print it to the console only at the end of the program.  Instead, you will be required to write output to the console at the points in time specified above.</p>

</div>

<div class="section">

<hr />

<p class="title">A complete example of program execution</p>

<p>The following is a complete example of program execution, demonstrating how input and output are interleaved.  Input is shown in a regular font weight; output is shown in <b>bold</b>.</p>

<blockquote><pre>
7
15 15 15 15 15 50 50
12 12 12 12 12 15 25
5
123 Alex Thornton
234 Boo Thornton
345 Jane Student
456 Joe Student
567 Too-Many Courses
5
345 14 14 14 14 14 45 45
123 13 10 8 14 12 50 37
456 12 9 15 13 11 38 26
234 15 15 15 15 15 50 50
567 8 4 0 10 0 24 12
<b>TOTAL SCORES
123 Alex Thornton 79.1
234 Boo Thornton 100
345 Jane Student 92
456 Joe Student 72.4
567 Too-Many Courses 30.8</b>
3
90.0 80.0 70.0 60.0
<b>CUTPOINT SET 1
123 Alex Thornton C
234 Boo Thornton A
345 Jane Student A
456 Joe Student C
567 Too-Many Courses F</b>
85.0 75.0 65.0 55.0
<b>CUTPOINT SET 2
123 Alex Thornton B
234 Boo Thornton A
345 Jane Student A
456 Joe Student C
567 Too-Many Courses F</b>
80.0 70.0 60.0 50.0
<b>CUTPOINT SET 3
123 Alex Thornton B
234 Boo Thornton A
345 Jane Student A
456 Joe Student B
567 Too-Many Courses F</b>
</pre></blockquote>

</div>

<div class="section">

<hr />

<p class="title">Some rules and limitations</p>

<p>Because we're beginning our exploration of C++ by building our knowledge from some of its lowest-level abstractions, there are some fairly strict limitations on what features of the language you'll be permitted to use in this project.  Those limitations will lift quickly as we move forward this quarter, so don't be concerned that you'll always be put into a tiny box, but this project has some very particular goals.</p>

<p>Here are the rules and limitations governing your work on this project.</p>

<ul>
  <li>Other than <b>iostream</b> and <b>string</b>, you are not permitted to include any C or C++ standard library headers in your program.  Aside from console input/output (using, for example, <b>cin</b>, <b>cout</b>, and <b>endl</b>) and the <b>std::string</b> class, the standard library is off-limits (e.g., you cannot use collections like <b>std::vector</b>).</li>
  <li>Use arrays to store and manipulate data within your program.  Note, too, that you won't know the correct sizes for these arrays at compile time (because the sizes are specified in the program's input), so you will find that you need to use dynamically-allocated arrays extensively.</li>
  <li>You are permitted to use <b>struct</b>s (in the C sense, i.e., implicitly public member variables with no member functions, constructors, destructors, etc.), but <b>class</b>es are off-limits until the next project, as our exploration of object-oriented techniques is still ahead of us.</li>
  <li>Even though this is what you might call a "batch mode" program (i.e., it reads input, processes it, generates output, and then ends), you are still required to explicitly delete any memory that you dynamically allocate using <b>new</b>.  This is a habit that is vital to build in C++, so this will always be a requirement in this course.</li>
  <li>It is not necessary to break the program into multiple source files, though you're certainly welcome to do it; if you do, be sure to use the techniques we discussed in lecture for managing separate compilation &mdash; including the creation of header files to share declarations between modules, and the <b>#ifndef/define/endif</b> idiom for avoiding multiple inclusion of the same header file).  Even if you write your entire program in one source file, do not write one giant <b>main()</b> function that comprises your entire program; this program is plenty large enough to break into smaller functions.  (In any programming language, you should always be looking for an opportunity to abstract away details; this program is no exception.)</li>
</ul>

</div>

<div class="section">

<hr />

<p class="title">Testing</p>

<p>While there is no explicit deliverable demonstrating that you tested your program, you are well-advised to run your program on test inputs other than the example here, since we will run a range of tests against your submission, which will partly determine your overall score on this project.</p>

<p>No additional test inputs and expected outputs are being provided, and we will not be sharing all of our test inputs and outputs.  An important part of developing a facility with program is to develop your ability to construct a varied set of tests on your own, so we will (implicitly) be requiring you to do that.  Note that, while you are not permitted to share code with one another, you can feel free to share test inputs with one another if you'd like.</p>

</div>

<div class="section">

<hr />

<p class="title">Deliverables</p>

<p>Submit all of the source (<b>.cpp</b>) and header (<b>.h</b>) files that comprise your program.  Afterward, take a moment to be sure that you submitted all of the files; if you missed one, we won't be able to compile and run your program, which can result in a substantial penalty, since we won't be able to evaluate your program's correctness.</p>

<p>Follow <a href="../SubmittingProjects.html">this link</a> for a discussion of how to submit your project via Checkmate.  Be aware that I'll be holding you to all of the rules specified in that document, including the one that says that you're responsible for submitting the version of the project that you want graded.  We won't regrade a project simply because you accidentally submitted the wrong version.</p>

</div>

<div class="history">

<hr />

<ul class="nomarker">
  <li>Originally written by Alex Thornton, Fall 2012.</li>
</ul>

</div>

</body>
</html>
Mis_redirected¢DtypeEvalueõIhttp_code¢DtypeEvalueÈQdownload_complete¢DtypeEvalueõ