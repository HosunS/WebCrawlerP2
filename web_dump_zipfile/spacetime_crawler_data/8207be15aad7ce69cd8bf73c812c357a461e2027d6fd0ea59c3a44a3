¦Ifinal_url¡DtypeLhttp_headers¢DtypeEvalue‡¢Ak¢DtypeEvalueNContent-LengthAv¢DtypeEvalueD3402¢Ak¢DtypeEvalueMAccept-RangesAv¢DtypeEvalueEbytes¢Ak¢DtypeEvalueFServerAv¢DtypeEvalueX„Apache/2.4.6 (CentOS) OpenSSL/1.0.2k-fips SVN/1.7.14 mod_wsgi/3.4 Python/2.7.5 Phusion_Passenger/4.0.53 mod_perl/2.0.10 Perl/v5.16.3¢Ak¢DtypeEvalueMLast-ModifiedAv¢DtypeEvalueXWed, 17 Apr 2013 01:53:37 GMT¢Ak¢DtypeEvalueDETagAv¢DtypeEvalueS"d4a-4da84c118aa40"¢Ak¢DtypeEvalueDDateAv¢DtypeEvalueXSat, 09 Feb 2019 17:03:01 GMT¢Ak¢DtypeEvalueLContent-TypeAv¢DtypeEvalueXtext/plain; charset=UTF-8Kraw_content¢DtypeEvalueYJ/*
  $Id: lbaktree.h 5797 2010-10-23 01:41:30Z abehm $
 
 Copyright (C) 2010 by The Regents of the University of California
 
 Redistribution of this file is permitted under
 the terms of the BSD license.
 
 Date: 08/19/2010
 Author: Sattam Alsubaiee <salsubai (at) ics.uci.edu>
*/

#include <sys/time.h>
#include "kwdsstorage.h"
#include "rstartree/rstartree.h"
#include "rstartree/util.h"
#include "filtertree/src/wrappers/wrappers.h"


enum AlgorithmType {fl, vl, vlf};

class NodePriority
{
public:
    unsigned id;
    double priority;
    double pFuzzyTimeCost, cFuzzyTimeCost, pFuzzySpaceCost, cFuzzySpaceCost;
    vector <unsigned> ancestorsIds;
	
    bool operator<(const NodePriority &n) const
    {
        return priority < n.priority;
    };
};

class LBAKTree: public RTree
{
private:
    GramGenFixedLen *gramGen;
	KeywordsFile kf1, kf2;
	double spaceBudget, avgKwdsLength, sx, sy, sx2, sy2, sxy, n, gradient, intercept;
	float simThreshold, kfThreshold;
	unsigned numKwds, q, indexesLevel;
	string queryWorkloadFile;
	AlgorithmType algoType;
    vector<string> dictionary;
    unordered_map <string, unsigned> keywordsMap;
	unordered_map <unsigned, unsigned> queryWorkloadMap;
    unordered_map <unsigned, vector<unsigned> *> recordsMap;
    unordered_map <unsigned, Array<unsigned> *> keywordsHashesMap;
	unordered_map <unsigned, StringContainerVector *> strContainersMap; 
    unordered_map <unsigned, WrapperSimpleEdNorm *> wrappersMap;
	void init(AlgorithmType type, float simT);
	void readQueryWorkload(const Rectangle &range);
	void readQueryWorkload(const Rectangle &range, unsigned objectId);
    void propagateKeywords(unsigned objectId);
	void insertKeywords(unsigned objectId, unordered_set<string> &kwds, bool leaf);
	void parseKeywords(string &text, unordered_set<string> &kwds);
	void selectSANodes();
	void computeGradientIntercept(unsigned objectId, vector <string> &keywords);
	void useFL();
    void useVL();
    void useVLF();
	void fillKeywordsIntersectionsFile();
    void fillKeywordsHashesMap();
	void fillWrappersMap();
	void rangeQuery(vector<Object> &objects, const Rectangle &range, unsigned id, const vector <string> &kwds, vector<string> strings[], vector<unsigned> hashes[]);
	bool searchWrapper(unsigned objectId, const vector <string> &kwds, vector<string>strings[], vector<unsigned>hashes[], vector<string>resultStrings[], vector<unsigned>resultHashes[]);
    bool searchArray(unsigned objectId, unsigned numKeywords, vector<string> strings[], vector<unsigned> hashes[], vector<string> resultStrings[], vector<unsigned> resultHashes[]);
    bool searchVector(unsigned objectId, const string &keyword);
public:
    LBAKTree(Storage *storage, AlgorithmType type, unsigned il, float simT);
	LBAKTree(Storage *storage, string &file, AlgorithmType type, double sb, float simT);
    LBAKTree(Storage *storage, string &file, AlgorithmType type, double sb, float simT, float kfT);
    ~LBAKTree();
    void insert(const Object &obj, vector <string> &kwds);
    void buildIndex();
	void rangeQuery(vector<Object> &objects, const Rectangle &range, const vector <string> &kwds);
	void getObjectKeywords(unsigned objectId, vector<string> &objectKeywords);
	void startTimeMeasurement(struct timeval &t1, struct timezone &tz);
	void stopTimeMeasurement(struct timeval &t2, struct timezone &tz);
	double getTimeMeasurement(struct timeval &t1, struct timeval &t2);
};

Mis_redirected¢DtypeEvalueôIhttp_code¢DtypeEvalueÈQdownload_complete¢DtypeEvalueõ