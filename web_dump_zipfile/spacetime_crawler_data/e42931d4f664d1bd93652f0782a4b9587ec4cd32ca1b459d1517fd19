¦Ifinal_url¡DtypeLhttp_headers¢DtypeEvalue†¢Ak¢DtypeEvalueNContent-LengthAv¢DtypeEvalueD1308¢Ak¢DtypeEvalueMAccept-RangesAv¢DtypeEvalueEbytes¢Ak¢DtypeEvalueFServerAv¢DtypeEvalueX4Apache/2.4.6 (CentOS) OpenSSL/1.0.2k-fips SVN/1.7.14¢Ak¢DtypeEvalueMLast-ModifiedAv¢DtypeEvalueXMon, 19 Nov 2018 16:15:24 GMT¢Ak¢DtypeEvalueDETagAv¢DtypeEvalueS"51c-57b06d312b77d"¢Ak¢DtypeEvalueDDateAv¢DtypeEvalueXThu, 31 Jan 2019 02:55:21 GMTKraw_content¢DtypeEvalueY#
# analyze t-date (fixed d.f.) with Gibbs sampling
#
# y = data
# k = number of observations
# nu = degrees of freedom
#
y <- c(-1.69,0.12,1.20,1.23,1.39,1.49,1.59,1.77,2.59,2.68,2.69,2.86,3.12,3.14,3.94,4.51,4.61,4.71,5.75,9.96)
k <- length(y)
nu <- 3
#
# set up arrays to hold simulations 
# M = no of chains; nloop=length of chains
# includes mu, tau, V (auxiliary variables)
#
M <- 5
nloop <- 10000
mu <- matrix(0,nloop,M)
tau <- matrix(0,nloop,M)
V <- rep(0,k*nloop*M)
dim(V) <- c(nloop,M,k)
#
# starting values (overdispersed; chosen in ad hoc manner)
#
mu[1,] <- c(-1,1,3,5,7)
tau[1,] <- c(0.5,2,5,8,18)
for (m in 1:M) V[1,m,] <- rep(tau[1,m]^2,k)
#
# Gibbs loop
#
for (m in 1:M){
for (loop in 2:nloop){
  V[loop,m,]<- (nu*tau[loop-1,m]^2 + (y-mu[loop-1,m])^2) / 
			rchisq(k,nu+1)  
  s <- sum(1/V[loop,m,])
  mu[loop,m] <- rnorm (1, sum(y/V[loop,m,])/s , 
			1/sqrt(s))
  tau[loop,m] <- sqrt (rgamma(1,(k*nu/2),(nu*s/2)))
    } }
#
# run the G&R convergence and save results 
#
results <- matrix(0,k+2,7)
for (i in (1:k)) {results[i,] <- c(gandr.conv(V[,,i])$quantiles,gandr.conv(V[,,i])$confshrink)}
results[k+1,] <- c(gandr.conv(mu)$quantiles,gandr.conv(mu)$confshrink)
results[k+2,] <- c(gandr.conv(tau)$quantiles,gandr.conv(tau)$confshrink)
resultsMis_redirected¢DtypeEvalueôIhttp_code¢DtypeEvalueÈQdownload_complete¢DtypeEvalueõ