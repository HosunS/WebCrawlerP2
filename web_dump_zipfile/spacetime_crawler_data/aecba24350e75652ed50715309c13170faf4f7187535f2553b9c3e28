¦Ifinal_url¡DtypeLhttp_headers¢DtypeEvalueˆ¢Ak¢DtypeEvalueQTransfer-EncodingAv¢DtypeEvalueGchunked¢Ak¢DtypeEvalueJSet-CookieAv¢DtypeEvalueXI79eed619ece9b34315b1b9f5af9f028a=18b4ab973ef3a0b1557664ec4ea7c06d; path=/¢Ak¢DtypeEvalueFServerAv¢DtypeEvalueX4Apache/2.4.6 (CentOS) OpenSSL/1.0.2k-fips SVN/1.7.14¢Ak¢DtypeEvalueFPragmaAv¢DtypeEvalueHno-cache¢Ak¢DtypeEvalueMCache-ControlAv¢DtypeEvalueHno-cache¢Ak¢DtypeEvalueDDateAv¢DtypeEvalueXSun, 27 Jan 2019 07:43:29 GMT¢Ak¢DtypeEvalueCP3PAv¢DtypeEvalueX2CP="NOI ADM DEV PSAi COM NAV OUR OTRo STP IND DEM"¢Ak¢DtypeEvalueLContent-TypeAv¢DtypeEvalueXtext/html; charset=utf-8Kraw_content¢DtypeEvalueYVÒ<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en-gb" lang="en-gb" dir="ltr" >
<head>
  <base href="http://tutors.ics.uci.edu/index.php/tutor-resources/81-cpp-resources/112-c-pointers" />
  <meta http-equiv="content-type" content="text/html; charset=utf-8" />
  <meta name="author" content="Super User" />
  <meta name="generator" content="Joomla! - Open Source Content Management" />
  <title>C Pointers</title>
  <link href="/templates/beez_20/favicon.ico" rel="shortcut icon" type="image/vnd.microsoft.icon" />
  <link rel="stylesheet" href="/templates/system/css/system.css" type="text/css" />
  <link rel="stylesheet" href="/templates/beez_20/css/position.css" type="text/css" media="screen,projection"  />
  <link rel="stylesheet" href="/templates/beez_20/css/layout.css" type="text/css" media="screen,projection"  />
  <link rel="stylesheet" href="/templates/beez_20/css/print.css" type="text/css" media="print"  />
  <link rel="stylesheet" href="/templates/beez_20/css/general.css" type="text/css" />
  <link rel="stylesheet" href="/templates/beez_20/css/personal.css" type="text/css" />
  <script src="/media/system/js/mootools-core.js" type="text/javascript"></script>
  <script src="/media/system/js/core.js" type="text/javascript"></script>
  <script src="/media/system/js/caption.js" type="text/javascript"></script>
  <script src="/media/system/js/mootools-more.js" type="text/javascript"></script>
  <script src="/templates/beez_20/javascript/md_stylechanger.js" type="text/javascript"></script>
  <script src="/templates/beez_20/javascript/hide.js" type="text/javascript"></script>
  <script type="text/javascript">
window.addEvent('load', function() {
				new JCaption('img.caption');
			});
  </script>


<!--[if lte IE 6]>
<link href="/templates/beez_20/css/ieonly.css" rel="stylesheet" type="text/css" />
<style type="text/css">
#line {
  width:98% ;
}
.logoheader {
  height:200px;
}
#header ul.menu {
  display:block !important;
  width:98.2% ;
}
</style>
<![endif]-->

<!--[if IE 7]>
<link href="/templates/beez_20/css/ie7only.css" rel="stylesheet" type="text/css" />
<![endif]-->
<!--<script type="text/javascript">
  var big ='72%';
  var small='53%';
  var altopen='is open';
  var altclose='is closed';
  var bildauf='/templates/beez_20/images/plus.png';
  var bildzu='/templates/beez_20/images/minus.png';
  var rightopen='Open info';
  var rightclose='Close info';
  var fontSizeTitle='Font size';
  var bigger='Bigger';
  var reset='Reset';
  var smaller='Smaller';
  var biggerTitle='Increase size';
  var resetTitle='Revert styles to default';
  var smallerTitle='Decrease size';
</script>-->

</head>

<body>

<div id="all">
        <div id="back">
                <div id="header">
                                <div class="logoheader">
                                        <h1 id="logo">

                                                                                                                                                                                                        <span class="header1">
                                                                                </span></h1>
                                </div><!-- end logoheader -->
                                        <ul class="skiplinks">
                                                <li><a href="#main" class="u2">Skip to content</a></li>
                                                <li><a href="#nav" class="u2">Jump to main navigation and login</a></li>
                                                                                    </ul>
                                        <!--<h2 class="unseen">Nav view search</h2>-->
                                        <h3 class="unseen">Navigation</h3>
                                        
<ul class="menu">
<li class="item-464"><a href="/" >Home</a></li><li class="item-469"><a href="/index.php/becoming-a-tutor" >Becoming a Tutor</a></li><li class="item-470 current active"><a href="/index.php/tutor-resources" >Learning Resources</a></li><li class="item-477"><a href="/index.php/tutor-coordinators" >Tutor Coordinators</a></li><li class="item-476"><a href="/index.php/contact" >Contact Us</a></li></ul>

                                        <div id="line">
                                        <!-- <div id="fontsize"></div> -->
                                        <!--<h3 class="unseen">Search</h3> -->
                                        
                                        </div> <!-- end line -->


                        </div><!-- end header -->
                        <div id="contentarea">
                                        <div id="breadcrumbs">

                                                        

                                        </div>

                                        

                                                        <div class="left1 leftbigger" id="nav">
                                                   <div class="moduletable_menu">
 <h3><span
	class="backh"><span class="backh2"><span class="backh3">This Site</span></span></span></h3>
 
<ul class="menu">
<li class="item-464"><a href="/" >Home</a></li><li class="item-469"><a href="/index.php/becoming-a-tutor" >Becoming a Tutor</a></li><li class="item-470 current active"><a href="/index.php/tutor-resources" >Learning Resources</a></li><li class="item-477"><a href="/index.php/tutor-coordinators" >Tutor Coordinators</a></li><li class="item-476"><a href="/index.php/contact" >Contact Us</a></li></ul>
</div>

                                                                
                                                                


                                                        </div><!-- end navi -->
               
                                        <div id="wrapper2" >

                                                <div id="main">

                                                
                                                        
<div id="system-message-container">
</div>
                                                        <div class="item-page">

	<h2>
			<a href="/index.php/tutor-resources/81-cpp-resources/112-c-pointers">
		C Pointers</a>
		</h2>








<p><strong>By Jason Yang (edits by Matt Dees and Justin Mogannam)</strong></p>
<p style="text-align: justify;">// To compile this code, run the following command:<br />//&nbsp;&nbsp; /* This is assuming you have named the C file pointers.c */<br />//&nbsp;&nbsp; &nbsp; gcc -Wall pointers.c -o pointers</p>
<p style="text-align: justify;">/*<br />&nbsp;&nbsp; &nbsp;If you are coming from a background of only Python, the concept<br />&nbsp;&nbsp; &nbsp;of pointers will be unfamiliar to you. The purpose of this code<br />&nbsp;&nbsp; &nbsp;example is to provide some background on pointers and how to deal<br />&nbsp;&nbsp; &nbsp;with them.</p>
<p style="text-align: justify;">&nbsp;&nbsp; &nbsp;One way to think of pointer is as an object that points to a memory<br />&nbsp;&nbsp; &nbsp;address. Once a pointer points to a memory address, you can ask the<br />&nbsp;&nbsp; &nbsp;pointer for the value that it is pointing to by dereferencing the pointer.<br />*/<br />#include &lt;stdio.h&gt;</p>
<p style="text-align: justify;">void intro()<br />{<br />&nbsp;&nbsp; &nbsp;// To start off with an introduction to pointers,<br />&nbsp;&nbsp; &nbsp;// we'll begin by declaring an int and a pointer to an int.</p>
<p style="text-align: justify;">&nbsp;&nbsp; &nbsp;int x = 15;&nbsp;&nbsp;&nbsp;&nbsp; // Declaration of an int<br />&nbsp;&nbsp; &nbsp;printf("The address of x is: %p\n", &amp;x);<br />&nbsp;&nbsp; &nbsp;int *y = NULL;&nbsp; // Declaration of a pointer whose type it points to is an int,<br />&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; &nbsp;// meaning this pointer should only point to int values<br />&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp; // Note that in this initial declaration it is being assigned<br />&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;// NULL. It is better practice to have your pointers point to NULL<br />&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;// if you do not have an address for it to point to. If you do not,<br />&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;// the pointer will just point to some random block of memory<br />&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;// and the value that is inside will be unknown to you at run-time.<br />&nbsp;&nbsp; &nbsp;printf("The address of y is: %p\n", y);<br />&nbsp;&nbsp; &nbsp;// If we would like to have y point to x, we would say:</p>
<p style="text-align: justify;">&nbsp;&nbsp; &nbsp;y = &amp;x;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;// This is saying, make y point to the address of x<br />&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;// And if we&nbsp; want to get the value of y now, we would<br />&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;// dereference y by saying *y and expect 15.<br />&nbsp;&nbsp; &nbsp;printf("The address of y is: %p\n", y);<br />&nbsp;&nbsp; &nbsp;printf("The value of y should be 15. y: %d\n", *y); // An example of dereferencing a pointer<br />&nbsp;&nbsp; &nbsp;int *z = y;<br />&nbsp;&nbsp; &nbsp;printf("The address of z is: %p\n", z);<br />&nbsp;&nbsp; &nbsp;// Often times, people make the error of passing the pointer itself<br />&nbsp;&nbsp; &nbsp;// when they really mean to pass the pointer's value. When using *, you are asking<br />&nbsp;&nbsp; &nbsp;// the pointer for the value that is stored in the memory address that it is<br />&nbsp;&nbsp; &nbsp;// currently pointing to. If you forget to, you will be passing the pointer itself and<br />&nbsp;&nbsp; &nbsp;// often notice errors as a result.<br />}</p>
<p style="text-align: justify;"><br />void array_example()<br />{<br />&nbsp;&nbsp; &nbsp;int x[10] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10}; // Initializes an array of 10 ints<br />&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp; // with the numbers 1-10<br />&nbsp;&nbsp; &nbsp;printf("The first element of the array is: %d\n", *x);&nbsp;&nbsp; &nbsp;// Notice that *x is being passed<br />&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;// 1 is the value will be passed<br />&nbsp;&nbsp; &nbsp;// Essentially, when you declare an array, what you get in return is a pointer<br />&nbsp;&nbsp; &nbsp;// to the very first item in the array.</p>
<p style="text-align: justify;">&nbsp;&nbsp; &nbsp;// If you are familiar with Python, calling *x on the initial array is the same as saying<br />&nbsp;&nbsp; &nbsp;// x[0] in a Python list to get the first item of a list. Like lists in Python,<br />&nbsp;&nbsp; &nbsp;// arrays in C follow the zero-based indexing concept. While C does support indexing,<br />&nbsp;&nbsp; &nbsp;// the idea of this example is to help you get familiar with pointers.</p>
<p style="text-align: justify;">&nbsp;&nbsp; &nbsp;// Say we wanted to print out all the values in the array with only pointers,<br />&nbsp;&nbsp; &nbsp;// you're probably wondering how that would be done. To print all the values without using<br />&nbsp;&nbsp; &nbsp;// indexing, we are going to have to use pointer arithmetic.</p>
<p style="text-align: justify;">&nbsp;&nbsp; &nbsp;// If we only have a pointer to the beginning of the array and we want the 3rd item in<br />&nbsp;&nbsp; &nbsp;// the array, we would say (x + 2) to have our pointer advance to point to the 3rd item <br />&nbsp;&nbsp; &nbsp;// (remember zero-based indexing). But since we only advanced our pointer, <br />&nbsp;&nbsp; &nbsp;// to get the value of the 3rd item in the array, we would have to say<br />&nbsp;&nbsp; &nbsp;// *(x + 2) and we would expect 3 as the result.<br />&nbsp;&nbsp; &nbsp;int i;<br />&nbsp;&nbsp; &nbsp;for (i = 0; i &lt; 10; i++)<br />&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;printf("%d\n", *(x + i)); // This loop increments i each time which allows us<br />&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp; // to add i to the pointer to get each value of the array<br />&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp; // It should also be noted that *i + 1 would dereference i<br />&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp; // and then add 1 to that value</p>
<p style="text-align: justify;">&nbsp;&nbsp; &nbsp;// It is important to note that when you are iterating through arrays in C that you<br />&nbsp;&nbsp; &nbsp;// stop at n - 1 terms, where n is the size of the array. If you do not, you will be accessing<br />&nbsp;&nbsp; &nbsp;// memory that is beyond your array and will most likely get a segmentation fault when you<br />&nbsp;&nbsp; &nbsp;// run your code.<br />}</p>
<p style="text-align: justify;">void string_example()<br />{<br />&nbsp;&nbsp; &nbsp;char *s = "Hello World"; // Declares a string literal<br />&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp; // A string literal's contents are set at compile time<br />&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp; // so if you try to change its contents at runtime, you will<br />&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp; // get a segmentation fault. <br />&nbsp;&nbsp; &nbsp;printf("%s\n", s);<br />&nbsp;&nbsp; &nbsp;char s1[12] = {'H', 'e', 'l', 'l', 'o', ' ', 'W', 'o', 'r', 'l', 'd', '\0'};<br />&nbsp;&nbsp; &nbsp;// Strings in C are arrays of characters. In this case, an array of size 12 has been<br />&nbsp;&nbsp; &nbsp;// allocated for the string hello world. Strings in C must be terminated by a null<br />&nbsp;&nbsp; &nbsp;// character which is denoted by '\0'.<br />&nbsp;&nbsp; &nbsp;// It should also be noted that in C single quotes are different from double quotes.<br />&nbsp;&nbsp; &nbsp;// Unlike in double quotes, single quotes are used for single characters and signify<br />&nbsp;&nbsp; &nbsp;// a character. Double quotes are used to denote strings or string literals.<br />&nbsp;&nbsp; &nbsp;<br />&nbsp;&nbsp; &nbsp;// CORRECTION above to spelling: changed "Unlike in single quotes"<br />&nbsp;&nbsp; &nbsp;// to "Unlike in double quotes"<br />&nbsp;&nbsp; &nbsp;printf("%s\n", s1);<br />&nbsp;&nbsp; &nbsp;char s2[10] = "Apple"; // Another way of declaring a string<br />&nbsp;&nbsp; &nbsp;printf("%s\n", s2);<br />}</p>
<p style="text-align: justify;">// sizes() function and content added by Justin Mogannam (November 2015)<br />void sizes(){<br />&nbsp;&nbsp; &nbsp;// You may find it useful to use the sizeof() function in order to acquire<br />&nbsp;&nbsp; &nbsp;// the size of a certain data type. It's especially useful in lower-level<br />&nbsp;&nbsp; &nbsp;// applications such as assembly or even C. For example, consider the variable:<br />&nbsp;&nbsp; &nbsp;int integer;<br />&nbsp;&nbsp; &nbsp;<br />&nbsp;&nbsp; &nbsp;// It has not even been assigned a value yet. However, if we run the following:<br />&nbsp;&nbsp; &nbsp;<br />&nbsp;&nbsp; &nbsp;printf("The size of integer is: %d\n", sizeof(integer));<br />&nbsp;&nbsp; &nbsp;<br />&nbsp;&nbsp; &nbsp;// it should be noted that the size of the int "integer" is 4 (bytes), even though<br />&nbsp;&nbsp; &nbsp;// it has not yet been assigned a value. This is because C is a static-checking<br />&nbsp;&nbsp; &nbsp;// language, that is, it performs all of the data and memory allocations before<br />&nbsp;&nbsp; &nbsp;// runtime (with a few exceptions). So in this case, it sees "integer" declared, and<br />&nbsp;&nbsp; &nbsp;// reserves 4 bytes of memory for "integer" so that it will surely be available<br />&nbsp;&nbsp; &nbsp;// at runtime. <br />&nbsp;&nbsp; &nbsp;<br />&nbsp;&nbsp; &nbsp;// To travel even lower-level into computer memory, there is yet another way to <br />&nbsp;&nbsp; &nbsp;// index an element using the sizeof() function (which explains how indexing<br />&nbsp;&nbsp; &nbsp;// array[i] at index i actually works). It's not used in C, per C (see what I did<br />&nbsp;&nbsp; &nbsp;// there?), but it certainly is useful to know, especially when working with ASM.<br />&nbsp;&nbsp; &nbsp;<br />&nbsp;&nbsp; &nbsp;// To start off, let's create an array with an arbitrary number of elements:<br />&nbsp;&nbsp; &nbsp;char letters[5] = {'a', 'b', 'c', 'd', 'e'};<br />&nbsp;&nbsp; &nbsp;<br />&nbsp;&nbsp; &nbsp;// It should come as no surprise (as done above) how we can index letters:<br />&nbsp;&nbsp; &nbsp;printf("The first of letters is: %c\n", letters[0]);<br />&nbsp;&nbsp; &nbsp;printf("The second of letters is: %c\n", letters[1]);<br />&nbsp;&nbsp; &nbsp;<br />&nbsp;&nbsp; &nbsp;// However, it would be nice to know how a computer actually indexes this array, as<br />&nbsp;&nbsp; &nbsp;// you can't simply just tell it to "take the nth element of the array". Well, we know<br />&nbsp;&nbsp; &nbsp;// that in order to get the starting address of letters, we must do the following:<br />&nbsp;&nbsp; &nbsp;char *start_address = NULL;<br />&nbsp;&nbsp; &nbsp;start_address = &amp;letters;<br />&nbsp;&nbsp; &nbsp;printf("The starting address of letters is: %p\n", start_address);<br />&nbsp;&nbsp; &nbsp;printf("Dereferencing start_address should give us 'a': %c\n", *start_address);</p>
<p style="text-align: justify;">&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;<br />&nbsp;&nbsp; &nbsp;// So let's pretend we're not allowed to use the index[] operator (someone had to <br />&nbsp;&nbsp; &nbsp;// program it, right? How might we access the next character, b? Let's take a look at<br />&nbsp;&nbsp; &nbsp;// the information below:<br />&nbsp;&nbsp; &nbsp;char c;<br />&nbsp;&nbsp; &nbsp;printf("A character in C is %d byte.\n", sizeof(c));<br />&nbsp;&nbsp; &nbsp;int i = 0;<br />&nbsp;&nbsp; &nbsp;for (i; i &lt; 5; i++){<br />&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;printf("The address of index %d (the char '%c') is %p\n", i, letters[i], &amp;(letters[i]));<br />&nbsp;&nbsp; &nbsp;}<br />&nbsp;&nbsp; &nbsp;<br />&nbsp;&nbsp; &nbsp;// It is no coincidence that each index is stored 1 byte apart from each other, from<br />&nbsp;&nbsp; &nbsp;// 'a' to 'e', especially knowing that each char is 1 byte. This is because, as we<br />&nbsp;&nbsp; &nbsp;// learned earlier, C has already reserved the appropriate amount of bytes in memory<br />&nbsp;&nbsp; &nbsp;// for the array "letters" before runtime. So if we would like to access the element<br />&nbsp;&nbsp; &nbsp;// just after 'a' in "letters", we could just perform some simple arithmetic:<br />&nbsp;&nbsp; &nbsp;<br />&nbsp;&nbsp; &nbsp;char *current_address = NULL;<br />&nbsp;&nbsp; &nbsp;current_address = &amp;letters;<br />&nbsp;&nbsp; &nbsp;i = 0;<br />&nbsp;&nbsp; &nbsp;int adder = 0;&nbsp;&nbsp; &nbsp;// added number to index the array properly from the starting address<br />&nbsp;&nbsp; &nbsp;for (i; i &lt; 5; i++){<br />&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;printf("Index %d is: '%c'\n", i, *(current_address + (adder * sizeof(c))));<br />&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;adder++; <br />&nbsp;&nbsp; &nbsp;}<br />&nbsp;&nbsp; &nbsp;<br />&nbsp;&nbsp; &nbsp;// As you can see above, by adding the correct number to the starting address<br />&nbsp;&nbsp; &nbsp;// (0 through 4), we can access the ith index of the array by adding the appropriate<br />&nbsp;&nbsp; &nbsp;// number to the starting address. It is multiplied by the sizeof(c) because C will<br />&nbsp;&nbsp; &nbsp;// reserve:<br />&nbsp;&nbsp; &nbsp;// sizeof(data_type) * number of elements <br />&nbsp;&nbsp; &nbsp;// bytes in memory for the array. Thus, we have successfully indexed the array<br />&nbsp;&nbsp; &nbsp;// properly without using the index[] operator.<br />&nbsp;&nbsp; &nbsp;<br />&nbsp;&nbsp; &nbsp;<br />&nbsp;&nbsp; &nbsp;<br />}</p>
<p style="text-align: justify;">int main()<br />{<br />&nbsp;&nbsp; &nbsp;intro();<br />&nbsp;&nbsp; &nbsp;array_example();<br />&nbsp;&nbsp; &nbsp;string_example();<br />&nbsp;&nbsp; &nbsp;sizes();<br />&nbsp;&nbsp; &nbsp;return 0;<br />}</p> 
	
</div>


                                                </div><!-- end main -->

                                        </div><!-- end wrapper -->

                                
                        
                                <div class="wrap"></div>

                                </div> <!-- end contentarea -->

                        </div><!-- back -->

                </div><!-- all -->

                <div id="footer-outer">
                        
                        <div id="footer-sub">


                                <div id="footer">

                                        
                                        

                                </div><!-- end footer -->

                        </div>

                </div>
        
        </body>
</html>
Mis_redirected¢DtypeEvalueôIhttp_code¢DtypeEvalueÈQdownload_complete¢DtypeEvalueõ