¦Ifinal_url¡DtypeLhttp_headers¢DtypeEvalueˆ¢Ak¢DtypeEvalueQTransfer-EncodingAv¢DtypeEvalueGchunked¢Ak¢DtypeEvalueJSet-CookieAv¢DtypeEvalueXI79eed619ece9b34315b1b9f5af9f028a=e9196a7309cdf1d38f00ef5c6714623f; path=/¢Ak¢DtypeEvalueFServerAv¢DtypeEvalueX4Apache/2.4.6 (CentOS) OpenSSL/1.0.2k-fips SVN/1.7.14¢Ak¢DtypeEvalueFPragmaAv¢DtypeEvalueHno-cache¢Ak¢DtypeEvalueMCache-ControlAv¢DtypeEvalueHno-cache¢Ak¢DtypeEvalueDDateAv¢DtypeEvalueXFri, 01 Feb 2019 21:46:31 GMT¢Ak¢DtypeEvalueCP3PAv¢DtypeEvalueX2CP="NOI ADM DEV PSAi COM NAV OUR OTRo STP IND DEM"¢Ak¢DtypeEvalueLContent-TypeAv¢DtypeEvalueXtext/html; charset=utf-8Kraw_content¢DtypeEvalueYCÔ<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en-gb" lang="en-gb" dir="ltr" >
<head>
  <base href="http://tutors.ics.uci.edu/index.php/tutor-resources/80-java-resources/97-java-basics" />
  <meta http-equiv="content-type" content="text/html; charset=utf-8" />
  <meta name="author" content="Super User" />
  <meta name="generator" content="Joomla! - Open Source Content Management" />
  <title>Java Basics</title>
  <link href="/templates/beez_20/favicon.ico" rel="shortcut icon" type="image/vnd.microsoft.icon" />
  <link rel="stylesheet" href="/templates/system/css/system.css" type="text/css" />
  <link rel="stylesheet" href="/templates/beez_20/css/position.css" type="text/css" media="screen,projection"  />
  <link rel="stylesheet" href="/templates/beez_20/css/layout.css" type="text/css" media="screen,projection"  />
  <link rel="stylesheet" href="/templates/beez_20/css/print.css" type="text/css" media="print"  />
  <link rel="stylesheet" href="/templates/beez_20/css/general.css" type="text/css" />
  <link rel="stylesheet" href="/templates/beez_20/css/personal.css" type="text/css" />
  <script src="/media/system/js/mootools-core.js" type="text/javascript"></script>
  <script src="/media/system/js/core.js" type="text/javascript"></script>
  <script src="/media/system/js/caption.js" type="text/javascript"></script>
  <script src="/media/system/js/mootools-more.js" type="text/javascript"></script>
  <script src="/templates/beez_20/javascript/md_stylechanger.js" type="text/javascript"></script>
  <script src="/templates/beez_20/javascript/hide.js" type="text/javascript"></script>
  <script type="text/javascript">
window.addEvent('load', function() {
				new JCaption('img.caption');
			});
  </script>


<!--[if lte IE 6]>
<link href="/templates/beez_20/css/ieonly.css" rel="stylesheet" type="text/css" />
<style type="text/css">
#line {
  width:98% ;
}
.logoheader {
  height:200px;
}
#header ul.menu {
  display:block !important;
  width:98.2% ;
}
</style>
<![endif]-->

<!--[if IE 7]>
<link href="/templates/beez_20/css/ie7only.css" rel="stylesheet" type="text/css" />
<![endif]-->
<!--<script type="text/javascript">
  var big ='72%';
  var small='53%';
  var altopen='is open';
  var altclose='is closed';
  var bildauf='/templates/beez_20/images/plus.png';
  var bildzu='/templates/beez_20/images/minus.png';
  var rightopen='Open info';
  var rightclose='Close info';
  var fontSizeTitle='Font size';
  var bigger='Bigger';
  var reset='Reset';
  var smaller='Smaller';
  var biggerTitle='Increase size';
  var resetTitle='Revert styles to default';
  var smallerTitle='Decrease size';
</script>-->

</head>

<body>

<div id="all">
        <div id="back">
                <div id="header">
                                <div class="logoheader">
                                        <h1 id="logo">

                                                                                                                                                                                                        <span class="header1">
                                                                                </span></h1>
                                </div><!-- end logoheader -->
                                        <ul class="skiplinks">
                                                <li><a href="#main" class="u2">Skip to content</a></li>
                                                <li><a href="#nav" class="u2">Jump to main navigation and login</a></li>
                                                                                    </ul>
                                        <!--<h2 class="unseen">Nav view search</h2>-->
                                        <h3 class="unseen">Navigation</h3>
                                        
<ul class="menu">
<li class="item-464"><a href="/" >Home</a></li><li class="item-469"><a href="/index.php/becoming-a-tutor" >Becoming a Tutor</a></li><li class="item-470 current active"><a href="/index.php/tutor-resources" >Learning Resources</a></li><li class="item-477"><a href="/index.php/tutor-coordinators" >Tutor Coordinators</a></li><li class="item-476"><a href="/index.php/contact" >Contact Us</a></li></ul>

                                        <div id="line">
                                        <!-- <div id="fontsize"></div> -->
                                        <!--<h3 class="unseen">Search</h3> -->
                                        
                                        </div> <!-- end line -->


                        </div><!-- end header -->
                        <div id="contentarea">
                                        <div id="breadcrumbs">

                                                        

                                        </div>

                                        

                                                        <div class="left1 leftbigger" id="nav">
                                                   <div class="moduletable_menu">
 <h3><span
	class="backh"><span class="backh2"><span class="backh3">This Site</span></span></span></h3>
 
<ul class="menu">
<li class="item-464"><a href="/" >Home</a></li><li class="item-469"><a href="/index.php/becoming-a-tutor" >Becoming a Tutor</a></li><li class="item-470 current active"><a href="/index.php/tutor-resources" >Learning Resources</a></li><li class="item-477"><a href="/index.php/tutor-coordinators" >Tutor Coordinators</a></li><li class="item-476"><a href="/index.php/contact" >Contact Us</a></li></ul>
</div>

                                                                
                                                                


                                                        </div><!-- end navi -->
               
                                        <div id="wrapper2" >

                                                <div id="main">

                                                
                                                        
<div id="system-message-container">
</div>
                                                        <div class="item-page">

	<h2>
			<a href="/index.php/tutor-resources/80-java-resources/97-java-basics">
		Java Basics</a>
		</h2>








<p style="text-align: center;"><strong>By Chirag Samtani</strong></p>
<p style="text-align: justify;"><br />/* -- 1. Field -- */ <br />// A field is a VARIABLE declared inside a class or interface, outside of the methods<br />// They are considered "members" of a class<br />// They are often private and can only be accessed by getter and setter methods<br />// Syntax structure: (type) "name"<br />// Examples:<br />int count;<br />boolean hungry;</p>
<p style="text-align: justify;">/* -- 2. Declaration vs Initialization -- */<br />// Declaring a variable is only stating the type of the variable and its name<br />// Initializing a variable is the assigning an initial value to a variable<br />int count; // declaration<br />int count = 0; // declaration AND initialization</p>
<p style="text-align: justify;">/* -- 3. Public vs Private -- */<br />// You first need to understand what "SCOPE" is.<br />// Scope is the visibility of the variables, methods, and classes.<br />// Public means the scope is open to and can be accessed to other classes outside<br />// Private means that their scope is only within the section they are declared.<br />// Private members of a class can only be accessed by other members within the same class.<br />public class Clock {<br />&nbsp;&nbsp; &nbsp;private int seconds;<br />&nbsp;&nbsp; &nbsp;public int getTime() { <br />&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;return seconds;<br />&nbsp;&nbsp; &nbsp;}<br />}</p>
<p style="text-align: justify;">public static void main() {<br />&nbsp;&nbsp; &nbsp;System.out.println(seconds); // ILLEGAL, main cannot access a private member of Clock class<br />&nbsp;&nbsp; &nbsp;System.out.println(getTime()); // LEGAL, prints out the number of seconds<br />}</p>
<p style="text-align: justify;">// These examples are meant to be simplified to get the point across<br />/* -- 4. Inheritance -- */<br />public class Rectangle {<br />// SUPER class or PARENT: Rectangle class<br />&nbsp;&nbsp; &nbsp;int length, width;<br />&nbsp;&nbsp; &nbsp;public Rectangle(int len, int wid) { <br />&nbsp;&nbsp; &nbsp;// Rectangle constructor that takes in two parameters, length and width<br />&nbsp;&nbsp; &nbsp;// A constructor ALWAYS has the same name as its class and NO RETURN TYPE.<br />&nbsp;&nbsp; &nbsp;// It is called when an INSTANCE of its class is created<br />&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;length = len;<br />&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;width = wid;<br />&nbsp;&nbsp; &nbsp;}</p>
<p style="text-align: justify;">&nbsp;&nbsp; &nbsp;public int area() {<br />&nbsp;&nbsp; &nbsp;// Calculates and returns the area of the Rectangle<br />&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;return length * width;<br />&nbsp;&nbsp; &nbsp;}</p>
<p style="text-align: justify;">&nbsp;&nbsp; &nbsp;public int perimeter() {<br />&nbsp;&nbsp; &nbsp;// Calculates and returns the perimeter of the Rectangle<br />&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;return (2 * length) + (2 * width);<br />&nbsp;&nbsp; &nbsp;}</p>
<p style="text-align: justify;">&nbsp;&nbsp; &nbsp;public boolean isRegularPolygon() {<br />&nbsp;&nbsp; &nbsp;// A rectangle is NOT a regular polygon (equal angles and equal sides)<br />&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;return false;<br />&nbsp;&nbsp; &nbsp;}<br />}</p>
<p style="text-align: justify;">public class Square extends Rectangle {<br />// SUB class or CHILD: Square class. A square is a rectangle with 4 equal sides.<br />// Classes can be "derived" from other classes using "extends"<br />// A subclass inherits all of the public and protected members of its superclass<br />&nbsp;&nbsp; &nbsp;int side;<br />&nbsp;&nbsp; &nbsp;public Square(int s) {<br />&nbsp;&nbsp; &nbsp;// Square constructor that only takes in one parameter side, s<br />&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;super(s, s);<br />&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;// Use the parent's constructor to create a rectangle but with 4 equal sides<br />&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;// To do that, use "super()" to access the parent's constructor. MAKE SURE you match the parent's constructor<br />&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;// If I call super() it will call Rectangle's constructor which needs to pass two ints, length and width<br />&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;// Since a square has equal lengths and widths, we can pass s as length and width to the Rectangle's constructor<br />&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;side = s;<br />&nbsp;&nbsp; &nbsp;}</p>
<p style="text-align: justify;">&nbsp;&nbsp; &nbsp;// Square inherits perimiter() and area() from its parent<br />&nbsp;&nbsp; &nbsp;// If you don't implement them, then the parent's methods are automatically are called.<br />&nbsp;&nbsp; &nbsp;// Otherwise, you will need to override them if you need to change them</p>
<p style="text-align: justify;">&nbsp;&nbsp; &nbsp;public boolean isRegularPolygon() {<br />&nbsp;&nbsp; &nbsp;// A square is a regular polygon (equal angles and equal sides)<br />&nbsp;&nbsp; &nbsp;// We will override the parent's method and return true.<br />&nbsp;&nbsp; &nbsp;// When this method is called on a Square instance, <br />&nbsp;&nbsp; &nbsp;// it will use the Square's method instead of Rectangle's.<br />&nbsp;&nbsp; &nbsp;// This is the magic of Polymorphism.<br />&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;return true;<br />&nbsp;&nbsp; &nbsp;}<br />}</p>
<p style="text-align: justify;">// Try it yourself. Construct a Rectangle and a Square using their constructors like this. <br />Rectangle rect = new Rectangle(2, 3); <br />Square sqr = new Square(4);</p>
<p style="text-align: justify;">// Call perimiter() and area(). Their output should be correct even though Square does not have its own.<br />rect.perimeter(); // --&gt; 10<br />rect.area(); // --&gt; 6</p>
<p style="text-align: justify;">sqr.perimeter(); // --&gt; 16<br />sqr.area(); // --&gt; 16</p>
<p style="text-align: justify;">// Now call rect.isRegularPolygon() and sqr.isRegularPolygon()<br />// It should return:<br />rect.isRegularPolygon(); // --&gt; false<br />sqr.isRegularPolygon(); // --&gt; true</p>
<p style="text-align: justify;"><br />/* -- 5. Interface -- */<br />// A special class that contains "abstract" methods and constant fields<br />public interface Shape {<br />// An interface CANNOT have a constructor; will not instantiate<br />&nbsp;&nbsp; &nbsp;public void areaFormula(); // &lt;-- cannot have a body because it is ABSTRACT<br />}</p>
<p style="text-align: justify;">public class Circle implements Shape {<br />// Circle MUST inherit and provide implementation for ALL of Shape's members<br />&nbsp;&nbsp; &nbsp;public Circle() {<br />&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;// Let's not worry about what the constructor does<br />&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;// Just know, that Circle can have a constructor and Shape CANNOT<br />&nbsp;&nbsp; &nbsp;}<br />&nbsp;&nbsp; &nbsp;public void areaFormula(){<br />&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;System.out.println("A = pi * radius^2");<br />&nbsp;&nbsp; &nbsp;}<br />}</p>
<p style="text-align: justify;">public class Triangle implements Shape {<br />// Triangle MUST inherit and provide implementation for ALL of Shape's members<br />&nbsp;&nbsp; &nbsp;public Triangle() {<br />&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;// Let's not worry about what the constructor does<br />&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;// Just know, that Triangle can have a constructor and Shape CANNOT<br />&nbsp;&nbsp; &nbsp;}<br />&nbsp;&nbsp; &nbsp;public void areaFormula() {<br />&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;System.out.println("A = 0.5 * base * height");<br />&nbsp;&nbsp; &nbsp;}<br />}</p>
<p style="text-align: justify;">// Even though Circle and Triangle are implemented through Shape and both have an area<br />// Each of them have unique area formulas<br />// Therefore, it makes more sense to create a general skeleton structure, hence "interface",<br />// and implement each their own members</p>
<p style="text-align: justify;">/* -- 6. "extends" vs "implements" -- */<br />// "extends" and "implements" are both powerful tools and they may seem to do the same thing<br />// You're probably asking why do we need interfaces if we can just keep deriving classes<br />// Well, Java does not allow MULTIPLE INHERITANCE.<br />// That means, if you want the class to be a subtype of multiple supertypes<br />// you can only "extends" from ONE class, and all the rest must be "implements"<br />// Hence, your Lab 4 makes you "extends" AnimatedSmiley and "implements" SmileyRacerInterface<br />// This will allow you to inherit both AnimatedSmiley's features and the characteristics of a SmileyRacer</p>
<p style="text-align: justify;">/* 7. -- Array vs ArrayList -- */<br />// Array and ArrayList are both data structures that are lists</p>
<p style="text-align: justify;">// Array<br />// - fixed size; cannot change the size of the array once initialized<br />// - mainly used to store primitives and objects<br />// - often argued to be more memory efficient<br />// - no access to length of array once made</p>
<p style="text-align: justify;">b = new int[10]; <br />// Created an array b that has the size of 10 and can only store the primitive type int<br />// To access an element, you would call<br />b[0] = 1;<br />b[5] = 2;</p>
<p style="text-align: justify;">// ArrayList<br />// - dynamic size; it can grow and shrink automatically by adding and removing objects<br />// - used to store only OBJECTS; you can store primitives in ArrayLists but they get "boxed" into objects<br />// - can access length of arraylist<br />// - better to use when intended list size is unknown</p>
<p style="text-align: justify;">ArrayList&lt;Cookie&gt; jar = new ArrayList&lt;Cookie&gt;(); <br />// Created an arraylist jar that store Cookie type objects<br />// To access, you would call<br />jar.get(0); // --&gt; returns Cookie object<br />jar.get(2); // --&gt; returns Cookie object<br />jar.size(); // --&gt; returns the size of the ArrayList jar</p>
<p style="text-align: justify;">&nbsp;</p> 
	
</div>


                                                </div><!-- end main -->

                                        </div><!-- end wrapper -->

                                
                        
                                <div class="wrap"></div>

                                </div> <!-- end contentarea -->

                        </div><!-- back -->

                </div><!-- all -->

                <div id="footer-outer">
                        
                        <div id="footer-sub">


                                <div id="footer">

                                        
                                        

                                </div><!-- end footer -->

                        </div>

                </div>
        
        </body>
</html>
Mis_redirected¢DtypeEvalueôIhttp_code¢DtypeEvalueÈQdownload_complete¢DtypeEvalueõ