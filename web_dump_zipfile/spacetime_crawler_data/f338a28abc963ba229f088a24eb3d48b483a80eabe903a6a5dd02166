¦Ifinal_url¡DtypeLhttp_headers¢DtypeEvalue‰¢Ak¢DtypeEvalueNContent-LengthAv¢DtypeEvalueD5890¢Ak¢DtypeEvaluePContent-EncodingAv¢DtypeEvalueDgzip¢Ak¢DtypeEvalueMAccept-RangesAv¢DtypeEvalueEbytes¢Ak¢DtypeEvalueDVaryAv¢DtypeEvalueOAccept-Encoding¢Ak¢DtypeEvalueFServerAv¢DtypeEvalueX4Apache/2.4.6 (CentOS) OpenSSL/1.0.2k-fips SVN/1.7.14¢Ak¢DtypeEvalueMLast-ModifiedAv¢DtypeEvalueXFri, 18 Jan 2019 21:54:47 GMT¢Ak¢DtypeEvalueDETagAv¢DtypeEvalueX"4231-57fc28f44e983-gzip"¢Ak¢DtypeEvalueDDateAv¢DtypeEvalueXThu, 31 Jan 2019 04:16:29 GMT¢Ak¢DtypeEvalueLContent-TypeAv¢DtypeEvalueXtext/html; charset=UTF-8Kraw_content¢DtypeEvalueYB1<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 3.2//EN">
<html><head>
<title>David Eppstein - Publications</title>
<meta name="viewport" content="width=device-width, initial-scale=1">
</head>
<body bgcolor="#ffffff" text="#000000">
<h1>David Eppstein - Publications</h1>
<hr><p>
<h2>
1998
</h2>
Note that a paper may appear in listings for multiple years
due to multiple publication (of tech. report, conference, and journal versions).
<p>
<ul>
<li><b>Finding the <i>k</i> shortest paths</b>.<br>
D. Eppstein.<br>
<i>35th IEEE Symp. Foundations of Comp. Sci.,</i> Santa Fe, 1994, pp. 154&ndash;165.<br>
<a href="Epp-TR-94-26.pdf">Tech. Rep. 94-26</a>, ICS, UCI, 1994.<br>
<a href="//doi.org/10.1137/S0097539795290477">
<i>SIAM J. Computing</i> 28 (2): 652&ndash;673, 1998</a>.
<p>
This paper presents an algorithm that finds multiple short paths connecting
two terminals in a graph
(allowing repeated vertices and edges in the paths)
in constant time per path after a preprocessing stage
dominated by a single-source shortest path computation.
The paths it finds are the <i>k</i> shortest in the graph, where <i>k</i> is a
parameter given as input to the algorithm.
<p>
The <i>k</i> shortest paths problem has many important applications for finding
alternative solutions to geographic path planning problems, network
routing, hypothesis generation in computational linguistics, and
sequence alignment and metabolic pathway finding in
bioinformatics. Although there have been many papers on the
<i>k</i> shortest paths problem before and after this one, it has become
frequently cited in those application areas.
Additionally, it marks a boundary in the theoretical study of the problem:
prior theoretical work largely concerned how quickly the problem could
be solved, a line of research that was closed off by the optimal time
bounds of this paper. Subsequent work has focused instead
on devising efficient algorithms for more complex alternative
formulations of the problem that avoid the repeated
vertices and other shortcomings of the alternative paths produced by
this formulation.
<p>(<a href="/~eppstein/bibs/eppstein.html#Finding the $k$ shortest paths">BibTeX</a> &ndash;
<a href="Epp-SJC-98.pdf">Full paper</a> &ndash;
<a href="//fano.ics.uci.edu/cites/Document/Finding-the-k-shortest-paths.html">Citations</a> &ndash;
<a href="graehl.zip">Graehl implementation</a> &ndash;
<a href="//terra.act.uji.es/REA/">Jim&eacute;nez-Marzal implementations</a> &ndash;
<a href="Shibuya.tar.gz">Shibuya implementation</a> &ndash;
<a href="//www.mat.uc.pt/~eqvm/cientificos/research.html">Martins implementation</a> &ndash;
<a href="//christophercliff.com/eppstein/">Cliff OpenStreetMap demo</a> &ndash;
CiteSeer:
<a href="//citeseer.ist.psu.edu/eppstein94finding.html">TR '94</a>,
<a href="//citeseer.ist.psu.edu/eppstein98finding.html">SJC '98</a> &ndash;
<a href="//portal.acm.org/citation.cfm?id=299886">ACM DL</a>)
<p>
<li><b>Geometric lower bounds for parametric matroid optimization</b>.<br>
D. Eppstein.<br>
<a href="tr.html">Tech. Rep. 95-11</a>, ICS, UCI, 1995.<br>
<a href="//portal.acm.org/citation.cfm?id=225284"><i>27th ACM Symp. Theory of Computing,</i> Las Vegas, 1995, pp. 662&ndash;671</a>.<br>
<a href="Epp-DCG-98.pdf"><i>Disc. Comp. Geom.</i> 20: 463&ndash;476, 1998</a>.
<p>
Considers graphs in which edge weights are linear functions of time.
Shows nonlinear lower bounds on the number of different
<a href="mst.html">minimum spanning trees</a> appearing
over time by translation from geometric problem of lower envelopes of line segments.
A matroid generalization has a better lower bound coming from many faces
in line arrangements, and the uniform matroid problem is
equivalent to the geometric <i>k</i>-set problem.
<p>(<a href="/~eppstein/bibs/eppstein.html#Geometric lower bounds for parametric matroid optimization">BibTeX</a> &ndash;
<a href="//fano.ics.uci.edu/cites/Document/Geometric-lower-bounds-for-parametric-matroid-optimization.html">Citations</a> &ndash;
<a href="//citeseer.ist.psu.edu/eppstein98geometric.html">CiteSeer</a> &ndash;
<a href="//theory.lcs.mit.edu/~dmjones/STOC/References/eppstein1995:662.html">MIT hypertext bibliography</a>)
<p>
<li><b>On triangulating three-dimensional polygons</b>.<br>
<a href="//www.cs.technion.ac.il/~barequet/">G. Barequet</a>, 
<a href="//www.middlebury.edu/~dickerso/">M. Dickerson</a>,
and D. Eppstein.<br>
<a href="//portal.acm.org/citation.cfm?id=237234">
<i>12th ACM Symp. Comp. Geom.,</i> Philadelphia, 1996, pp. 38&ndash;47</a>.<br>
<a href="//doi.org/10.1016/S0925-7721(98)00005-4">
<i>Comp. Geom. Theory &amp; Applications</i> 10: 155&ndash;170, 1998</a>.
<p>
It is NP-complete, given a simple polygon in 3-space,
to find a triangulated simply-connected surface (without extra vertices)
spanning that polygon.  If extra vertices are allowed,
or the surface may be curved,
such a surface exists if and only if the polygon is unknotted;
the complexity of testing knottedness remains open.
Snoeyink has shown that exponentially many extra vertices may be
required for a triangulated spanning disk.
<p>(<a href="/~eppstein/bibs/eppstein.html#On triangulating three-dimensional polygons">BibTeX</a> &ndash;
<a href="ftp://ftp.cs.technion.ac.il/pub/barequet/papers/3dt-socg96.ps.gz">SCG paper</a> &ndash;
<a href="ftp://ftp.cs.technion.ac.il/pub/barequet/papers/3dt-cgta.ps.gz">Full paper</a> &ndash;
<a href="//fano.ics.uci.edu/cites/Document/On-triangulating-three-dimensional-polygons.html">Citations</a> &ndash;
<a href="//citeseer.ist.psu.edu/barequet96triangulating.html">CiteSeer</a> &ndash;
<a href="//portal.acm.org/citation.cfm?id=292813">ACM DL</a>)
<p>
<li><b>The crust and the beta-skeleton: combinatorial curve
reconstruction</b>.<br>
<a href="//www.cs.utexas.edu/users/amenta/">N. Amenta</a>,
<a href="//www.parc.xerox.com/csl/members/bern/">M. Bern</a>,
and D. Eppstein.<br>
<a href="//www.cs.utexas.edu/users/amenta/pubs/crust.ps.gz"><i>Graphical Models &amp; Image Processing</i> 60/2 (2): 125&ndash;135, 1998</a>.
<p>
We consider the problem of "connect the dots": if we have an unknown
smooth curve from which sample points have been selected, we would like
to find a curve through the sample points that approximates the unknown
curve.  We show that if the local sample density is sufficiently high, a
simple algorithm suffices: form the Delaunay
triangulation of the sample points together with their Voronoi vertices,
and keep only those Delaunay edges connecting original sample points.
There have been many follow-up papers suggesting alternative methods,
generalizing the problem to the reconstruction of curves with sharp
corners or to curves and surfaces in higher dimensions, etc.
<p>(<a href="/~eppstein/bibs/eppstein.html#The crust and the $\beta$-skeleton: combinatorial curve reconstruction">BibTeX</a> &ndash;
<a href="//fano.ics.uci.edu/cites/Document/The-crust-and-the-beta-skeleton-combinatorial-curve-reconstruction.html">Citations</a> &ndash;
<a href="//citeseer.ist.psu.edu/amenta98crust.html">CiteSeer</a> &ndash;
<a href="//portal.acm.org/citation.cfm?id=289873">ACM DL</a>)
<p>
<li><b>Fast hierarchical
clustering and other applications of dynamic closest pairs</b>.<br>
D. Eppstein.<br>
<a href="//portal.acm.org/citation.cfm?id=315030">
<i>9th ACM-SIAM Symp. Discrete Algorithms,</i>
San Francisco, 1998, pp. 619&ndash;628</a>.<br>
<a href="//arXiv.org/abs/cs.DS/9912014">arXiv:cs.DS/9912014</a>.<br>
<a href="//doi.org/10.1145/351827.351829"><i>J. Experimental
Algorithmics</i> 5 (1): 1&ndash;23, 2000</a>.
<p>
This paper shows how to use my dynamic closest pair data structure
from "<a href="p-dynmst.html">Dynamic Euclidean minimum
spanning trees</a>" for some non-geometric problems including
hierarchical clustering,
<a href="graph-match.html">greedy matching</a>,
and <a href="tsp.html">TSP heuristics</a>.
Experiments show variants of my data structures to be faster than
previously used heuristics.
<p>(<a href="../projects/pairs/">Source code and experimental data</a> &ndash; 
<a href="/~eppstein/bibs/eppstein.html#Fast hierarchical clustering and other applications of dynamic closest pairs">BibTeX</a> &ndash;
<a href="/~eppstein/projects/pairs/Papers/Epp-SODA-98.pdf">SODA paper</a> &ndash;
<a href="//fano.ics.uci.edu/cites/Document/Fast-hierarchical-clustering-and-other-applications-of-dynamic-closest-pairs.html">Citations</a> &ndash;
<a href="//citeseer.ist.psu.edu/eppstein98fast.html">CiteSeer</a> &ndash;
<a href="//portal.acm.org/citation.cfm?id=351829">ACM DL</a> &ndash;
<a href="//www.jea.acm.org/2000/EppsteinDynamic/">JEA home page</a>)
<p>
<li><b>Raising roofs, crashing cycles, and playing pool: applications of
a data structure for finding pairwise interactions</b>.<br>
D. Eppstein and 
<a href="//compgeom.cs.uiuc.edu/~jeffe/">J. Erickson</a>.<br>
<a href="//portal.acm.org/citation.cfm?id=276891">
<i>14th ACM Symp. Comp. Geom.,</i> Minneapolis, 1998, pp. 58&ndash;67</a>.<br>
<i>Disc. Comp. Geom.</i> 22 (4): 569&ndash;592, 1999 (special issue for SCG 1998).
<p>
We use my dynamic closest pair data structure
from "<a href="p-dynmst.html">Dynamic Euclidean minimum
spanning trees</a>" to detect collisions among a collection of moving
objects in sublinear time per collision.  As one application, we can
construct the <a href="geom-ss.html">straight skeleton</a> of Aichholzer et al (and the mitered
offset curves from which it is defined) in subquadratic time.
<p>(<a href="//compgeom.cs.uiuc.edu/~jeffe/pubs/cycles.html">Jeff's publications page and copy of the journal version</a> &ndash; 
<a href="/~eppstein/bibs/eppstein.html#Raising roofs, crashing cycles, and playing pool: applications of a data structure for finding pairwise interactions">BibTeX</a> &ndash;
<a href="//fano.ics.uci.edu/cites/Document/Raising-roofs-crashing-cycles-and-playing-pool-applications-of-a-data-structure-for-finding-pairwise-interactions.html">Citations</a> &ndash;
<a href="//citeseer.ist.psu.edu/eppstein98raising.html">CiteSeer</a>)
<p>
<li><b>Geometric thickness of complete graphs</b>.<br>
<a href="/~dillenco/">M. Dillencourt</a>,
D. Eppstein, and 
<a href="//www.ics.uci.edu/~dan/">
D. S. Hirschberg</a>.<br>
<a href="/~dan/pubs/thick.ps.gz"><i>6th Int. Symp. Graph Drawing,</i>
Montreal, August 1998</a>.<br>
Springer, <i>Lecture Notes in
Comp. Sci.</i> 1547, 1998, pp. 102&ndash;110.<br>
<a href="//arXiv.org/abs/math.CO/9910185">arXiv:math.CO/9910185</a>.<br>
<a href="//doi.org/10.7155/jgaa.00023"><i>J. Graph
Algorithms and Applications</i> 4 (3): 5&ndash;17, 2000</a>
(special issue for GD98).
<p>
We define a notion of geometric thickness, intermediate between the
previously studied concepts of graph thickness and book thickness: a
graph has geometric thickness T if its vertices can be embedded in the
plane, and its edges partitioned into T subsets, so that each subset
forms a planar straight line graph.  We then give upper and lower bounds
on the geometric thickness of complete graphs.
<p>(<a href="//link.springer.de/link/service/series/0558/bibs/1547/15470102.htm">Springer abstract</a> &ndash;
<a href="/~eppstein/bibs/eppstein.html#Geometric thickness of complete graphs">BibTeX</a> &ndash;
<a href="//citeseer.ist.psu.edu/dillencourt99geometric.html">CiteSeer</a> &ndash;
<a href="//fano.ics.uci.edu/cites/Document/Geometric-thickness-of-complete-graphs.html">Citations</a> &ndash;
<a href="//portal.acm.org/citation.cfm?id=729087">ACM DL</a> &ndash;
<a href="//gdea.informatik.uni-koeln.de/archive/00000287/">GDEA</a>)
<p>
<li><b>A disk-packing algorithm for an origami magic trick</b>.<br>
<a href="//www.parc.xerox.com/csl/members/bern/">M. Bern</a>,
<a href="//erikdemaine.org/">E. Demaine</a>,
D. Eppstein, and
B. Hayes.<br>
<a href="BerDemEpp-Fun-98.ps.gz"><i>Int. Conf. Fun with
Algorithms</i>, Elba, June 1998.<br>
Proceedings in Informatics 4, Carleton Scientific, Waterloo, Canada, 1999,
pp. 32&ndash;42</a>.<br>
<i>Origami<sup>3</sup>: Proc. 3rd
Int. Mtg. Origami Science, Math, and Education (Asilomar,
California, 2001)</i>, A K Peters, 2002, pp. 17&ndash;28.
<p>
We apply techniques from "<a href="p-qpack.html">Quadrilateral meshing
by circle packing</a>" to a magic trick of Houdini:
fold a piece of paper so that with one straight cut, you can form your
favorite polygon.
<p>(<a href="//db.uwaterloo.ca:80/~eddemain/papers/FUN98/">preprint
at Erik's web site</a> &ndash;
<a href="/~eppstein/bibs/eppstein.html#A disk-packing algorithm for an origami magic trick">BibTeX</a> &ndash;
<a href="//citeseer.ist.psu.edu/bern98diskpacking.html">CiteSeer</a>)
<p>
<li><b>Parametric and kinetic minimum spanning trees</b>.<br>
<a href="//www.cs.duke.edu/~pankaj/">P. K. Agarwal</a>,
D. Eppstein,
<a href="//robotics.stanford.edu/users/guibas/bio.html">L. J. Guibas</a>,
and
<a href="//www.henzinger.com/monika/">M. R. Henzinger</a>.<br>
<a href="AgaEppGui-FOCS-98.pdf">
<i>39th IEEE Symp. Foundations of Comp. Sci.</i>, 1998, pp. 596&ndash;605.</a>.
<p>
We describe algorithms for maintaining the
<a href="mst.html">minimum spanning tree</a> in a graph
in which the edge weights are piecewise linear functions of time that
may change unpredictably.  We solve the problem in time
O(n<sup>2/3</sup> polylog n)
per combinatorial change to the tree for general graphs, and in time
O(n<sup>1/4</sup> polylog n) per combinatorial change to the tree for planar graphs.
<p>(<a href="/~eppstein/bibs/eppstein.html#Parametric and kinetic minimum spanning trees">BibTeX</a> &ndash;
<a href="AgaEppGui-FOCS-98-slides.pdf">FOCS '98 talk slides</a> &ndash;
<a href="//fano.ics.uci.edu/cites/Document/Parametric-and-kinetic-minimum-spanning-trees.html">Citations</a> &ndash;
<a href="//citeseer.ist.psu.edu/agarwal98parametric.html">CiteSeer</a> &ndash;
<a href="//portal.acm.org/citation.cfm?id=796402">ACM DL</a>)
<p>
<li><b>Incremental and decremental maintenance of planar width</b>.<br>
D. Eppstein.<br>
<a href="//arXiv.org/abs/cs.CG/9809038">arXiv:cs.CG/9809038</a>.<br>
<a href="//portal.acm.org/citation.cfm?id=315077">
<i>10th ACM-SIAM Symp. Discrete Algorithms,</i>
Baltimore, 1999, pp. S899-S900</a>.<br>
<a href="//doi.org/10.1006/jagm.2000.1107"><i>J.
Algorithms</i> 37 (2): 570&ndash;577, 2000</a>.
<p>
We show how to maintain the width of a planar point set, subject to
insertions or deletions (but not both) in time
O(<i>n</i><sup><i>c</i></sup>) per update for any <i>c</i>&nbsp;&gt;&nbsp;0.
The idea is to apply our <a href="p-dynmst.html">dynamic closest pair
data structure</a> to an appropriate measure of distance between
pairs of convex hull features.
<p>(<a href="/~eppstein/bibs/eppstein.html#Incremental and decremental maintenance of planar width">BibTeX</a> &ndash;
<a href="//fano.ics.uci.edu/cites/Document/Incremental-and-decremental-maintenance-of-planar-width.html">Citations</a> &ndash;
<a href="Epp-SODA-99-slides.pdf">SODA talk slides</a> &ndash;
<a href="//portal.acm.org/citation.cfm?id=363331">ACM DL</a>)
<p>
<li><b>Regression depth and center points</b>.<br>
<a href="//www.cs.utexas.edu/users/amenta/">N. Amenta</a>,
<a href="//www.parc.xerox.com/csl/members/bern/">M. Bern</a>,
D. Eppstein, and
<a href="//www-sal.cs.uiuc.edu/~steng/">S.-H. Teng</a>.<br>
<a href="//arXiv.org/abs/cs.CG/9809037">arXiv:cs.CG/9809037</a>.<br>
<a href="//www.cs.brown.edu/cgc/cgc98/"><i>3rd CGC
Worksh. Computational Geometry</i></a>, Brown Univ., 1998.<br>
<a href="//link.springer-ny.com/link/service/journals/00454/bibs/0023003/00230305.html"><i>Disc. Comp. Geom.</i> 23 (3): 305&ndash;323, 2000</a>.
<p>
We show that, for any set of n points in d dimensions, there exists a
hyperplane with
<a href="geom-deep.html">regression depth</a> at least ceiling(n/(d+1)). as had
been conjectured by Rousseeuw and Hubert. Dually, for any
arrangement of n hyperplanes in d dimensions there exists a point
that cannot escape to infinity without crossing at least
ceiling(n/(d+1)) hyperplanes. We also apply our approach to
related questions on the existence of partitions of the data into
subsets such that a common plane has nonzero regression depth in
each subset, and to the computational complexity of regression
depth problems.
<p>(<a href="/~eppstein/bibs/eppstein.html#Regression depth and center points">BibTeX</a> &ndash;
<a href="//fano.ics.uci.edu/cites/Document/Regression-depth-and-center-points.html">Citations</a> &ndash;
<a href="//citeseer.ist.psu.edu/amenta98regression.html">CiteSeer</a>)
<p>
<li><b>Guest editor's forward to special issue on dynamic graph algorithms</b>.<br>
D. Eppstein.<br>
<i>Algorithmica</i> 22 (3): 233&ndash;234, 1998.
<p>
</ul>

<hr><p>
<a href="year.html">Years</a> &ndash;
<a href="/~eppstein/pubs/">Publications</a> &ndash;
<a href="/~eppstein/">David Eppstein</a> &ndash;
<a href="/~theory/">Theory Group</a> &ndash;
<a href="/">Inf. &amp; Comp. Sci.</a> &ndash;
<a href="//www.uci.edu/">UC Irvine</a>
<p>
<small>Semi-automatically <a href="filter.html">filtered</a>
from a common source file.</small>
</body></html>
Mis_redirected¢DtypeEvalueôIhttp_code¢DtypeEvalueÈQdownload_complete¢DtypeEvalueõ