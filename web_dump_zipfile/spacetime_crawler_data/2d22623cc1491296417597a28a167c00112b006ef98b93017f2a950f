¦Ifinal_url¡DtypeLhttp_headers¢DtypeEvalue‡¢Ak¢DtypeEvalueNContent-LengthAv¢DtypeEvalueD5354¢Ak¢DtypeEvalueMAccept-RangesAv¢DtypeEvalueEbytes¢Ak¢DtypeEvalueFServerAv¢DtypeEvalueX4Apache/2.4.6 (CentOS) OpenSSL/1.0.2k-fips SVN/1.7.14¢Ak¢DtypeEvalueMLast-ModifiedAv¢DtypeEvalueXWed, 06 Jul 2005 17:27:26 GMT¢Ak¢DtypeEvalueDETagAv¢DtypeEvalueT"14ea-3fb3e83af9b80"¢Ak¢DtypeEvalueDDateAv¢DtypeEvalueXThu, 31 Jan 2019 02:24:47 GMT¢Ak¢DtypeEvalueLContent-TypeAv¢DtypeEvalueXtext/html; charset=UTF-8Kraw_content¢DtypeEvalueYê<HTML><HEAD>
<TITLE> Optimal binary search trees </TITLE>
</HEAD><BODY>
<H2>Optimal binary search trees</H2>

(<small>useful as a static dictionary</small>)
<P>
Given an ordered set S =
<I>a</I><sub>1</sub> &lt;
<I>a</I><sub>2</sub> &lt; ...
<I>a</I><sub><I>n</I></sub>,
we wish to process sequences of MEMBER queries. &nbsp;
We also know the probability of various requests occurring:
<P>
<I>p<sub>i</sub></I> = Prob[ MEMBER(<I>a<sub>i</sub></I>,S) is asked],
for <I>i</I> = 1...<I>n</I>
<BR>
<I>q<sub>i</sub></I> = Prob[ MEMBER(<I>x</I>,S) is asked] &nbsp;
with <I>a<sub>i</sub></I> &lt; <I>x</I> &lt; <I>a</I><sub><I>i</I>+1</sub>,
for <I>i</I> = 0...<I>n</I>
<BR>
where <I>a</I><sub>0</sub> = <I>-</I>&infin;
and <I>a</I><sub><I>n</I>+1</sub> = +&infin;
<P>
To help analyze the time complexity, we add leaves to the binary
search tree wherever we have a null link.
<P>
If <I>x</I> is the label of node <I>v</I>
then cost( MEMBER(<I>x</I>,S) ) = 1 + depth(<I>v</I>).
<P>
If <I>x</I> not in set S and
<I>a<sub>i</sub></I> &lt; <I>x</I> &lt; <I>a</I><sub><I>i</I>+1</sub>
then cost( MEMBER(<I>x</I>,S) ) = depth(leaf <I>i</I>).
<P>
The average time complexity for this tree can be found by summing the
costs of accessing a node mutiplied by the probability of that access.
<P>
cost(binary search tree T) =
&sum;<sub><I>i</I> = 1 to <I>n</I></sub>
( <I>p<sub>i</sub></I> [1 + depth(<I>a<sub>i</sub></I>)] ) +
&sum;<sub><I>i</I> = 0 to <I>n</I></sub>
( <I>q<sub>i</sub></I> depth(leaf <I>i</I>) )
<P>
<U>Problem</U>: &nbsp;
Given the <I>p</I>'s and <I>q</I>'s, find T to minimize cost.
<P>
The divide-and-conquer approach suggests determining which element
belongs at the root and then determining what each of the subtrees
looks like. &nbsp;
There seems to be no easy way of determining what the root should be,
which means that we would have to solve 2<I>n</I> subproblems,
as each of the <I>n</I> elements could be at the root and
for each choice we must solve the left and right subtrees. &nbsp;
(As an exercise, determine the time complexity of this recursive
approach. &nbsp; Start by giving an explicit recurrence.) &nbsp;
This is too many for recursion, so we use dynamic programming.
<P>
For 0 &le; <I>i &lt; j &le; n</I>, let
<BR>
&nbsp; T<sub><I>i, j</I></sub> = min cost tree for
problem {<I>a</I><sub><I>i</I>+1</sub>...<I>a<sub>j</sub></I>}
<BR>
&nbsp; <I>c<sub>i, j</sub></I> = cost(T<sub><I>i, j</I></sub>)
<BR>
&nbsp; <I>r<sub>i, j</sub></I> = root(T<sub><I>i, j</I></sub>)
<BR>
and define weight <I>w<sub>i, j</sub></I> =
<I>q<sub>i</sub></I>
+ (<I>p</I><sub><I>i</I>+1</sub>+<I>q</I><sub><I>i</I>+1</sub>)
+ ...
+ (<I>p<sub>j</sub></I>+<I>q<sub>j</sub></I>)
<P>
T<sub><I>i, j</I></sub> consists of a root containing
<I>a<sub>k</sub></I>, for some <I>k</I> and left and right subtrees
of the root, with the left subtree being an optimal (min cost)
tree T<sub><I>i, k-</I>1</sub> and the right subtree being
T<sub><I>k, j</I></sub>.
<P>
Also, boundary conditions:
<BR>
&nbsp; T<sub><I>i, i</I></sub> = the empty tree
<BR>
&nbsp; <I>w<sub>i, i</sub></I> = <I>q<sub>i</sub></I>
<BR>
&nbsp; <I>c<sub>i, i</sub></I> = 0
<P>
In T<sub><I>i, j</I></sub>, the depth of all vertices in the
subtrees is precisely 1 more than what the depths were in
subtrees T<sub><I>i, k-</I>1</sub> and T<sub><I>k, j</I></sub>. &nbsp;
Therefore,
<BR>
<I>c<sub>i, j</sub></I>
= (<I>c</I><sub><I>i, k-</I>1</sub> + <I>w</I><sub><I>i, k-</I>1</sub>)
+ <I>p<sub>k</sub></I>
+ (<I>c<sub>k, j</sub></I> + <I>w<sub>k, j</sub></I>)
<BR>
&nbsp; &nbsp; &nbsp; &nbsp; = <I>w<sub>i, j</sub></I> +
<I>c</I><sub><I>i, k-</I>1</sub> + <I>c<sub>k, j</sub></I>, &nbsp;
for some <I>k</I>
<P>
The optimal T<sub><I>i, j</I></sub> will have root <I>a<sub>k</sub></I>
that minimizes the sum
<I>c</I><sub><I>i, k-</I>1</sub> + <I>c<sub>k, j</sub></I>.
<P>
<U>Construction of optimal binary search tree</U>
<PRE>
    <B>for</B> i := 0 <B>to</B> n <B>do</B>
       w<sub>i,i</sub> := q<sub>i</sub>
       c<sub>i,i</sub> := 0
       r<sub>i,i</sub> := 0
    <B>for</B> length := 1 <B>to</B> n <B>do</B>
       <B>for</B> i := 0 <B>to</B> n-length <B>do</B>
          j := i + length
          w<sub>i,j</sub> := w<sub>i,j-1</sub> + p<sub>j</sub> + q<sub>j</sub>
          m := value of k (with i &lt; k &le; j) which minimizes (c<sub>i,k-1</sub>+c<sub>k,j</sub>)
          c<sub>i,j</sub> := w<sub>i,j</sub> + c<sub>i,m-1</sub> + c<sub>m,j</sub>
          r<sub>i,j</sub> := m
          Leftson(r<sub>i,j</sub>) := r<sub>i,m-1</sub>
          Rightson(r<sub>i,j</sub>) := r<sub>m,j</sub>
</PRE>
<P>
The time complexity of this algorithm is <I>O</I>(<I>n</I><sup>3</sup>).
<P>
Making a slight change
will reduce the complexity to be <I>O</I>(<I>n</I><sup>2</sup>). &nbsp;
(<small>See, for example, Knuth v.3, 2nd ed.,p.436-9 and p.456#27</small>)
<P>
Modify the range of considered values of <I>k</I>:
<P>
<PRE>
          <B>if</B> length=1 <B>then</B>
             m := j
          <B>else</B>
             m := value of k (with r<sub>i,j-1</sub> &le; k &le; r<sub>i+1,j</sub>) which minimizes (c<sub>i,k-1</sub>+c<sub>k,j</sub>)
</PRE>
<P>
<HR>
<A HREF="http://www.ics.uci.edu/~dan">
Dan Hirschberg </A> <BR>
<ADDRESS>
Computer Science Department<BR>
University of California, Irvine, CA 92697-3435
</ADDRESS>
<tt>dan (at) ics.uci.edu</tt><br>
Last modified: Oct 28, 2003
</BODY></HTML>
Mis_redirected¢DtypeEvalueôIhttp_code¢DtypeEvalueÈQdownload_complete¢DtypeEvalueõ