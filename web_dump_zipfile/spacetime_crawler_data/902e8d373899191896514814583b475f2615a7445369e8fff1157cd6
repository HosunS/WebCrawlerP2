¦Ifinal_url¡DtypeLhttp_headers¢DtypeEvalue‡¢Ak¢DtypeEvalueNContent-LengthAv¢DtypeEvalueD2026¢Ak¢DtypeEvalueMAccept-RangesAv¢DtypeEvalueEbytes¢Ak¢DtypeEvalueFServerAv¢DtypeEvalueX„Apache/2.4.6 (CentOS) OpenSSL/1.0.2k-fips SVN/1.7.14 mod_wsgi/3.4 Python/2.7.5 Phusion_Passenger/4.0.53 mod_perl/2.0.10 Perl/v5.16.3¢Ak¢DtypeEvalueMLast-ModifiedAv¢DtypeEvalueXWed, 17 Apr 2013 01:54:13 GMT¢Ak¢DtypeEvalueDETagAv¢DtypeEvalueS"7ea-4da84c33dfb40"¢Ak¢DtypeEvalueDDateAv¢DtypeEvalueXSun, 10 Feb 2019 14:33:22 GMT¢Ak¢DtypeEvalueLContent-TypeAv¢DtypeEvalueXtext/plain; charset=UTF-8Kraw_content¢DtypeEvalueYê/*
  $Id$

  Copyright (C) 2008 by The Regents of the University of California
	
  Redistribution of this file is permitted under
  the terms of the BSD license
    
  Date: 04/04/2008
  Author: Alexander Behm <abehm (at) ics.uci.edu>
*/

#include "filtertypes.h"
#include "util/misc.h"

AbstractFilter* 
AbstractFilter::
loadFilterInstance(ifstream& fpIn) {
  FilterType filterType;
  fpIn.read((char*)&filterType, sizeof(FilterType));

  switch(filterType) {
  case FT_LENGTH: return new LengthFilter(fpIn); break;
  case FT_CHECKSUM: return new ChecksumFilter(fpIn); break;
  default: {
    cout << "WARNING: attempt to read filter from file failed. Unknown filter type." << endl;
    return NULL;
  } break;
  }
}

LengthFilter::
LengthFilter(ifstream& fpIn) {
  ft = FT_LENGTH;
  fpIn.read((char*)&maxStrLength, sizeof(unsigned));
}

unsigned 
LengthFilter::
getFilterLbound() const {
  return 0;
}

unsigned 
LengthFilter::
getFilterUbound() const  {
  return maxStrLength;  
}

unsigned
LengthFilter::
getKey(const string& s) const  {
  return s.length();
}

AbstractFilter* 
LengthFilter::
clone() const {
  return new LengthFilter(maxStrLength);
}

void
LengthFilter::
saveFilterInstance(ofstream& fpOut) const {
  fpOut.write((const char*)&ft, sizeof(FilterType));
  fpOut.write((const char*)&maxStrLength, sizeof(unsigned));
}

ChecksumFilter::
ChecksumFilter(ifstream& fpIn) {
  ft = FT_CHECKSUM;
  fpIn.read((char*)&maxStrLength, sizeof(unsigned));  
  maxChecksum = maxStrLength * CHECKSUM_ASCII_MAX;
}

unsigned 
ChecksumFilter::
getFilterLbound() const {
  return 0;
}

unsigned 
ChecksumFilter::
getFilterUbound() const {
  return maxChecksum;
}

unsigned
ChecksumFilter::
getKey(const string& s) const { 
  return checksum(s);
}

AbstractFilter* 
ChecksumFilter::
clone() const {
  return new ChecksumFilter(maxStrLength);
}

void
ChecksumFilter::
saveFilterInstance(ofstream& fpOut) const {
  fpOut.write((const char*)&ft, sizeof(FilterType));
  fpOut.write((const char*)&maxStrLength, sizeof(unsigned));
}
Mis_redirected¢DtypeEvalueôIhttp_code¢DtypeEvalueÈQdownload_complete¢DtypeEvalueõ