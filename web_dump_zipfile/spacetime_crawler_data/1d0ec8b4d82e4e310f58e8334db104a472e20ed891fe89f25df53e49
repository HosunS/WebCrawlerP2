¦Ifinal_url¢DtypeEvaluexChttps://www.ics.uci.edu/~jacobson/cs122b/Project/06-CFunctions.htmlLhttp_headers¢DtypeEvalue‡¢Ak¢DtypeEvalueNContent-LengthAv¢DtypeEvalueE10146¢Ak¢DtypeEvalueMAccept-RangesAv¢DtypeEvalueEbytes¢Ak¢DtypeEvalueFServerAv¢DtypeEvalueX4Apache/2.4.6 (CentOS) OpenSSL/1.0.2k-fips SVN/1.7.14¢Ak¢DtypeEvalueMLast-ModifiedAv¢DtypeEvalueXThu, 14 May 2009 05:26:30 GMT¢Ak¢DtypeEvalueDETagAv¢DtypeEvalueT"27a2-469d891fd6d80"¢Ak¢DtypeEvalueDDateAv¢DtypeEvalueXSun, 27 Jan 2019 06:35:07 GMT¢Ak¢DtypeEvalueLContent-TypeAv¢DtypeEvalueXtext/html; charset=UTF-8Kraw_content¢DtypeEvalueY'¢<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
    "http://www.w3.org/TR/html4/loose.dtd">
<html><head>
  <title>Writing and Loading Dynamic C Functions for PostgreSQL Databases Running Under Windows</title>
<meta http-equiv="Content-type" content="text/html; charset=iso-8859-1">
<link rel="stylesheet" href="../course.css" type="text/css">
</head>

<body>
<div class="title">
<center>
<h2>Writing and Loading Dynamic C Functions for  PostgreSQL Databases Running Under Windows</h2>
</center>
</div>

<div class="section">
<hr>
<h3>Overview</h3>
</div>

<p> To add dynamic functions to a PostgreSQL database, they must be written in C and contain calls to certain postgreSQL-provided C code that makes them compatible with the protocols PostgreSQL uses to call functions; that code is in numerous PostgreSQL-provided "include" (C header) files and the library postgres.lib. The C source is compiled and then linked to form a "dynamic linked library" (DLL) that's placed into the directory where postgreSQL searches for such libraries. Then, via psql or pgAdmin or similar tool, the CREATE FUNCTION SQL command is used to add the functions into the postgreSQL database; authorized users can now employ them. Completing all these steps is not dificult&#151;once you know what they are&#151;but they must be done carefully to avoid errors.</p>

<div class="section">
<hr>
<h3>References</h3>
</div>
<ul>
	<li><a href="http://www.postgresql.org/docs/8.3/interactive/xfunc-c.html">Dynamic C Language Functions - Section 34.9 of the postgreSQL manual</a>
	<li><a href="http://www.postgresql.org/docs/8.3/interactive/sql-createfunction.html">CREATE FUNCTION page of the postgreSQL manual</a>
	<li><a href="http://www.postgresql.org/docs/8.3/interactive/sql-dropfunction.html">DROP FUNCTION page of the postgreSQL manual</a>
	<li><a href="http://www.postgresql.org/docs/8.3/interactive/sql-syntax-lexical.html">String Constants, Section 4.1.2.1 of the postgreSQL manual</a>
</ul>

<div class="section">
<hr>
<h3>Writing, Compiling and Linking</h3>
</div>

 To illustrate writing, compiling and linking of C functions for inclusion in a postgreSQL database, we provide  <a href="http://www.ics.uci.edu/~jacobson/cs122b/Project/06-Phase3SuppSW/testFunctions.c">testFunctions.c</font></a>, which contains two functions. The first, <font class = "codeFaceSmall">add_one</font>, simply adds 1 to its parameter and returns the result, thus showing how numeric operations are handled. The second, <font class = "codeFaceSmall">concat_text</font>, concatenates two strings and returns the result, to show how text is processed. Do review this program, in conjunction with the points below, to see how this program is fashioned:</p>
 
<ul>
<li><p>Some symbols in the files included in testFunctions.c need to be redefined; they were written for a Unix environment, and some changes are needed for them to work properly with C in a Windows environment. The changes are quite technical, so we provide the redefinitions for you at the start of the program&#151;you're not expected to be an expert in the differences between Unix and Window DLLs. (Programmers rely on the expertise of other technical experts all the time, even when they don't notice it: Every time you use a source or object library or software written by others, you are using the results of their knowledge.) If you're interested in the details of why these changes are necessary, see the comments in the code and the documents they reference.</p></li>

<li><p>The symbols that start with PG are aliases for C statements or define C macros needed for C functions to correctly interface with postgreSQL. For details on the purpose and behavior of the  PG symbols not defined in the code itself, see Section 34.9 of the postgreSQL manual (reference above).</li>

<li><p> Text variables in postgreSQL-compatible C functions  are (usually) of type <font class = "codefacesmall">text</font>, a type provided by postgres.lib that corresponds to the VARCHAR data type SQL employs. VARCHAR/text variables do not end in the "\0" that terminate standard C strings, so the standard C functions that manipulate strings, such as the string length function <font class = "codeFaceSmall">strlen()</font>, do not work properly. In particular, using such functions can actually change the contents of the <font class = "codeFaceSmall">text</font> data! (A common effect of using C string functions: When you call your string-handling procedure the first time, it produces a correct result; then, if you immediately call it again with the same parameters, it produces a different, incorrect result.) </p></li>

<li><p><font class = "codeFaceSmall">VARCHAR</font> variables consist of header and data areas. <font class = "codeFaceSmall">VARSIZE</font> is the size of the entire <font class = "codeFaceSmall">VARCHAR</font> variable; <font class = "codeFaceSmall">VARHDRSZ</font> is the size of its header; subtracting the two gives the size of the actual string data. <font class = "codeFaceSmall">VARDATA()</font> returns the actual contents of the string stored in the <font class = "codeFaceSmall">VARCHAR</font>.</p></li>
</ul>

<p>Compile the file (in C), and link it to become a DLL:</p>

<ul>
<li><p> Go to <font class = "codefacesmall">Start -> All Programs -> Microsoft Visual C++ 2008 Express Edition -> Visual Studio Tools -> Visual Studio 2008 Command Prompt.</font> This step calls up a command-line window whence you can invoke the C compiler and linker. Do not use the normal Windows command prompt: the Visual Studio command prompt "knows where to find" a number of C headers and libraries needed to compile and link C programs.

<li>Compile the code. if you have PostgreSQL installed in the default directory,  <font class = "codefacesmall">\Program Files\postgreSQL\8.3</font>, the command line is

<pre>
cl /I "\Program Files\postgreSQL\8.3\include\server" /I "\Program Files\postgreSQL\8.3\include\server\port\win32" /c &lt;path to to where you have stored testFunctions.c&gt;testFunctions.c
</pre>

<p><font class = "codefacesmall">cl</font> is the C compiler (it can also link, but we are not using that capability; for our task, it's easier to call the linker directly). <font class = "codefacesmall">/I</font> indicates directories to search for include files, <font class = "codefacesmall">/c</font> indicates the file to compile. The quotes are needed around any path name that includes spaces so that the spaces are not taken as switch separators.</p></li>

<li>Link the resulting object file to make a DLL: if you have postgreSQL installed in the default directory, the command line is

<pre>
 link /DLL testFunctions.obj "\Program Files\postgreSQL\8.3\lib\postgres.lib"
</pre>

<p><font class = "codefacesmall">link</font> is the linker. <font class = "codefacesmall">/DLL</font> says to make a DLL file. postgres.lib needs to be linked with testFunctions.obj so that code needed for the DLL to communicate with postgreSQL is present. </p></li>
</ul>

<div class="section">
<hr>
<h3>Adding Functions to the Database</h3>
</div>

</ul>
<li><p>Place testFunctions.dll into a folder <i>that does not have any spaces in its path name</i>: If the path has a space, when you (try to) add the function to the database, you will get the error message "%1 is not a valid Win32 application"! Also remember that when you use a blackslash character in postgress strings, it must be escaped: wherever you want "\" to be part of the string, enter "\\".</p>

<li><p>Link the DLL into the database. To do so, log into the database via psql or pgAdmin as the postgres user of the database. (Since postgreSQL considers C functions "unsafe," only superusers can add C functions to a database.)</p>

<p> Add the functions to the database via the CREATE FUNCTION command:</p>

<pre>
CREATE FUNCTION add_one(INTEGER) RETURNS INTEGER AS E'&lt;path to DLL&gt;\\testFunctions', 'add_one' LANGUAGE C STRICT ; 
CREATE FUNCTION concat(text, text) RETURNS text AS E'&lt;path to DLL&gt;\\testFunctions', 'concat_text' LANGUAGE C STRICT ;
</pre>
</ul>

<p>(The E at the front of the string ensures that the \\ escaping mechanism is interpreted properly; see the String Constants reference, above, for details.)</p>

<p>You can check that the functions were added, and are working properly, by entering psql (or pgAdmin) as a user (e.g., testuser) and executing the functions:</p>

<pre>
fabflixs# SELECT add_one(1) ;
fabflixs# SELECT concat('Hello ', 'world') ;
</pre>

<p>If you need to remove a function from the database, you use the DROP FUNCTION command; for instance:</p>

<pre>
fabflixs# DROP FUNCTION add_one(integer) ;
</pre>

<p>If you want to replace a function with a new one with the same name and parameters, use CREATE OR REPLACE FUNCTION, as in</p>

<pre>
CREATE OR REPLACE FUNCTION add_one(INTEGER) RETURNS INTEGER AS E'&lt;path to DLL&gt;\\testFunctions', 'add_one' LANGUAGE C STRICT ; 
</pre>

<font face="Helvetica" size=2>
<p>Written by Chen Li, Winter 2005
<br>Minor revisions made by Norman Jacobson for the Spring 2005 offering of ICS185, May 2005
<br>Additional revisions, including additional comments about computing string lengths, made by Norman Jacobson, May 2005
<br>Revised to include updates to reflect postgresql 8.1.4 made by Chen Li and Shengyue in their version of Phase 3 and 
<br>&nbsp;&nbsp;other minor changes for clarity, by Norman Jacobson, April 2007
<br>Minor revisions by Norman Jacobson, September 2007
<br>A major revision of "A Primer on Writing Dynamic C Functions in PostgreSQL" to correct problems with provided postgres header files and to reflect how C functions are written, 
<br>&nbsp;&nbsp;compiled and linked under postgreSQL 8.3.3 running under Windows, by Norman Jacobon, September 2008
<br>Fix of minor typo in link command line, by Norman Jacobson, November 2008
<br>Major revisions to compile line and CREATE FUNCTION lines to reflect posrgreSQL 8.3.7; additions to discuss replacing and dropping functions; adding of references; correction of some minor typos, by Norman Jacobson, March, April & May 2009
</p>
</font>

</body> 
</html>
Mis_redirected¢DtypeEvalueõIhttp_code¢DtypeEvalueÈQdownload_complete¢DtypeEvalueõ