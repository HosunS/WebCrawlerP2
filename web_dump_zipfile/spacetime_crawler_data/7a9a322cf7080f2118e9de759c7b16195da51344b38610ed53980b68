¦Ifinal_url¡DtypeLhttp_headers¢DtypeEvalueˆ¢Ak¢DtypeEvalueNContent-LengthAv¢DtypeEvalueE15572¢Ak¢DtypeEvalueSContent-DispositionAv¢DtypeEvalueX4attachment; filename=cs122b-2018-winter-project1.txt¢Ak¢DtypeEvalueJSet-CookieAv¢DtypeEvalueXitrac_session=4c7752bbe156263a810fa1f8; expires=Tue, 07 May 2019 20:18:29 GMT; httponly; Path=/wiki/public¢Ak¢DtypeEvalueJKeep-AliveAv¢DtypeEvalueRtimeout=5, max=100¢Ak¢DtypeEvalueFServerAv¢DtypeEvalueX„Apache/2.4.6 (CentOS) OpenSSL/1.0.2k-fips SVN/1.7.14 mod_wsgi/3.4 Python/2.7.5 Phusion_Passenger/4.0.53 mod_perl/2.0.10 Perl/v5.16.3¢Ak¢DtypeEvalueJConnectionAv¢DtypeEvalueJKeep-Alive¢Ak¢DtypeEvalueDDateAv¢DtypeEvalueXWed, 06 Feb 2019 20:18:29 GMT¢Ak¢DtypeEvalueLContent-TypeAv¢DtypeEvalueXtext/plain;charset=utf-8Kraw_content¢DtypeEvalueY<Ô[[PageOutline]]

= CS122B: Project 1 =
'''Due: Week 2 Thursday, 1/18/2018, 11:45pm. Due on Github.'''[[BR]]

= Tasks =
 1. Setup Apache Tomcat (on your development machine);
 1. Setup an Amazon AWS instance
 1. Join Github Organization and create a repo for your team.
 1. Create a MySQL database with provided movie info (on your development machine);
 1. Implement the Movie List, Single Movie, and Single Star page of the Fablix Application

----




= Task 1: Setup Apache Tomcat =
We assume you already have Java installed on your machine. We recommend at least Java 8.

Download and install the latest Apache Tomcat from https://tomcat.apache.org/download-80.cgi#8.5.24 on your development machine. Go to "8.5.24" -> "Binary Distributions" -> "Core", for Mac and Linux, download the "zip" file, for Windows, download the "32-bit or 64-bit Windows zip".Unzip the downloaded file.

To start the Tomcat server, go to the '''bin''' folder,

For Windows users, run "startup.bat". 

For Mac and Linux users, go to the bin directory in terminal and run "startup.sh". If you encounter errors, you may need to give permission to them by running: {{{ sudo chmod +x *.sh }}}

Open your browser and go to localhost:8080. You should see this interface:

[[Image(wiki:cs122b-2018-winter-project1:tomcat-startup-interface.png)]]


Then you need to add a new admin user to Tomcat. Go to '''conf''' folder and open "tomcat-users.xml". Add the following line between the {{{ <tomcat-users>  </tomcat-users> }}} tags.


{{{
<user username="admin" password="admin" roles="manager-gui,admin-gui" />
}}}

Be sure to '''change the password'''! Otherwise it makes your website very insecure.

Restart the tomcat server by running "shutdown.sh" or "shutdown.bat". Then click "Manager App" on the top right side and type in your username and password. You should see an interface similar to the following picture.


[[Image(wiki:cs122b-2018-winter-project1:tomcat-app-manager.png)]]

If you encountered problems, this tutorial can also serve as a reference -> https://javatutorial.net/how-to-install-and-configure-tomcat-8


== Apache Tomcat Eclipse Integration (Highly Recommended) ==

Apache Tomcat makes hosting your applications easy. The Eclipse IDE makes development easy. Important: You may use Eclipse version 3.1 or higher.  We recommend you to use Eclipse EE (EE stands for Enterprise Edition and has built-in support for application and web servers including Tomcat)

Eclipse Downloads:

 * [http://www.eclipse.org/downloads/packages/eclipse-ide-java-ee-developers/oxygen2 Eclipse EE Edition]
 * [http://www.eclipse.org/downloads/packages/eclipse-ide-java-developers/oxygen2 Eclipse Standard Edition]

The following tutorial is a quick start guide and will help you set up your development environment in eclipse. ''Use the latest Tomcat version instead of the shown version in the tutorial''.     ''Note'': If you opt for Eclipse EE edition, you can skip the installation of Eclipse Web Tools Platform when following the quick start guide.

 * [http://www.mulesoft.com/tomcat-eclipse Apache Tomcat Eclipse Integration Quickstart Guide]

This tutorial can also be helpful

* [http://o7planning.org/en/10209/installing-and-configuring-tomcat-server-in-eclipse Install and Configure Tomcat Server in Eclipse]




= Task 2: Setup an AWS Instance =
[[Span(id=setup-aws)]]You need to launch an Amazon [https://aws.amazon.com/console/ AWS instance] to repeat the tasks above. Make sure to use the '''free-tier 64-bit Ubuntu instances''' so that we can make our future instructions consistent. You are welcome to participate in the â€‹[https://aws.amazon.com/education/awseducate/ AWS Educate] program, which can provide $100 AWS credits per student. (I believe UCI is a member institution.)

Generally, similar to many other tasks in this quarter, we expect you to figure out how to do many tasks by reading online materials.  [https://aws.amazon.com/free/ This] link is a good place to start from.

== Launch a free AWS instance ==
 1. Go to [https://aws.amazon.com/console/ AWS Console] to sign up. You will need to enter a valid credit card. Don't worry; as long as you choose a free-tier instance and remove it after the end of the quarter, you will not be charged.
 1. When you are done, login to the AWS console.
 1. Launch a new '''Ubuntu 14.04''' free-tier '''t2.micro''' instance. Notice that you need to generate and download a key to ssh to the machine, and it may take a few minutes for the instance to be initialized.
 1. After the instance is running, you will see a public IP address assigned to it. Keep this IP: you are required to give us this IP to demo project 1.
 1. When viewing the list of instances, you can click on the "connect" button, on the top to get instructions on how to use SSH to connect to the instance. By default, only the SSH port, 22, is open. In order to get other services (e.g., HTTP, HTTPS, and Tomcat) to be available to other machines, you will need to open the corresponding ports. '''To do so, when the instance is checked, select the security group, go to the "inbound" tab, and add more rules'''.

== Setup MySQL and !Apache/Tomcat on the AWS instance ==
This part assumes you have SSH access to the Ubuntu 14.04 AWS instance.

 1. [https://www.linode.com/docs/databases/mysql/how-to-install-mysql-on-ubuntu-14-04 Install MySQL].
 1. [https://help.ubuntu.com/lts/serverguide/httpd.html Install Apache Web server]. '''Open port 80'''.
 1. [http://tecadmin.net/install-oracle-java-8-jdk-8-ubuntu-via-ppa/ Install Java] [[BR]]
 1. [https://grape.ics.uci.edu/wiki/public/wiki/cs122b-2017-winter-project1-install-tomcat-on-aws Install Tomcat on AWS]. Setup its application app manager page and test it using the URL http://YOUR_PUBLIC_IP:8080/manager/html. '''Open port 8080'''. This part is a little tricky, so read the instructions carefully.

Here are two cheat sheets of !Linux/Ubuntu commands:

 * http://cli.learncodethehardway.org/bash_cheat_sheet.pdf
 * http://www.cheat-sheets.org/saved-copy/ubunturef.pdf



= Task 3: Join Github Organization and create a repo for your team. =
This course uses Github for version control. The students are expected to use Github as explained below.

 * Create an account on Github if you don't have one. Then provide us your username in the Google Spreadsheet [https://docs.google.com/spreadsheets/d/1B0eu9Zt5gtaHdBFMnPnYb1mYzzpBPUcEKjmeGEiRC6E/edit?usp=sharing here].
 * Wait for the invitation from our staff to join the [https://github.com/UCI-Chenli-teaching UCI-Chenli-teaching organization]. The invitation might take a few days to be sent out based on our schedule.
 * One member from each team needs to create a '''private''' repository. The repository name should be of the form 'cs122b-winter18-team-x' where 'x' is your assigned team number, e.g., "cs122b-winter18-team-1". Other members can then be added to the repository as collaborators (by following steps given [https://help.github.com/articles/inviting-collaborators-to-a-personal-repository/ here]).   Again, make sure your repository is '''private'''!
 * You can then begin with your project using Github. Put the code of your project in your team's Github repository.

Go through one of these online tutorials to get familiar with Git and Github if you are not familiar with them.
*  https://try.github.io
*  https://product.hubspot.com/blog/git-and-github-tutorial-for-beginners



= Task 4: Create a MySQL Database =
 * Download a MySQL database for your development machine from http://dev.mysql.com/downloads/mysql/;
 * Create a database called "moviedb" with the following tables:[[BR]]

|| Table Name[[BR]] || Attributes[[BR]] || Notes ||
|| movies[[BR]] || !id:varchar(10) (primary key)[[BR]] !title:varchar(100) [[BR]] !year:integer [[BR]] !director:varchar(100) [[BR]] || required [[BR]] required [[BR]] required [[BR]] required ||
|| stars[[BR]] || !id:varchar(10) (primary key)[[BR]] !name:varchar(100) [[BR]] !birthYear:integer [[BR]] || required[[BR]] required [[BR]] not required[[BR]] ||
|| stars_in_movies[[BR]] || !starId:varchar(10]), referencing stars.id[[BR]] !movieId:varchar(10]), referencing movies.id[[BR]] || all attributes required ||
|| genres[[BR]] || !id:integer (primary key)[[BR]] !name:varchar(32) [[BR]] || all attributes required; "id" should be [[BR]]"AUTO_INCREMENT" ||
|| genres_in_movies[[BR]] || !genreId:integer, referencing genres.id[[BR]] !movieId:varchar(10]), referencing movies.id[[BR]] || all attributes required ||
|| customers[[BR]] || !id:integer (primary key)[[BR]] !firstName:varchar(50) [[BR]] !lastName:varchar(50) [[BR]] !ccId:varchar(20), referencing creditcards.id[[BR]] !address:varchar(200) [[BR]] !email:varchar(50) [[BR]] !password:varchar(20) [[BR]] || all attributes required; "id" should be [[BR]]"AUTO_INCREMENT" ||
|| sales[[BR]] || !id:integer (primary key)[[BR]]       !customerId:integer, referencing customers.id[[BR]] !movieId:varchar(10), referencing movies.id[[BR]] !saleDate:date  [[BR]] || all attributes required; "id" should be [[BR]]"AUTO_INCREMENT" ||
|| creditcards[[BR]] || !id:varchar(20), (primary key)[[BR]] !firstName:varchar(50) [[BR]] !lastName:varchar(50) [[BR]] !expiration:date [[BR]] || all attributes required ||

The table-creation SQL statements should be written in a '''createtable.sql''' file.  All varchar() fields for which there is no data (i.e., the fields contents are missing or unknown) are the empty string (!''); other non-required fields which have no data are null. Required fields have the constraint that they are not null. [[BR]] [[BR]]

 * Use the provided [attachment:data.sql] file to populate the tables.



= Task 5: Implement the Movie List, Single Movie, and Single Star page of the Fablix Application =
[[Image(wiki:cs122b-2018-winter-project1:122b-project1-diagram.jpg)]]

For project 1, you only need to implement the Movie List, Single Movie, and Single Star pages of the Fablix Application. You'll implement all other parts in project 2. For the Movie List page, you do NOT need to implement the sorting and prev/next features.


 * The "Movie list" page shows a list of movies, each movie needs to contain the following information
   * title (hyperlinked to Single Movie Page);
   * year;
   * director;
   * list of genres;
   * list of stars (each hyperlinked to Single Star Page);

 * If the user clicks on a movie, the corresponding "Single Movie" page displays all the information about the movie, including its title, year, director, a list of genres, a list of stars (hyperlinked)
 * If the user clicks on a star, the corresponding "Single Star" page displays all the information about this star, including the name, date of birth, and a list of (hyperlinked) movies in which the star acted. The user can jump between a page for a movie and a page for a star following hyperlinks.
 * In project 1, the Movie List page should only contain the top '''20''' rated movies. You don't need to show all the movies.

You are recommend to implement project 1 using the Java servlet techniques covered in the class. 

Here are some tutorials. You can start the project after learning the basics. Don't spend too much time on learning the advanced content. You won't use them until Project 2.

* HTML and CSS tutorial: http://htmldog.com/guides/html/beginner/
* An interactive HTML tutorial (Seems the tutorial is broken as of 1/7/2018, it may get fixed): https://www.codecademy.com/ar/tracks/htmlcss
* A good Java Servlet Tutorial: http://tutorials.jenkov.com/java-servlets/index.html 
* Another good Java Servlet Tutorial: http://o7planning.org/en/10169/java-servlet-tutorial 






= Grading Checklist =
Please refer to the [https://docs.google.com/spreadsheets/d/1oQLvvxpBaohmViu7h06F4KeEgL0vA3XnqnbHRwB_w1s/edit?usp=sharing grading checklist] before submitting your project. This checklist includes the items we are looking for to grade your projects. Notice that we reserve the right to make reasonable changes of this checklist. Thus, you should implement all the required features, and only use this checklist to make sure you don't miss anything.




= Project Submission =

We'll take your Github code as submissions. You need to include all the code in your Github repository, including Java, SQL, HTML, CSS, etc... You don't have to submit anything on EEE.

On the night of the end of the grace period, we will run a script that gets the latest commit ID in your repository. We'll use the time of the latest commit to determine if you use the Grace Period or not. So if you don't plan to use the Grace Period, don't push anything to Github during the 24-hour Grace Period. After the 24-hour grace period, you can continue using your repository normally for the next project.

* Remember that we will only be checking the code in the '''master branch''' of your repository.
* Do not try to cheat by modifying the timestamp of the commits to an earlier date. We'll use the time that you push your commits to Github. So be sure to push your changes to Github before the deadline!
* To avoid any surprises, we will be publishing the final commit number that we have recorded for every team. If you think we have made a mistake on the commit ID, you are welcome to contact us.



= Demonstration =
'''You are required to demonstrate  this project'''. Create a running system from your ZIP fileâ€“quickly. Show the correctness, completeness, functionality and performance of your database during your demonstration by using the employee interface developed here. Your task is to convince us '''(in 15 minutes)''' that your work is correctly and completely carried out and the course project is ready to move to phase 2. Your demo will include the following:

How will grading be done-

 * The team will login to the AWS instance.
 * They will be required to checkout to the commit id that we have and show us their running code.

a) Logon to your AWS instance and checkout your code to the commit ID that we recorded. Then start your application based on it. You should already installed everything (MySQL, Tomcat, etc...) on the AWS and make sure your application can be started quickly.

b) Demonstrate that your '''''creatable.sql''''' file creates a valid database. Since execution of the '''''data.sql''''' can take too long, you should have already setup a database and populate it. This database will be the one accessed by your demonstrated JDBC program. Thus, '''''creatable.sql''''' will be executed for a  database under a different name and get populated by executing '''''data.sql''''', while you are demonstrating other parts of the project.

c) Demonstrate the correctness, completeness, and performance of all the required features.

d) Last but not least, entering YOUR_PUBLIC_[IP:8080 IP:8080] on your AWS instance should show us the Tomcat application manager, which confirms that you are running Tomcat on the AWS instance.

Please note that '''you will have no more than 15 min to demonstrate'''.  It is completely up to you to plan your demo so that all the required features are displayed and the grader  can be convinced of the quality of your work in the given time frame.''' If a group's demonstration appears to be unstructured, the demo could be aborted and rescheduled for another time''' with a substantial '''grade penalty'''.

Demonstration schedule will be posted later.Mis_redirected¢DtypeEvalueôIhttp_code¢DtypeEvalueÈQdownload_complete¢DtypeEvalueõ