¦Ifinal_url¡DtypeLhttp_headers¢DtypeEvalue‡¢Ak¢DtypeEvalueNContent-LengthAv¢DtypeEvalueD4378¢Ak¢DtypeEvalueMAccept-RangesAv¢DtypeEvalueEbytes¢Ak¢DtypeEvalueFServerAv¢DtypeEvalueX4Apache/2.4.6 (CentOS) OpenSSL/1.0.2k-fips SVN/1.7.14¢Ak¢DtypeEvalueMLast-ModifiedAv¢DtypeEvalueXThu, 08 Jun 2017 21:05:18 GMT¢Ak¢DtypeEvalueDETagAv¢DtypeEvalueT"111a-5517935c31593"¢Ak¢DtypeEvalueDDateAv¢DtypeEvalueXMon, 04 Feb 2019 19:23:18 GMT¢Ak¢DtypeEvalueLContent-TypeAv¢DtypeEvalueXtext/html; charset=UTF-8Kraw_content¢DtypeEvalueY<meta charset="utf-8" emacsmode="-*- markdown -*-">

	**Compile Mitsuba on Windows**
	*Guo Yu*

This is a document about how to use Mitsuba on Windows.

# Introduction


## What is Mitsuba?

<a href="https://www.mitsuba-renderer.org/" target="_blank">Mitsuba</a> is a research-oriented rendering system. 
[<a href="https://www.mitsuba-renderer.org/releases/current/documentation.pdf" target="_blank">Documentation</a>]

# What do we need?

a) Windows 7 (x64)

b) Visual Studio 2013 (update5)

c) Anaconda2 (Python 2.7 (x64)) [<a href="https://www.continuum.io/downloads#windows" target="_blank">Download</a>]

d) SCons (2.5.1) [<a href="http://scons.org/pages/download.html" target="_blank">Download</a>]

e) Mitsuba (Source code:: All platforms:: As a zip file) [<a href="https://www.mitsuba-renderer.org/download.html" target="_blank">Download</a>]


# Installation

## Install Visual Studio 2013

Only VS2010 and VS2013 support Mitsuba now, so here I am going to use VS2013. I already have VS2015 installed on my PC, but it doesn't matter, just install it. 

(Default path)

## Install Anaconda2

Here we are going to use Python 2.7, since Mitsuba configuration file are written in Python2. And Anaconda is the most convinent way to install Python. 

(Any path: eg. $PATH_TO_ANACONDA\Anaconda2\)

## Install SCons

When installing SCons, it will ask which python version are you going to install to. (You may have differernt version of Python installed on your PC) 

![](SCons.png width=\pagewidth)

Choose Python 2.7 in Anaconda2 path.

## Compile Mitsuba

Unzip Mistuba.zip to any location. (Here I change foldername from a MESSY name to "mitsuba\") 

(Any path: eg. $PATH_TO_MITSUBA\mistuba\)

Now copy VS2013 config file to certain location.
<pre style="color:#000020;background:#f6f8ff;width:\pagewidth">
>cp $PATH_TO_MITSUBA\mitsuba\build\config-win64-msvc2013.py $PATH_TO_MITSUBA\mitsuba\config.py 
</pre>


Start "Anaconda Prompt" from Anaconda2, and change current path to <br>$PATH_TO_MITSUBA\mitsuba\. Using <br>
<pre style="color:#000020;background:#f6f8ff;width:\pagewidth">
>scons -j 8 
</pre>
to compile Mitsuba. "-j 8" means using 8 CPU cores to do parallel compiling. 
After several minutes, DONE. The compiled executive file is located here: <br>$PATH_TO_MITSUBA\mitsuba\dist\mistuba.exe

## Use Mitsuba to render image


### Mitsuba official sample [<a href="sample.zip" target="_blank">Data</a>]

There're two files, "test_emitter.xml" and "envmap.exr". To render this scene, run
<pre style="color:#000020;background:#f6f8ff;width:\pagewidth">
>$PATH_TO_MITSUBAEXE\mitsuba $PATH_TO_XML\test_emitter.xml
</pre>
A output rendered image will be generated in the same folder of test_emitter.xml with the same name (test_emitter.exr).

![](test_emitter.png width=250px)


### Volumetric data rendering with user defined Plugin. [<a href="gridvolumeSimple.cpp" target="_blank">Plugin</a>;<a href="bunny.zip" target="_blank">Data</a>]

Download plugin (.cpp) and copy it to $PATH_TO_MITSUBA\mitsuba\src\volume\; Add 
<pre style="color:#000020;background:#f6f8ff;width:\pagewidth">
plugins += env.SharedLibrary('gridvolumeSimple', ['gridvolumeSimple.cpp'])
</pre>
to file $PATH_TO_MITSUBA\mitsuba\src\volume\SConscript; Recompile Mitsuba.

Now render this volume data:
<pre style="color:#000020;background:#f6f8ff;width:\pagewidth">
>$PATH_TO_MITSUBAEXE\mitsuba $PATH_TO_XML\bunny.xml
</pre>

![](bunny.png width=\pagewidth)

## Call Mitsuba from Matlab

Sometimes we want to use Matlab (or Python) script to control Mitsuba renderer, here I provide some simple code to do this. [<a href="script.zip" target="_blank">Code</a>] 

## Image format ".exr"

OpenEXR is a high dynamic-range (HDR) image file format developed by Industrial Light & Magic for use in computer imaging applications.

HDRITools provide a very good image viewer and Matlab UI to read .exr files. 
[<a href="https://bitbucket.org/edgarv/hdritools/" target="_blank">webpage</a>;<a href="HDRITools-0.4.0-alpha.2-amd64-msvc11.zip" target="_blank">v0.4.0</a>]


End.

<!-- Markdeep: -->
<style class="fallback">body{visibility:hidden;white-space:pre;font-family:monospace}</style>
<script src="markdeep.min.js"></script>
<script src="https://casual-effects.com/markdeep/latest/markdeep.min.js"></script>
<script>window.alreadyProcessedMarkdeep||(document.body.style.visibility="visible")</script>
Mis_redirected¢DtypeEvalueôIhttp_code¢DtypeEvalueÈQdownload_complete¢DtypeEvalueõ