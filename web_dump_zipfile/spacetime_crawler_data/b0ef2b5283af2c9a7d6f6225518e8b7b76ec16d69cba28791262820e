¦Ifinal_url¡DtypeLhttp_headers¢DtypeEvalue‡¢Ak¢DtypeEvalueNContent-LengthAv¢DtypeEvalueE23054¢Ak¢DtypeEvalueMAccept-RangesAv¢DtypeEvalueEbytes¢Ak¢DtypeEvalueFServerAv¢DtypeEvalueX4Apache/2.4.6 (CentOS) OpenSSL/1.0.2k-fips SVN/1.7.14¢Ak¢DtypeEvalueMLast-ModifiedAv¢DtypeEvalueXFri, 30 Sep 2005 00:07:08 GMT¢Ak¢DtypeEvalueDETagAv¢DtypeEvalueT"5a0e-401f201a2c300"¢Ak¢DtypeEvalueDDateAv¢DtypeEvalueXFri, 01 Feb 2019 22:27:28 GMT¢Ak¢DtypeEvalueLContent-TypeAv¢DtypeEvalueXtext/html; charset=UTF-8Kraw_content¢DtypeEvalueYZ<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
"http://www.w3.org/TR/html4/loose.dtd">
<html lang="en">
<head>
	<!-- META tags provide additional information, as described below... -->

	<!-- Establish character encoding (Western European ISO) -->
	<meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1" >

	<!-- Force reload from server, not local cache -->
	<meta http-equiv="pragma" content="no-cache" >

	<!-- Allows search engine bots to index this page -->

	<meta name="ROBOTS" content="ALL" >

	<!-- Disables Microsoft's Smart Tags functionality on this page -->
	<meta name="MSSmartTagsPreventParsing" content="true" >

	<!-- Provides description of page for search engines -->
	<meta name="DESCRIPTION" content="A source poage for Software Architecture Information" >

	<!-- Provides keywords for search engines -->
	<meta name="KEYWORDS" content="UC Irvine, Software Architecture research,
Software Architecture resources, Software Architecture" >

	<!-- States page authors -->
	<meta name="AUTHOR" content="Yuzo Kanomata" >

<TITLE>Software Architecture Sites
</TITLE>
</HEAD>

<BODY>
<H1 ALIGN=CENTER>Software Architecture<BR>Resource Sites</H1>
<TABLE>
	<TR><TD WIDTH=150></TD><TD><A HREF="#bell">Bell Labs</A></TD><TD></TD></TR>
	<TR><TD WIDTH=150></TD><TD ><A HREF="#stars">STARS - Software Architecture Technology Guide</A></TD><TD></TD></TR>
	<TR><TD></TD><TD><A HREF="#cse">USC - Center for Software Engineering</A></TD><TD></TD></TR>
	<TR><TD></TD><TD><A HREF="#csl">Computer Science Laboratory at SRI</A></TD><TD></TD></TR>
	<TR><TD></TD><TD><A HREF="#laser">LASER - UMass Amherst</A></TD><TD></TD></TR>
	<TR><TD></TD><TD><A HREF="#cmu">CS at Carnegie Mellon University</A></TD><TD></TD></TR>
	<TR><TD></TD><TD><A HREF="#sei">SEI at Carnegie Mellon University</A></TD><TD></TD></TR>
	<TR><TD></TD><TD><A HREF="#open">Open Implementation at Xerox</A></TD><TD></TD></TR>
	<TR><TD></TD><TD><A HREF="#aspect">Aspect-Oriented Programming at Xerox</A></TD><TD></TD></TR>
	<TR><TD></TD><TD><A HREF="#ilu">Inter-Language Unification at Xerox</A></TD><TD></TD></TR>
	<TR><TD></TD><TD><A HREF="#gen">Systems Generator at UTexas</A></TD><TD></TD></TR>
	<TR><TD></TD><TD><A HREF="#serl">SERL at UColorado</A></TD><TD></TD></TR>
	<TR><TD></TD><TD><A HREF="#patterns">Patterns at UIUC</A></TD><TD></TD></TR>
	<TR><TD></TD><TD><A HREF="#sdn">Software Design Network</A></TD><TD></TD></TR>
	<TR><TD></TD><TD><A HREF="#honeywell">SA at Honeywell</A></TD><TD></TD></TR>
	<TR><TD></TD><TD><A HREF="#tek">SA at Teknowledge</A></TD><TD></TD></TR>
	<TR><TD></TD><TD><A HREF="#irus">SA at UC Irvine</A></TD><TD></TD></TR>
	 <TR><TD></TD><TD><A HREF="#gatech">SA at GaTech</A></TD><TD></TD></TR>
	<TR><TD></TD><TD><A HREF="#ogi">SA at Oregon Graduate Institute</A></TD><TD></TD></TR>
	<TR><TD></TD><TD><A HREF="#rapide">Rapide at Stanford</A></TD><TD></TD></TR>
	<TR><TD></TD><TD><A HREF="#TAFIM">TAFIM at DISA</A></TD><TD></TD></TR>
	<TR><TD></TD><TD><A HREF="#contracts">Reuse Contracts</A></TD><TD></TD></TR>
	<TR><TD></TD><TD><A HREF="#arcs">ARchitecture and Composition Software</A></TD><TD></TD></TR>
	<TR><TD></TD><TD><A HREF="#wwisa">World-Wide Institute of Software Architects</A></TD><TD></TD></TR>
</TABLE>

<HR>
<dl>
<DT><A NAME="wwisa" HREF="http://www.wwisa.org/">World-Wide Institute of Software Architects</A>
<DD><P>
The Institute of Software Architects is a nonprofit membership organization
with a mission to accelerate the establishment of the profession of software
architecture and provide information and services to software architects and
their clients.
</P>
<DT><A HREF="http://www.bell-labs.com/user/dep/work/swa/">SA at Bell Labs</A>
<DD><P>This site contains Dewayne Perry's collection of SA material.  It includes links to his papers, sites, projects, and individuals.

</P>
<DT><A HREF="http://bilbo.ide.hk-r.se:8080/~bosch/ARCS.html">ARchitecture and Composition Software</A> Department of Computer Science and
Business Administration at the University of Karlskrona/Ronneby 
<DD><P>The ARCS research group is formed by researchers from the University of Karlskrona/Ronneby and the University of Kalmar.
Within ARCS we study the architecture of software systems and the composition of software components in such systems,
primarily from the perspective of the object-oriented paradigm. This indicates that our approach to software architecture is
influenced by our experiences in object-oriented frameworks and class libraries, design patterns and advanced object-oriented
computation models. </P>
<P>
The research perspective taken by the ARCS group is based on three observations: 

</P>
<UL TYPE=DISC>
       	<LI>Insufficient support is provided for describing system architectures and reasoning about architectural issues. Lately, some
       	research efforts have started to address these issues, but things are far from solved. 
       	<LI>It remains notoriously difficult to construct systems by composing them from reused components. Especially component
       adaptation lacks support. 
       	<LI>It is not well understood how to design a system architecture from, potentially conflicting, non-functional requirements. 
</UL>

<DT><A NAME="contracts" HREF="http://progwww.vub.ac.be/prog/pools/rcs/">Reuse Contracts</A>
<DD><P>The reuse contract methodology is a novel methodology for managing reuse and evolution in software development. The methodology
addresses the incremental/iterative development of reusable software components and models, and how to build highly customized
applications based on these components and models. Much of the inspiration for developing reuse contracts has been drawn from the
practical experience in developing object-oriented frameworks (see the Communications of the ACM paper October 1997). It is a practical method. It
builds on existing object-oriented analysis and design methods (in casu UML). Yet, it distinguishes itself from all other methodologies by
its formal foundation and support for evolution: Reused components and the way they are reused are formally described in a contract
(hence the name). This forms the basis of tools for managing change and for checking the consistency between models and code. While
being formal, the notation is simple enough for every day use (it can be explained in an hour). 
</P>
<DT><A NAME="rapide" HREF="http://anna.stanford.edu/rapide/rapide.html">Rapide at Stanford</A>
<DD>The Rapide Language effort focuses on developing a new technology for building large-scale, distributed multi-language
systems. This technology is based upon a new generation of computer languages, called Executable Architecture Definition
Languages (EADLs), and an innovative toolset supporting the use of EADLs in evolutionary development and rigorous
analysis of large-scale systems. 
<P>
<DD>Rapide is designed to support component-based development of large, multi-language systems by utilizing architecture
definitions as the development framework. Rapide adopts a new event-based execution model of distributed,
time-sensitive systems -- the "timed poset model." Posets provide the most detailed formal basis to date for constructing
early life cycle prototyping tools, and later life cycle tools for correctness and performance analysis of distributed
time-sensitive systems. <P>
<DT><A NAME="stars"
HREF="http://www-ast.tds-gn.lmco.com/arch/guide.html">Software
Architecture Technology Guide
</A> 
<DD> The purpose of this node is to
provide DoD software developers with an overview of software architecture technology and to serve as a
"virtual road map" to additional web resources for understanding and applying architectural techniques
to domain-specific reuse. The reader is guided through software architecture concepts, representation
methods, architecture-focused software efforts, recommended readings,
and additional sources (including a more than adequate treatment of
architecture description languages)
for software architecture technology information. 
<P>
<DD>This effort is sponsored by the Department of Defense OASD(C3I)
Information Technology Directorate, and contracted through the Air Force Electronic Systems Center (ESC), as part of the Software
Technology for Adaptable, Reliable Systems 
(<A HREF="http://source.asset.com/stars/">STARS</A>) program. 
<P>
<dt><A NAME="cse" HREF="http://sunset.usc.edu/index.html">Center for Software
Engineering
</A>
<dd><p>Dr. Barry Boehm founded the center at University of Southern
California in 1993.  The purpose is to provide an environment for
research and teaching in the areas of large-scale software design
and development processes, generic and domain specific software
architectures, software engineering tools and environments,
cooperative system design and the economics of software
engineering.</P>
<dd><p>Their work in software architecture focuses on:
</p>
<ol>
<li>Representing software architectures
<li>Fitting software architectures into the software process
<li>Architecting for a product line or a specific domain
<li>Using infrastructure technologies (tool or set of tools to assist the
architect in managing the multiple view of the architecture)
</ol>
<dt><A NAME="csl" HREF="http://www.csl.sri.com/~moriconi/mmprojects.html">Software Architecture Projects at SRI</A> 
<dd><p> There are two major projects in the area of software architecture: one is focused the development of fundamental enabling technology and
the other on applying it in the development of a useful architectural standard. Both projects are multiyear and involve collaboration with
researchers at Stanford University.    Those interested in formal methods should
also consider <A HREF="http://www.sri.cam.uk/">SRI Cambridge Computer
Science Research Centre
</A>.
</P> 
<dt><A NAME="laser" HREF="http://zoo.cs.umass.edu/public.html">Laboratory for
Advanced Software Engineering Research
</A>

<DD><P>The research being done is LASER falls into the following
categories: process, object management, analysis of software
systems, and software architecture.  This works fits under the
interoperability problem.  They are looking at stratgies and architectures
that would allow tools developed in different languages to operate on shared
data on by passing control among themselves.
</p> 
<DT><A NAME="cmu" HREF="http://www.cs.cmu.edu/">Computer Science at Carnegie Mellon University</A>
<DD><P>Carnegie Mellon University's <A HREF="http://www.cs.cmu.edu/Groups/able/able.html">ABLE project</A> is concerned with exploring the formal basis
for Software Architecture, developing the concept of Architectural Style, and building
tools that practicing software architects might find useful. Our tool development effort
has focused on the Aesop system, a toolkit for rapidly producing software architecture
design and analysis environments that are customized to support specific architectural
styles. The formal work revolves around the Wright language.</P>
<DD><P>The <A HREF="http://www.cs.cmu.edu/afs/cs/project/compose/www/index.html">composable systems group</A> focuses on three research areas: software architecture, formal methods,
       and tractable software analysis. We develop new models, theories, methods,
       languages, and tools for classifying, specifying, analyzing, and designing
       software systems beyond the component level. This support could lead to
       substantial reduction in maintenance costs, improvement in software
       resuse, and increase in quality of software.</p>
 <DD><P> For design practice to make the transition from innovative to routine,
         design knowledge must be captured, organized, and disseminated.
         Handbooks are a popular means of doing this. One example, Perry's
         Chemical Engineers' Handbook, is a tome several inches thick, filled with
         tables, diagrams, and schematics that cover topics from the basics of the
         metric system to the intricate innards of heat pumps. In the bulk of the
         text, noted practioners give useful, specific advice about the standard
         solutions to common design tasks. The
         <A HREF="http://www.cs.cmu.edu/People/Vit/vitruvius.html">Vitruvius Project</A> at CMU is taking steps toward the goal of establishing just such a codificaiton of
         practice.</p>
<dt><A NAME="sei" HREF="http://www.sei.cmu.edu/technology/architecture/">Software
Engineering Institute
</A>
<DD><p>The SEI is a federally funded research and development center
operated since 1984 by Carnegie Mellon University.  Through the
sponsorship of the Defense Department's Advanced Research Projects
Agency the objective is to provide leadership in software
engineering and the transition of new technology into software
engineering practice.  There are a number of resources available at this
site.
</p>
<DT><A NAME="aspect" HREF="http://www.parc.xerox.com/spl/projects/aop/">Aspect-Oriented Programming at Xerox</A>
<DD><P>Because modules correspond so directly to blocks of executable code, and the different
aspects of concern cross-cut the executable code, the modules themselves end up being a
tangled mess of aspects. We believe this TANGLING-OF-ASPECTS phenomenon is at the heart of much
of the complexity in existing software systems. Further, we believe that adjusting the scale of
modules (or the level of programming languages) won't help without addressing this root cause
of the tangling. Instead what is needed is to be able to work with abstractions that correspond
more directly to aspects of concern than to blocks of executable code. </p>
<P>We are working on a new programming paradigm, Aspect-Oriented Programming (AOP), that
does just this. AOP works by allowing programmers to first express each of a system's aspects of
concern in a separate and natural form, and then automatically combine those separate
descriptions into a final executable form using a tool called an Aspect Weaver. </p>
<DT><A HREF="ftp://ftp.parc.xerox.com/pub/ilu/ilu.html">Inter-Language Unification at Xerox</A>
<DD><P>The Inter-Language Unification system (ILU) is a multi-language object interface system. The
object interfaces provided by ILU hide implementation distinctions between different
languages, between different address spaces, and between operating system types. ILU can be
used to build multi-lingual object-oriented libraries ("class libraries") with well-specified
language-independent interfaces. It can also be used to implement distributed systems. It can
also be used to define and document interfaces between the modules of non-distributed
programs. ILU interfaces can be specified in either the OMG's CORBA Interface Definition
Language (OMG IDL), or ILU's Interface Specification Language (ISL). </p>

<P>ILU 2.0 supports the programming languages C++, ANSI C, and Python, and will support Java,
and Common Lisp. The 1.8 release also contains support for Modula-3, and contributed support
for Modula-3 in ILU 2.0 is available. ILU has been installed on most flavors of UNIX (SunOS,
Solaris, HP-UX, AIX, OSF, IRIX, FreeBSD, Linux, LynxOS, SCO Unix, etc.) and MS-Windows (3.1, 95,
NT). It supports both threaded (POSIX, Solaris, NT, Franz ACL, PPCR, Modula-3) and event-loop
(Xt, Tk, XView) operation. One of the implementation goals is to maximize compatibility with
existing open standards. As a result, ILU provides support for use of the OMG CORBA IDL
interface description language, and can be thought of as a CORBA ORB system (though with
omissions from and extensions to the CORBA spec). ILU also includes a self-contained
implementation of ONC RPC, and it is possible to describe and use existing RPC services as ILU
objects. ILU also includes a self-contained implementation of the World Wide Web's Hypertext
Transfer Protocol (HTTP), and can thus be used to implement object-oriented web browsers and
servers. ILU is available free from '<A HREF="ftp://ftp.parc.xerox.com/pub/ilu/ilu.html">ftp://ftp.parc.xerox.com/pub/ilu/ilu.html</A>'. </P>
<dt><A NAME="open" HREF="http://www.parc.xerox.com/spl/projects/oi/">Xerox Open
Implementation</A>
<dd><p>Open implementation is a new design principle under consideration by
a number of researchers and practitioners.  Workers at Xerox Parc are at the
forefront of exploring this design notion and the implication on a system's
architecture.</p>
<DD><p>Simply put, the focus of work on open implementation (OI) is to develop
techniques whereby a module can be more reusable and tailorable by
exposing certain crucial aspects of its implementation (as well as its
normal interface) to clients.  This can allow the clients to adjust the
module to better suit their needs.  Recent work in open implementation
has produced an initial OI analysis and design methodology that helps
designers work out what aspects of its implementation a module should
expose and how.</p>
<DT><A NAME="gen" HREF="http://www.cs.utexas.edu/users/schwartz/">Software Systems Generator Research Group</A>
<DD><P>Software system generators are tools for
assembling complex software from
interchangeable, reusable components. We
have developed GenVoca, a
domain-independent model of software
construction that defines systems as
algebraic equations, where terms are
components. GenVoca has been
successfully applied to many domains including database management systems, avionics,
and data structures. Our results have demonstrated GenVoca generators can
substantially improve productivity and application run-time performance. </p>

<dt><A NAME="serl" HREF="http://www.cs.colorado.edu/users/serl/">Software
Engineering Research Laboratory
</A> 
<dd><p>The Software Engineering Research Laboratory (SERL) is part of the
Computer Science Department at the University of Colorado. The focus of
our research is in global software engineering, and consequently in each
of our research topics our work focuses on the wide-area software
development and deployment context.
</p>
<dt><A NAME="patterns" HREF="http://st-www.cs.uiuc.edu/users/patterns/patterns.html">Patterns Home Page</A>
<dd><P>This site organizes material from a variety of sites regarding
<A HREF="/../coursepages/softwarearchitecture/sareadings/alexanderforCS.ps">patterns and pattern languages</A> (<STRONG>PS</STRONG>) 
(see also an  <A HREF="http://xent.w3.org/~khare/Alexander.htmld/">introduction to design patterns</A>).  
Patterns can be considered a
micro-architectural view of a system.  Most work in patterns is from a
component or design reuse perspective.  More on patterns can be found at the
<A HREF="http://c2.com/ppr/index.html">Portland Pattern Repository</A>.
</p> 
<dt><A NAME="sdn" HREF="http://hopper.cs.wvu.edu/">Software Design Network</A>
<DD><P>The primary mission of the SDN is to promote and disseminate information concerning research in
software architectures. The SDN is a worldwide, virtual enterprise of faculty and students that are interested in research in
software architectures. The SDN project is partially funded by the NASA IVandV Facility in Fairmont,
West Virginia. It started as a virtual enterprise between several departments and research centers at WVU
in 1994 in conjunction with the NASA Earth Observing System (EOS) Project and National Library of
Medicine.  </P>
<DT><A NAME="honeywell" HREF="http://www.htc.honeywell.com/projects/dssa/">DSSA at Honeywell</A>
<DD><P>Engineers often draw annotated diagrams of components and the
 relationships between them to describe the high-level design or
 architecture of a system. We seek to make this intuitive notion of an
 architecture more rigorous by defining precise meanings and notations for
 such specifications. This means using machine-processable languages to
 capture architecture specifications; tools to analyze architectures and
 estimate system properties; and tools to automate the production and
 testing of software from an architecture specification. We have applied
 these principles to develop architecture specification languages for
 real-time systems, with special attention paid to those that include
 guidance, navigation and control functions; and to specify example
 architectures that can be easily adapted to meet the requirements of
 families of related products. </p>
 <DT><A NAME="tek" HREF="http://www.teknowledge.com:80/DSSA/">Teknowledge's DSSA & ProtoTech Projects</A>
<DD><P>Teknowledge's Domain-Specific Software Architectures
(DSSA) Project home page. This also provides information about our
ProtoTech (Prototyping Technologies) project. Both projects are funded by
ARPA/SISTO -- DSSA through ARDEC (Army) and ProtoTech through ONR
(Navy). 
</P>
<DT><A NAME="irus" HREF="http://www.ics.uci.edu/pub/arch/">Software Architecture Research at U. C. Irvine</A>
<DD><P>Software Architecture research is directed at reducing the cost of application
   development by focusing attention on high level design issues and increasing reuse. 
</P>
<DL>
	<DT>The C2 Style
		<DD>A component- and message-based architectural style for component reuse and flexible
                                    	system composition. 
		<DT>Dynamic Architecture
	<DD>Techniques and tools for modifying software architectures during execution. 
		<DT>The Argo Design Environment
	<DD>A graphical design environment for constructing, analyzing, and generating C2
                                       		architectures. 
</DL>

<DT><A NAME="gatech" HREF="http://www.cc.gatech.edu/computing/classes/cs8112m/">Georgia Tech Software Architecture Reading Group</A>
<DD><P>GT-SARG is a reading group set up in the College of Computing for people interested in
discussing issues related to software architecture. GT-SARG began as weekly meetings in
the Winter Quarter of 1995 and will continue as long as interest remains.</P>
<P>The reading group is organized by Gregory Abowd, a faculty member in the College of
Computing whose research interests cover models and evaluation of software
architectures. </P>
<DT><A NAME="ogi" HREF="http://www.cse.ogi.edu:80/PacSoft/Blackberry.html">Software Design for Reliability and Reuse at Oregon Graduate Institute</A>
<DD><P>The goal of the SDRR project was to create a technology for generation of software
components. Phase I of the Blackberry project was successfully completed on January
31, 1995. The created technology was tested and compared to a state-of-the-art
template-based software technology. SDRR technology demonstrated 3 times increase in
programmers' productivity. There's more to SDRR than just productivity. </p>
<DT><A HREF="http://www-library.itsi.disa.mil/tafim/tafim3.0/pages/tafim.htm" NAME="TAFIM">Technical Architecture Framework for Information Management</A>

<DD><P>The TAFIM is intended to guide the development of architectures that satisfy requirements
   across missions, functional areas, and functional activities. The TAFIM is mandatory for use in
   DOD. The specific technical architectures for missions and functions will be developed using
   standard architecture guidance and development methodologies provided by the TAFIM.
</P>

</BODY>

</HTML>

Mis_redirected¢DtypeEvalueôIhttp_code¢DtypeEvalueÈQdownload_complete¢DtypeEvalueõ