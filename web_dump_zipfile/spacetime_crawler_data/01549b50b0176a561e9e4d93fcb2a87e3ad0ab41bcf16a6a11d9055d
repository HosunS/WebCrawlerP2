¦Ifinal_url¡DtypeLhttp_headers¢DtypeEvalue‡¢Ak¢DtypeEvalueNContent-LengthAv¢DtypeEvalueD1245¢Ak¢DtypeEvalueMAccept-RangesAv¢DtypeEvalueEbytes¢Ak¢DtypeEvalueFServerAv¢DtypeEvalueXjApache/2.4.6 (CentOS) OpenSSL/1.0.2k-fips SVN/1.7.14 Phusion_Passenger/4.0.53 mod_perl/2.0.10 Perl/v5.16.3¢Ak¢DtypeEvalueMLast-ModifiedAv¢DtypeEvalueXWed, 17 Apr 2013 01:54:22 GMT¢Ak¢DtypeEvalueDETagAv¢DtypeEvalueS"4dd-4da84c3c74f80"¢Ak¢DtypeEvalueDDateAv¢DtypeEvalueXThu, 31 Jan 2019 15:11:54 GMT¢Ak¢DtypeEvalueLContent-TypeAv¢DtypeEvalueXtext/plain; charset=UTF-8Kraw_content¢DtypeEvalueYÝ/* 
$Id$

Copyright (C) 2007 by The Regents of the University of California

Redistribution of this file is permitted under
the terms of the *GNU* Public License (*GPL*) 	

Date: 04/08/2007
Author: Yiming Lu <yimingl@ics.uci.edu>
*/

#ifndef _buckethead_h_
#define _buckethead_h_

#include <tr1/unordered_map>
#include "gram.h" 
#include "../util/gram.h"

using namespace std;
using namespace tr1;
/* The index structure of the filter tree. It uses unordered_map for the gram level index.
 */

typedef unordered_map <unsigned, LengthBucket*> HashTable;

class Buckets
{
public:		
    Buckets();
    ~Buckets();	
    //get the matched buckets given a gram
    LengthBucket* getMatchedBuckets(const char *gram);
    //insert the gram info into the idex
    void addToHashTable(const char *gram, 
					    unsigned stringID, 
					    unsigned short position, 
					    unsigned short stringLength);
	//The operators are used for searlization of index.
    friend ostream &operator << (ostream &output, const Buckets & buckets);
    friend istream &operator >> (istream &input, Buckets & buckets);
    //This function returns the memory requirement of a node of this type
    unsigned getMemory();
    HashTable *map;
};

#endif /*_buckethead_h_*/
Mis_redirected¢DtypeEvalueôIhttp_code¢DtypeEvalueÈQdownload_complete¢DtypeEvalueõ