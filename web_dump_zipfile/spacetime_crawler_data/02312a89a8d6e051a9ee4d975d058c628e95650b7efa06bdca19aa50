¦Ifinal_url¡DtypeLhttp_headers¢DtypeEvalue‡¢Ak¢DtypeEvalueNContent-LengthAv¢DtypeEvalueD1732¢Ak¢DtypeEvalueMAccept-RangesAv¢DtypeEvalueEbytes¢Ak¢DtypeEvalueFServerAv¢DtypeEvalueX„Apache/2.4.6 (CentOS) OpenSSL/1.0.2k-fips SVN/1.7.14 mod_wsgi/3.4 Python/2.7.5 Phusion_Passenger/4.0.53 mod_perl/2.0.10 Perl/v5.16.3¢Ak¢DtypeEvalueMLast-ModifiedAv¢DtypeEvalueXWed, 17 Apr 2013 01:54:20 GMT¢Ak¢DtypeEvalueDETagAv¢DtypeEvalueS"6c4-4da84c3a8cb00"¢Ak¢DtypeEvalueDDateAv¢DtypeEvalueXSun, 10 Feb 2019 09:55:18 GMT¢Ak¢DtypeEvalueLContent-TypeAv¢DtypeEvalueXtext/plain; charset=UTF-8Kraw_content¢DtypeEvalueYÄ/*
    $Id: allrand.cc 1107 2007-04-16 23:59:13Z rvernica $

    Copyright (C) 2007 by The Regents of the University of California

    Redistribution of this file is permitted under the terms of the
    GNU Public License (GPL).

    Date: 01/14/2006
    Author: Rares Vernica <rvernica@ics.uci.edu>
*/

#include "allrand.h"

AllRand::AllRand(const vector<string> *d, Clusters *c, ContQueryPivot *q, 
                   const unsigned samplePer): 
  PPDSample(d, c, q, samplePer) 
{
  // init - sample
  sample = Sample(max(1u, 
                      static_cast<unsigned>(static_cast<float>(samplePer) / 
                                            100 * data->size())), 
                  data->size());

  // init - loop
  sampleIt = sample.begin();  
  clusterIt = clusters->beginCluster();
  stringIt = clusterIt->begin();
}

void AllRand::step() 
{
  stringIt++;
  if (stringIt == clusterIt->end()) {
    ++clusterIt;
    if (clusterIt == clusters->endCluster())
      {
        sampleIt++;
        if (sampleIt == sample.end()) 
          return;
        clusterIt = clusters->beginCluster();
      }
    stringIt = clusterIt->begin();
  }
}

bool AllRand::hasNext() const 
{
  if (sampleIt != sample.end()) 
    return true;
  return false;
}

PPDTriple AllRand::next() 
{
  const unsigned q = *sampleIt;
  const unsigned p = clusterIt->getPivot();
  const unsigned s = *stringIt;

  PPDTriple triple = PPDTriple(q,
                               p,
                               s,
                               SimVect((*data)[q], (*data)[p]),
                               SimVect((*data)[p], (*data)[s]),
                               SimDist((*data)[q], (*data)[s]));

  // increment
  step();

  return triple;
}
Mis_redirected¢DtypeEvalueôIhttp_code¢DtypeEvalueÈQdownload_complete¢DtypeEvalueõ