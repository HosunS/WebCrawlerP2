¦Ifinal_url¡DtypeLhttp_headers¢DtypeEvalue‡¢Ak¢DtypeEvalueNContent-LengthAv¢DtypeEvalueE31254¢Ak¢DtypeEvalueMAccept-RangesAv¢DtypeEvalueEbytes¢Ak¢DtypeEvalueFServerAv¢DtypeEvalueX4Apache/2.4.6 (CentOS) OpenSSL/1.0.2k-fips SVN/1.7.14¢Ak¢DtypeEvalueMLast-ModifiedAv¢DtypeEvalueXSat, 20 Mar 2004 07:15:18 GMT¢Ak¢DtypeEvalueDETagAv¢DtypeEvalueT"7a16-3d60ad3966d80"¢Ak¢DtypeEvalueDDateAv¢DtypeEvalueXThu, 31 Jan 2019 02:46:49 GMT¢Ak¢DtypeEvalueLContent-TypeAv¢DtypeEvalueXtext/html; charset=UTF-8Kraw_content¢DtypeEvalueYz<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE html PUBLIC
 "-//W3C//DTD XHTML 1.1//EN"
 "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">

<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en">

<head>
<meta http-equiv="content-type" content="text/html; charset=iso-8859-1" />
<link rel="stylesheet" href="course2.css" type="text/css" />

<title>ICS 142 Winter 2004, Final Exam Study Guide</title>
</head>

<body>

<div class="navbar">

<p>
ICS 142 Winter 2004 |
<a href="index.html">News</a> |
<a href="CourseReference.html">Course Reference</a> |
<a href="Schedule.html">Schedule</a> |
<a href="LabManual">Lab Manual</a> |
<a href="news:ics.142">ics.142 newsgroup</a> |
<a href="http://www.ics.uci.edu/~thornton/">About Alex</a>
</p>

<hr />

</div>

<div class="header">

<p>ICS 142 Winter 2004<br />
   Final Exam Study Guide</p>

</div>

<div class="section">

<hr />

<p class="title">Introduction</p>

<p>This study guide is a summary of the lecture material covered since the midterm.</p>

<p>The final exam will be comprehensive, so you should be sure to understand the concepts and algorithms that we covered before the midterm.  As you prepare for the exam, be sure to look over the <a href="MidtermStudyGuide.html">Midterm Study Guide</a>, which is a summary of lecture material that was covered before the midterm.</p>

<p>While I don't intend to include questions on the final testing tiny details from the textbook that were not covered in lecture, you are responsible for the assigned readings.  Broad ideas and important points from the readings are fair game for the exam, even if we didn't cover them in lecture.  I haven't included this material in the study guide.  Off-limits topics from before the midterm (listed in the <a href="MidtermStudyGuide.html">Midterm Study Guide</a>) will remain off-limits for the final.</p>

</div>

<div class="section">

<hr />

<p class="title">The study guide</p>

<p><i>First of all, what about JFlex and CUP?</i></p>

<ul>
  <li>I would expect you to understand the basic principles behind these tools, though I won't ask you to write either a JFlex or a CUP script.  However, I might ask you to evaluate simple ones, to ensure that you understand how they work.</li>
</ul>

<p><i>Semantic analysis and abstract syntax trees</i></p>

<ul>
  <li>These topics are explained in quite a bit of detail already in the <a href="LabManual/Assignment3">Assignment #3</a> write-up; I'm not sure there's much worthwhile that I can add.</li>
</ul>

<p><i>Symbol tables</i></p>

<ul>
  <li>Much of a compiler's ability to understand the meaning of a source program revolves around its ability to know the meaning of the identifiers that appear in it.</li>
  <li>To manage the problem of tracking the meaning of identifiers, compilers use a <i>symbol table</i>.
    <ul>
      <li>A symbol table is a mapping between identifiers and their meanings.</li>
      <li>The most important information that is maintained in a symbol table in early stages of compilation is type information, which facilitates much of static semantic checking.</li>
      <li>As compilation proceeds, additional information may be added, such as statically-determined memory addresses or offsets into activation records.</li>
    </ul>
  </li>
  <li>Of course, in most programming languages, the meaning of a particular identifier may vary throughout a program.
    <ul>
      <li>A language's <i>scoping rules</i> explain how the meaning of names is tied to declarations or uses elsewhere in the program.</li>
      <li>Almost all commonly-used programming languages employ static scoping rules, meaning that the use of an identifier can always be mapped back to its declaration unambiguously at compile time.</li>
      <li>The most common kind of static scoping rules enforce a kind of <i>block structure</i> on the program.
        <ul>
          <li>Declarations within one block (say, a procedure, or a block statement within a procedure) only take effect within that block.</li>
          <li>Declarations in inner scopes (e.g. block statements within block statements) take precedence over declarations in outer ones.</li>
        </ul>
      </li>
      <li>A common implementation technique for a symbol table in such a case is a <i>scoped symbol table</i>.
        <ul>
          <li>A scoped symbol table is, essentially, a stack of symbol tables.</li>
          <li>Each lookup in a scoped symbol table involves looking up the name in each symbol table on the stack, starting with the top and proceeding until either the name is found or until all tables have been consulted.</li>
          <li>If the name is not found in any of the tables in the stack, an error is reported.</li>
        </ul>
      </li>
      <li>This approach lends itself very nicely to analysis during parsing in a language in which all names must be declared before use.
        <ul>
          <li>Entering a new scope causes a new symbol table to be pushed on to the stack.</li>
          <li>Exiting a scope causing a symbol table to be popped from the stack.</li>
        </ul>
      </li>
      <li>Languages with more complex scoping rules (e.g. Java, which includes lookups throughout inheritance hierarchies) will require a more complex symbol table implementation.</li>
    </ul>
  </li>
</ul>

<p><i>Interpreters vs. compilers</i></p>

<ul>
  <li>Once the scanner, parser, and semantic checker have determined a program to be lexically, syntactically, and (static) semantically correct, we've reached a fork in the road.
    <ul>
      <li>From here, we could continue with intermediate code generation, optimization, and code generation, if we're interested in building a compiler.</li>
      <li>We can also continue in a different direction, instead building a simulator that executes the program directly.  Such a simulator is generally called an <i>interpreter</i>.</li>
    </ul>
  </li>
  <li>Compilers and interpreters share some techniques: most notably, the techniques that are used in the front end.  Either way, the source program must be scanned, parsed, and its meaning must be understood.
    <ul>
      <li>The difference is what is done with that understood meaning: a compiler translates it to an equivalent program in a target language, while an interpreter executes the program and generates output.</li>
    </ul>
  </li>
</ul>

<p><i>Source-level interpreters using abstract syntax trees</i></p>

<ul>
  <li>A source-level interpreter is one that interprets the source code somewhat directly, rather than first translating it to an intermediate form (such as how Java is first compiled to bytecodes that are then interpreted).
    <ul>
      <li>To build a source-level interpreter, some representation of the source code will need to be available to the interpreter.</li>
      <li>A common solution for this problem is to use an abstract syntax tree, traversing it and evaluating it as the program executes.</li>
    </ul>
  </li>
  <li>In theory, any language can be interpreted.
    <ul>
      <li>Of course, interpretation represents a tradeoff: flexibility for speed.
        <ul>
          <li>An interpreter is capable of reporting errors in terms of the original source code, which is more difficult in a compiled program.</li>
          <li>Interpretation allows programs to be executed piecemeal for testing purposes, without a lengthy compilation step.</li>
          <li>Interpretation also makes it easier to support features such as rewriting portions of a program while executing it in a debugger.</li>
          <li>Unfortunately, interpretation is orders of magnitude slower than the execution of a compiled program.</li>
        </ul>
      </li>
      <li>For some languages, the tradeoff is not as great as others.
        <ul>
          <li>Languages with highly dynamic characteristics, such as Scheme (with dynamic typing) or early versions of LISP (with not only dynamic typing, but also dynamic scoping) pay less of a penalty when interpreted relative to execution of a compiled version, since so much housekeeping work (maintenance of symbol tables, tracking the types of symbols) needs to be done at run time, whether the program is interpreted or compiled.</li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<p><i>Linear intermediate representations</i></p>

<ul>
  <li>The result of scanning and parsing is often the creation of an <i>intermediate representation</i> (IR) of the source program.
    <ul>
      <li>An abstract syntax tree (AST) is one form of IR, one that graphically (i.e. in terms of an object graph) represents the source program.</li>
      <li>A typical AST represents source program abstractions, such as if statements and while loops, directly, though it is possible to build a lower-level IR.</li>
    </ul>
  </li>
  <li>If we want to ultimately generate assembly code equivalent to the source program, then it is often necessary to work with a lower-level IR, one that is closer to the level of abstraction provided by an assembly language.
    <ul>
      <li>Typically, this means that the IR will be linear (i.e. a list of instructions), so that it will more closely resemble assembly language.</li>
    </ul>
  </li>
  <li>There are three benefits to a linear IR:
    <ul>
      <li>It's closer to the assembly code that we will eventually generate, which simplifies the instruction-selecting portion of code generation somewhat.</li>
      <li>Since linear IR's are often more compact than graphical ones such as AST's, it is faster to process them.</li>
      <li>Most importantly, opportunities for optimization may be found in a linear IR that simply don't show up in an AST built directly from source code, since a well-designed linear IR conveys more information than the source code does.</li>
    </ul>
  </li>
  <li>One form of linear IR is <i>stack machine code</i>.
    <ul>
      <li>Stack-machine code assumes the presence of an <i>operand stack</i>, which holds the results of intermediate calculations.</li>
      <li>Most operations take their operands from the stack, then push their result back on to the stack.
        <ul>
          <li>For example, an integer add would take the top two elements from the stack, add them, then push the result.</li>
        </ul>
      </li>
      <li>Often included is a swap operation, which swaps the top two stack elements.</li>
      <li>There is also generally a representation for memory, which is used to store values for longer terms.</li>
      <li><i>Advantages:</i> Simple to generate; a post-order traversal of an AST, for example, can be used to generate it.  Very compact, since it doesn't need to store operands in instructions.</li>
      <li><i>Disadvantage:</i> It is not a good IR unless you're targeting a stack machine (i.e. a processor that actually uses an operand stack).</li>
    </ul>
  </li>
  <li>In a compiler that targets a more conventional processor, a more appropriate representation is <i>three-address code</i>.
    <ul>
      <li>In three-address code, most operations look roughly like this: <b>x = y op z</b>, where <i>op</i> is some operator, <i>y</i> and <i>z</i> are source operands, and <i>x</i> is the target operand.  The target operand may be different from the source operands.</li>
      <li>This is a convenient representation, because it is easy to represent in a compiler as an object with four values stored in it (an opcode, along with the three operands).</li>
      <li>It also matches up nicely with many "real" instruction sets.  (One notable exception is Intel 80x86, which has destructive two-address instructions.)</li>
      <li>An example of a three-address code that we used this quarter is ILOC.</li>
    </ul>
  </li>
</ul>

<p><i>Do you really expect me to have memorized all the ILOC instructions?</i></p>

<ul>
  <li>You should be familiar enough with the ILOC instructions to...
    <ul>
      <li>...understand what a chunk of ILOC does, and also understand trade-offs in generating different blocks of ILOC for control-flow structures and expressions, as we discussed in lecture.</li>
      <li>...you should be able to apply optimizations similar to the ones you implemented in Assignment #6 (or perhaps others, given descriptions of them).</li>
    </ul>
  </li>
  <li>The thing to remember about ILOC instructions is that they follow a regular naming convention that makes them easy to understand, even if you haven't got all the instructions memorized.
    <ul>
      <li>As always, understanding trumps memorization here.</li>
      <li>Know the difference between regular instructions, "I" instructions (immediate), "AI" instructions (address + immediate), and "AO" instructions (address + offset).</li>
      <li>Know, in general, what instruction groups like "load" and "store", "add", "lshift", etc., do.</li>
      <li>In many cases, you can infer meaning based on the name and prior understanding of assembly-style languages from prior courses.</li>
    </ul>
  </li>
  <li>The best place to get a description of all the instructions is in Appendix A of the textbook.  Most of the instructions are listed in a table in the Assignment #6 write-up, though I left some out that I didn't intend for us to use in the assignment.  (Notably missing from the assignment, for example, are the "comp" and "cbr_*" instructions.)</li>
</ul>

<p><i>Run-time organization</i></p>

<ul>
  <li>A compiler's job is very similar to the job of a programmer.
    <ul>
      <li>A programmer maps the abstractions of some problem to the abstractions of the source language.  For example, in building a Java program to manage student enrollment information, classes such as Student, Course, and Enrollment might be created.</li>
      <li>A compiler maps the abstractions provided by a source language into the abstractions provided by a target language.  This generally means taking higher-level abstractions like classes, procedures, and expressions and turning them into lower-level ones such as instructions, memory usage, and the management of a run-time stack.</li>
      <li>There are a number of standard techniques for structuring high-level language abstractions in assembly-level target programs that are widely used.</li>
    </ul>
  </li>
  <li>Execution of a program begins when the operating system invokes it, either on behalf of a user or for its own ends.
    <ul>
      <li>Program invocation involves four major steps:
        <ul>
          <li>OS allocates space for the program in memory.  (This usually means allocating a logical address space unique to that program, then mapping it into virtual memory.</li>
          <li>OS loads the code for the program into the logical address space.</li>
          <li>OS executes initialization code, if any (e.g. initializations of global variables, such as constructor calls on global objects in a C++ program).</li>
          <li>OS jumps to the entry point of the program (e.g. "main").</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>The logical address space is typically organized with the code at one end of the address space, and all the data organized after the code.
    <ul>
      <li>In an implementation of a typical programming language, the data area is split into separate portions:
        <ul>
          <li>The <i>global area</i>, in which global variables are allocated at compile-time.</li>
          <li>The <i>run-time stack</i>, in which information about each procedure call is kept, in the form of a stack of activation records.</li>
          <li>The <i>heap</i> (or <i>free store</i>), in which dynamically-allocated variables with indeterminate lifetimes are stored.</li>
        </ul>
      </li>
      <li>Qualities of the programming language being implemented will determine whether this design makes sense.
        <ul>
          <li>For example, in Scheme, where activations of procedures are not necessarily last-in/first-out, activation records must be allocated in the heap, rather than stored on the run-time stack.</li>
          <li>In languages that do not support recursion, activation records can be allocated statically, instead.</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>Perhaps the most important construct that we'll need to manage at run time is that of the <i>subprogram</i>.
    <ul>
      <li>The problem is that processors do not support the high-level concept of a subprogram directly.  So it must be simulated with low-level instructions instead.</li>
    </ul>
  </li>
  <li>An <i>activation</i> of a subprogram is a complete use of it (i.e. a call to it, its execution to completion, and the return from it).</li>
  <li>In order for subprograms to communicate with each other, while knowing as little as possible about one another, an agreed-upon convention must be followed by both the caller and the callee.
    <ul>
      <li>This convention, in total, is called <i>subprogram linkage</i>.</li>
      <li>It lists, among other things, responsibilities for callers and callees.
        <ul>
          <li>For example, the caller must pass parameters to the callee in a previously agreed-upon way, so that the callee can find them.</li>
          <li>The caller and callee, together, must agree on who will save the processor's state (i.e. registers) so that it can be restored upon return.</li>
        </ul>
      </li>
      <li>We'd like code written in different languages to be able to communicate with one another, if possible...
        <ul>
          <li>...and we'd even like code written in the same language, but compiled with different compilers for the same platform, to be able to communicate.</li>
          <li>For this reason, subprogram linkage is often agreed upon at operating system design time.</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>In order to separate information about activations from one another, information about each subprogram is stored in an <i>activation record</i> (AR).
    <ul>
      <li>The contents of AR's will vary, but a typical one might look something like this:
        <ul>
          <li>local data area
            <ul>
              <li>includes local variables and compiler-generated temporaries</li>
              <li>may be of variable size, since number of temporaries may vary per execution of a subprogram, depending on control-flow</li>
            </ul>
          </li>
          <li>caller's AR pointer (dynamic link)</li>
          <li>static link (pointer to AR of static ancestor)</li>
          <li>return address</li>
          <li>return value pointer</li>
          <li>register-save area</li>
          <li>parameters
            <ul>
              <li>in a language that supports the passing of variable numbers of parameters, this may also be of variable size</li>
              <li>in such a language, it is typical to pass parameters in backward order, with the first one at the top and later ones below it, which allows the first <i>n</i> arguments to be at known offsets</li>
            </ul>
          </li>
        </ul>
      </li>
    </ul>
  </li>
  <li>Implementation of parameter passing modes:
    <ul>
      <li><i>pass by value</i> and <i>pass by value-result</i>.  Copy the value of the actual parameter into a slot in the activation record.  All uses of the formal parameter access (or modify) the copy.</li>
      <li><i>pass by reference</i>.  Pass a pointer to the actual parameter instead of the actual parameter itself.  Store that pointer in callee's AR.  Whenever formal parameter is accessed, pointer is dereferenced.
    </ul>
  </li>
  <li>Returning values is slightly more complicated, since the returned value must live on after the callee dies (along with its AR).
    <ul>
      <li>One strategy is to store a return value pointer in the callee's AR, which points to an allocated slot in the caller's AR (perhaps in its local data area).</li>
      <li>This strategy doesn't work if the caller is unaware of how large the return value may be.  In this case, a pointer to a heap-allocated return value should be returned instead.</li>
    </ul>
  </li>
  <li>Accessing variables:
    <ul>
      <li>Accessing global variables is straightforward.  They can be accessed directly at their statically-determined address.</li>
      <li>Local variables are also straightforward to access.  Assuming that each is laid out at a known offset in its AR, it can be accessed at that known offset, assuming some register points to the current AR.</li>
      <li>Non-local variables are trickier.
        <ul>
          <li>Assuming a block-structured language, each AR can maintain a <i>static link</i>, which points to the AR for the most recent activation of the lexically-enclosing subprogram.</li>
          <li>Any of use a nonlocal variable can be denoted by a <i>static-distance coordinate</i>, which is explained in more detail in the <a href="LabManual/Assignment5">Assignment #5</a> write-up.</li>
          <li>Maintaining the static links at run-time can be done with a simple algorithm, assuming that each subprogram has a level number that indicates its depth (i.e. how many subprograms it is nested within):
            <ul>
              <li>A call to a level 0 subprogram results in the callee's static link pointing to null.</li>
              <li>A call from level <i>n</i> to level <i>n</i> + 1 results in the callee's static link pointing to the caller's AR.</li>
              <li>A call from level <i>n</i> to level <i>n</i> results in the callee's static link pointing where the caller's static link points.</li>
              <li>A call from level <i>m</i> to level <i>n</i> (where <i>n</i> &lt; <i>m</i>), the callee's static link points to where the static link <i>n</i> - <i>m</i> static links away points.</li>
            </ul>
          </li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<p><i>Intermediate code generation</i></p>

<ul>
  <li>When implementing high-level constructs with low-level intermediate instructions, a compiler has many options.
    <ul>
      <li>Some strategies will yield code that runs faster.  Some will yield code that uses less memory or less power.</li>
    </ul>
  </li>
  <li>Many of the trade-offs that must be made in selecting an implementation strategy for a high-level construct revolve around the <i>memory hierarchy</i>.
    <ul>
      <li>From a simplistic point of view, there are four places where information is typically stored:
        <ul>
          <li><i>Registers</i>.  Fast but expensive, so there typically aren't very many of them.  Can usually be accessed in one cycle.</li>
          <li><i>Cache</i>.  Nearly as fast as registers, but cheaper so that there can be more.  Can usually be accessed in a few cycles.</li>
          <li><i>Main memory</i>.  Significantly slower than cache, but significantly cheaper.  At least tens to hundreds of times slower than registers, a disparity that's getting progressively worse as processors are speeding up more rapidly than memory.</li>
          <li><i>Disk</i>.  Millions of times slower than registers, but extremely cheap.</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>The most obvious way to speed a program up is to keep data in registers whenever possible.
    <ul>
      <li>But, of course, there are a finite number of registers available.</li>
      <li>In intermediate code, we sidestep this problem by using an unlimited number of virtual registers...
        <ul>
          <li>...and counting on a <i>register allocator</i> to map the set of virtual registers to a set of actual registers toward the end of compilation.</li>
        </ul>
      </li>
      <li>Even with an infinite number of registers, not all data can be stored in registers.
        <ul>
          <li>If more than one name can be used to access a variable, it can't be stored in a register, unless the compiler is fully aware of all the possible names for it in every context.</li>
          <li>When multiple names can be used and procedure boundaries are crossed (e.g. when pass by reference parameter passing is used), the value must be stored in memory before the call, and loaded afterward.</li>
          <li>In fact, as soon as the address of the variable is taken, it becomes significantly more difficult to keep a value in a register.</li>
          <li>And in a language like C, with arbitrary pointer arithmetic, the difficulty level is even higher, since pointers can theoretically point anywhere and treat any value as being of any data type.</li>
        </ul>
      </li>
      <li>An additional compilation that affects whether (and how) values might be stored in registers is the presence of multiple threads.</li>
    </ul>
  </li>
  <li>Generating intermediate code for the arithmetic expression <b>a + b</b> requires three steps:
    <ul>
      <li>First, generate code to load the value of <b>a</b> into a register (if it's not in a register already).</li>
      <li>Next, generate code to load the value of <b>b</b> into a register (if it's not already).</li>
      <li>Finally, generate an add instruction.</li>
      <li>The resulting ILOC sequence might look something like this, assuming <b>a</b> and <b>b</b> are local variables stored in the current activation record:
        <ul>
          <li>loadI @a &rArr; r<sub>1</sub></li>
          <li>loadAO r<sub>arp</sub>, r<sub>1</sub> &rArr; r<sub>a</sub></li>
          <li>loadI @b &rArr; r<sub>2</sub></li>
          <li>loadAO r<sub>arp</sub>, r<sub>2</sub> &rArr; r<sub>b</sub></li>
          <li>add r<sub>a</sub>, r<sub>b</sub> &rArr; r<sub>a+b</sub></li>
        </ul>
      </li>
      <li>A naive approach for generating code for expressions, then, is a postorder tree traversal.
        <ul>
          <li>We keep track of which variables are stored in registers as we go along.</li>
          <li>We load values into registers only when necessary (i.e. only when we need them and they're not loaded already).</li>
          <li>We generate code for the operators only after the operands are loaded.</li>
        </ul>
      </li>
      <li>The main problem with this approach is that it may not minimize register usage:
        <ul>
          <li>If the left-hand side requires more registers in order to perform its computation than the right-hand side does...</li>
          <li>...we'd be better off doing the right-hand side of the computation first.</li>
          <li>So the best move is to first traverse the tree and decide which subtree will require the most registers, and generate code for that subtree first.</li>
        </ul>
      </li>
      <li>The presence of function calls in expressions complicates matters somewhat, since functions may have side effects.
        <ul>
          <li>It will be necessary to store values in memory before the call and load them afterward, if it's possible for the function to change them.</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>A separate document titled <a href="ILOCExamples.html">ILOC Examples</a> demonstrates and explains intermediate code generation for boolean expressions and loops, as we discussed them in lecture.</li>
</ul>
          
<p><i>Optimization</i></p>

<ul>
  <li>An optimizer takes as input a set of intermediate code.  Its output is a "better" set of intermediate code, one that is equivalent in effect but does the job in a better way (i.e. faster, with less memory usage, etc.).</li>
  <li>The primary job of an optimizer is to understand the details of some portion of the intermediate code program.  The <i>scope</i> of an optimization is the portion of the program that is analyzed.
    <ul>
      <li>The smallest scope is typically one <i>basic block</i>.  A basic block is a straight-line list of instructions, with a label appearing (optionally) on the first instruction and a jump or conditional branch (optionally) appearing as the last instruction.
        <ul>
          <li>In other words, all of the instructions of a basic block are guaranteed to execute completely and in sequence from beginning to end.</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>The first step for many optimizations is to build a control-flow graph (CFG).
    <ul>
      <li>A CFG captures the control flow between basic blocks.  Individual nodes of the graph represent basic blocks.  Edges indicate possible flows of control between them.</li>
      <li>I provided the code for this in Assignment #6.  Here's (roughly) the algorithm to find all the <i>leaders</i> (i.e. the instructions that begin basic blocks).
        <ul>
          <li>For each instruction <i>i</i>:
            <ul>
              <li>If <i>i</i> has a label on it, it's a leader.</li>
              <li>If <i>i</i> follows an instruction that is a conditional branch of a jump, it's a leader.</li>
            </ul>
          </li>
        </ul>
      </li>
      <li>Once all the leaders have been found, nodes can be built to represent each basic block, and edges can be added based on the labels appearing on leaders and in jumps/branches.</li>
    </ul>
  </li>
  <li>There are a variety of optimizations that can be performed.  As a starting point, be sure you understand the ones that were implemented in <a href="LabManual/Assignment6">Assignment #6</a>.</li>
  <li>Local optimizations can be extended to become <i>superlocal optimizations</i>.  A superlocal optimization operates on an <i>extended basic block</i> (EBB), rather than one basic block.
    <ul>
      <li>An EBB is a set of basic blocks B<sub>1</sub>, B<sub>2</sub>, ..., B<sub>n</sub>, in which B<sub>1</sub> may have more than one predecessor in the CFG, but all other blocks will have a unique predecessor in the EBB.
        <ul>
          <li>In other words, the basic blocks in an EBB are a subset of the nodes in the CFG that are, themselves, a tree.</li>
        </ul>
      </li>
      <li>Since an EBB is, essentially, a tree of basic blocks, optimizations such as constant propagation and folding can easily be extended to work on EBB's instead of basic blocks.</li>
      <li>Since a unique predecessor is guaranteed to execute before each node in the EBB, optimizations can be done in a treelike fashion, with information carried down from one node to another along each path in the tree.</li>
      <li>Complications in optimization typically arrive at join points in the CFG (i.e. nodes with multiple predecessors).  Superlocal optimizations deal with such nodes as though they have no predecessors, i.e. discarding any known information before beginning to process them.</li>
    </ul>
  </li>
</ul>

<p><i>Instruction scheduling</i></p>

<ul>
  <li><b><i>This topic will not be covered on the exam.</i></b></li>
</ul>

</div>

</body>
</html>
Mis_redirected¢DtypeEvalueôIhttp_code¢DtypeEvalueÈQdownload_complete¢DtypeEvalueõ