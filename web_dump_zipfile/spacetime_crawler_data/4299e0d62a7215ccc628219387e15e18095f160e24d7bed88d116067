¦Ifinal_url¡DtypeLhttp_headers¢DtypeEvalue‰¢Ak¢DtypeEvalueNContent-LengthAv¢DtypeEvalueC929¢Ak¢DtypeEvaluePContent-EncodingAv¢DtypeEvalueDgzip¢Ak¢DtypeEvalueMAccept-RangesAv¢DtypeEvalueEbytes¢Ak¢DtypeEvalueDVaryAv¢DtypeEvalueOAccept-Encoding¢Ak¢DtypeEvalueFServerAv¢DtypeEvalueX4Apache/2.4.6 (CentOS) OpenSSL/1.0.2k-fips SVN/1.7.14¢Ak¢DtypeEvalueMLast-ModifiedAv¢DtypeEvalueXSun, 26 Feb 2012 23:57:04 GMT¢Ak¢DtypeEvalueDETagAv¢DtypeEvalueX"74b-4b9e6c0235400-gzip"¢Ak¢DtypeEvalueDDateAv¢DtypeEvalueXFri, 01 Feb 2019 17:45:33 GMT¢Ak¢DtypeEvalueLContent-TypeAv¢DtypeEvalueXtext/plain; charset=UTF-8Kraw_content¢DtypeEvalueYK1. The problem of coloring a given graph with at most three colors is NP-complete. Formulate a linear programming relaxation of this problem.


2. Consider a random walk on a complete graph with n vertices. The graph has no self-loops, so the walk must move to a different vertex at each step.

(a) For what values of n does this process generate an aperiodic and irreducible Markov chain?

(b) Suppose we start the walk at some particular vertex v_0, deterministically, and then perform the random walk as above. Let P_i denote the probability distribution on the vertices of the graph after i steps of the walk. What is the total variation distance between P_1 and the uniform distribution, as a function of n?

(c) Suppose that you wish to generate approximately-uniform random samples of a set of n elements. Would constructing a complete graph on this set and performing a random walk for enough steps to make the variation distance small be a good way of doing so? Why or why not?


3. (M-U 7.19). Suppose we perform a simple random walk (starting from zero and with equal probability adding either +1 or -1 to our current position at each step), stopping when we reach either the negative number L or the positive number R. Prove that the expected number of steps until stopping is exactly LR.


4. (M-U 11.2). Consider the following Markov chain on a deck of cards: at each step choose one card uniformly at random and move it to the top of the deck. Stop shuffling when every card has been moved to the top at least once.

(a) Use coupling to show that, no matter what state the deck starts in, at the point that we stop the algorithm, the deck is random (every permutation is equally likely).

(b) Use the coupon collector's problem to give a bound (in O-notation, as a function of the number n of cards) on the number of steps performed by this algorithm.
Mis_redirected¢DtypeEvalueôIhttp_code¢DtypeEvalueÈQdownload_complete¢DtypeEvalueõ