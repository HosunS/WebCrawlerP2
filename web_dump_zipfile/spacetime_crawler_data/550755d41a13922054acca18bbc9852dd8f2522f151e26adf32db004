¦Ifinal_url¡DtypeLhttp_headers¢DtypeEvalue‡¢Ak¢DtypeEvalueNContent-LengthAv¢DtypeEvalueD2141¢Ak¢DtypeEvalueMAccept-RangesAv¢DtypeEvalueEbytes¢Ak¢DtypeEvalueFServerAv¢DtypeEvalueXjApache/2.4.6 (CentOS) OpenSSL/1.0.2k-fips SVN/1.7.14 Phusion_Passenger/4.0.53 mod_perl/2.0.10 Perl/v5.16.3¢Ak¢DtypeEvalueMLast-ModifiedAv¢DtypeEvalueXWed, 17 Apr 2013 01:53:47 GMT¢Ak¢DtypeEvalueDETagAv¢DtypeEvalueS"85d-4da84c1b140c0"¢Ak¢DtypeEvalueDDateAv¢DtypeEvalueXThu, 31 Jan 2019 15:28:15 GMT¢Ak¢DtypeEvalueLContent-TypeAv¢DtypeEvalueXtext/plain; charset=UTF-8Kraw_content¢DtypeEvalueY]/*
  $Id: gramlistondisk.h 5146 2010-03-24 23:05:57Z abehm $

  Copyright (C) 2010 by The Regents of the University of California
	
  Redistribution of this file is permitted under
  the terms of the BSD license.
    
  Date: 09/06/2008
  Author: Alexander Behm <abehm (at) ics.uci.edu>
*/

#ifndef _gramlistondisk_h_
#define _gramlistondisk_h_

#include "gramlist.h"

#include <iostream>
#include <cstring>

template <typename InvList = Array<unsigned> >
class GramListOnDisk : public GramList<InvList> {
private:
  InvList* invList;

public:
  unsigned listSize;
  streampos startOffset;
  
  GramListOnDisk()
    : invList(NULL), listSize(0), startOffset(0) {}
  
  GramListOnDisk(unsigned listSize, streampos& startOffset)
    : invList(NULL), listSize(listSize), startOffset(startOffset) {}
  
  InvList* getArray(fstream* invListsFile = NULL) {     
    if(invList) return invList;
    //cout << "NOT RETURNING IMMEDIATELY?!" << endl;
    if(!invListsFile) return NULL;    
    invList = new InvList(listSize);
    invList->setSize(listSize);
    unsigned bytes = listSize * InvList::elementSize();
    invListsFile->seekg(startOffset);
    invListsFile->read((char*)invList->begin(), bytes);
    return invList;
  }
  
  // fill the array from the given get position of the file stream
  // old invList will be deleted
  // no disk seek is performed
  void fillArray(fstream* invListsFile) {
    if(invList) clear();
    invList = new InvList(listSize);
    invList->setSize(listSize);
    unsigned bytes = listSize * InvList::elementSize();
    if(invListsFile->tellg() != startOffset) 
      cout << "THERE IS A PROBLEM HERE" << endl;
    invListsFile->read((char*)invList->begin(), bytes);    
  }
  
  void fillArray(char* data) {
    if(invList) clear();
    invList = new InvList(listSize);
    invList->setSize(listSize);
    unsigned bytes = listSize * InvList::elementSize();
    memcpy((void*)invList->begin(), (const void*)data, bytes);    
  }
  
  void clear() {
    if(invList) delete invList;
    invList = NULL;
  }

  void free() {
    clear();
    delete this;
  }

  ~GramListOnDisk() {
    clear();
  }
};

#endif
Mis_redirected¢DtypeEvalueôIhttp_code¢DtypeEvalueÈQdownload_complete¢DtypeEvalueõ