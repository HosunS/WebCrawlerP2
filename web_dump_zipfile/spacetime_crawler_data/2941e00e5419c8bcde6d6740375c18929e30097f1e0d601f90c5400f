¦Ifinal_url¡DtypeLhttp_headers¢DtypeEvalue†¢Ak¢DtypeEvalueNContent-LengthAv¢DtypeEvalueD2043¢Ak¢DtypeEvalueMAccept-RangesAv¢DtypeEvalueEbytes¢Ak¢DtypeEvalueFServerAv¢DtypeEvalueX4Apache/2.4.6 (CentOS) OpenSSL/1.0.2k-fips SVN/1.7.14¢Ak¢DtypeEvalueMLast-ModifiedAv¢DtypeEvalueXMon, 26 Nov 2018 23:16:09 GMT¢Ak¢DtypeEvalueDETagAv¢DtypeEvalueS"7fb-57b9984a5c235"¢Ak¢DtypeEvalueDDateAv¢DtypeEvalueXFri, 01 Feb 2019 01:02:14 GMTKraw_content¢DtypeEvalueYû#package lmtest includes a number of statistical tests for linear models (including Durbin-Watson test)
install.packages("lmtest")
library(lmtest)
library(tidyverse)
datainput <- read_csv("H://HAL/Courses/Stat210//money.csv")
# datainput <- read_csv("D://Stat210//money.csv")
money <- data.frame(datainput)

# data relating consumption (spending) as a function of money stock (money in circulatiion)
# data are 20 fiscal quarters; example with correlated errors
#

# yr.qtr = date (year and quarter)
# consump = consumption
# moneystock = money in circulation

plot(money$yr.qtr, money$consump, type="p")
plot(money$yr.qtr, money$moneystock,type="p")
plot(money$moneystock, money$consump, type="p")

# fit regression
money_reg <- lm(consump ~ moneystock, data=money)
summary(money_reg)
# obtain and save standardized residuals and other diagnostics
money_reg$stdres <- rstandard(money_reg)
# check assumptions - residuals vs fitted values
ggplot() +
  geom_point(data=money, mapping=aes(x=money_reg$fitted.values, y=money_reg$stdres)) 
# check assumptions - normality
qqnorm(money_reg$stdres)

# suspect correlated errors - create relevant plot and summary statistics 
plot(money_reg$stdres[1:19],money_reg$stdres[2:20],type="p")
dwtest(money_reg)
cor(money_reg$stdres[1:19],money_reg$stdres[2:20])

# use estimated autocorrelation to try and fix the regression (in place of a full time series analysis)
money$consump.diff <- money$consump - 0.8*lag(money$consump,k=1)
money$moneystk.diff <- money$moneystock - 0.8*lag(money$moneystock,k=1)
money_reg2 <- lm(consump.diff ~ moneystk.diff, data=money)

# note that this regression estimates beta0*(1 - pho)=0.2*beta0; should multiply beta0 by 5 for interpretation
summary(money_reg2)

# check assumptions - residuals vs fitted values
money_reg2$stdres <- rstandard(money_reg2)
ggplot() +
  geom_point(data=money, mapping=aes(x=c(NA,money_reg2$fitted.values), y=c(NA,money_reg2$stdres)))
# check assumptions - normality
qqnorm(money_reg2$stdres)
Mis_redirected¢DtypeEvalueôIhttp_code¢DtypeEvalueÈQdownload_complete¢DtypeEvalueõ