¦Ifinal_url¡DtypeLhttp_headers¢DtypeEvalueˆ¢Ak¢DtypeEvalueQTransfer-EncodingAv¢DtypeEvalueGchunked¢Ak¢DtypeEvalueJSet-CookieAv¢DtypeEvalueXI79eed619ece9b34315b1b9f5af9f028a=0338497db801ca1964e4a25a5f85ad65; path=/¢Ak¢DtypeEvalueFServerAv¢DtypeEvalueX4Apache/2.4.6 (CentOS) OpenSSL/1.0.2k-fips SVN/1.7.14¢Ak¢DtypeEvalueFPragmaAv¢DtypeEvalueHno-cache¢Ak¢DtypeEvalueMCache-ControlAv¢DtypeEvalueHno-cache¢Ak¢DtypeEvalueDDateAv¢DtypeEvalueXThu, 31 Jan 2019 01:47:49 GMT¢Ak¢DtypeEvalueCP3PAv¢DtypeEvalueX2CP="NOI ADM DEV PSAi COM NAV OUR OTRo STP IND DEM"¢Ak¢DtypeEvalueLContent-TypeAv¢DtypeEvalueXtext/html; charset=utf-8Kraw_content¢DtypeEvalueY;j<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en-gb" lang="en-gb" dir="ltr" >
<head>
  <base href="http://tutors.ics.uci.edu/index.php/79-python-resources/123-recursion-examples" />
  <meta http-equiv="content-type" content="text/html; charset=utf-8" />
  <meta name="author" content="Super User" />
  <meta name="generator" content="Joomla! - Open Source Content Management" />
  <title>Recursion Examples</title>
  <link href="/templates/beez_20/favicon.ico" rel="shortcut icon" type="image/vnd.microsoft.icon" />
  <link rel="stylesheet" href="/templates/system/css/system.css" type="text/css" />
  <link rel="stylesheet" href="/templates/beez_20/css/position.css" type="text/css" media="screen,projection"  />
  <link rel="stylesheet" href="/templates/beez_20/css/layout.css" type="text/css" media="screen,projection"  />
  <link rel="stylesheet" href="/templates/beez_20/css/print.css" type="text/css" media="print"  />
  <link rel="stylesheet" href="/templates/beez_20/css/general.css" type="text/css" />
  <link rel="stylesheet" href="/templates/beez_20/css/personal.css" type="text/css" />
  <script src="/media/system/js/mootools-core.js" type="text/javascript"></script>
  <script src="/media/system/js/core.js" type="text/javascript"></script>
  <script src="/media/system/js/caption.js" type="text/javascript"></script>
  <script src="/media/system/js/mootools-more.js" type="text/javascript"></script>
  <script src="/templates/beez_20/javascript/md_stylechanger.js" type="text/javascript"></script>
  <script src="/templates/beez_20/javascript/hide.js" type="text/javascript"></script>
  <script type="text/javascript">
window.addEvent('load', function() {
				new JCaption('img.caption');
			});
  </script>


<!--[if lte IE 6]>
<link href="/templates/beez_20/css/ieonly.css" rel="stylesheet" type="text/css" />
<style type="text/css">
#line {
  width:98% ;
}
.logoheader {
  height:200px;
}
#header ul.menu {
  display:block !important;
  width:98.2% ;
}
</style>
<![endif]-->

<!--[if IE 7]>
<link href="/templates/beez_20/css/ie7only.css" rel="stylesheet" type="text/css" />
<![endif]-->
<!--<script type="text/javascript">
  var big ='72%';
  var small='53%';
  var altopen='is open';
  var altclose='is closed';
  var bildauf='/templates/beez_20/images/plus.png';
  var bildzu='/templates/beez_20/images/minus.png';
  var rightopen='Open info';
  var rightclose='Close info';
  var fontSizeTitle='Font size';
  var bigger='Bigger';
  var reset='Reset';
  var smaller='Smaller';
  var biggerTitle='Increase size';
  var resetTitle='Revert styles to default';
  var smallerTitle='Decrease size';
</script>-->

</head>

<body>

<div id="all">
        <div id="back">
                <div id="header">
                                <div class="logoheader">
                                        <h1 id="logo">

                                                                                                                                                                                                        <span class="header1">
                                                                                </span></h1>
                                </div><!-- end logoheader -->
                                        <ul class="skiplinks">
                                                <li><a href="#main" class="u2">Skip to content</a></li>
                                                <li><a href="#nav" class="u2">Jump to main navigation and login</a></li>
                                                                                    </ul>
                                        <!--<h2 class="unseen">Nav view search</h2>-->
                                        <h3 class="unseen">Navigation</h3>
                                        
<ul class="menu">
<li class="item-464 active"><a href="/" >Home</a></li><li class="item-469"><a href="/index.php/becoming-a-tutor" >Becoming a Tutor</a></li><li class="item-470"><a href="/index.php/tutor-resources" >Learning Resources</a></li><li class="item-477"><a href="/index.php/tutor-coordinators" >Tutor Coordinators</a></li><li class="item-476"><a href="/index.php/contact" >Contact Us</a></li></ul>

                                        <div id="line">
                                        <!-- <div id="fontsize"></div> -->
                                        <!--<h3 class="unseen">Search</h3> -->
                                        
                                        </div> <!-- end line -->


                        </div><!-- end header -->
                        <div id="contentarea">
                                        <div id="breadcrumbs">

                                                        

                                        </div>

                                        

                                                        <div class="left1 leftbigger" id="nav">
                                                   <div class="moduletable_menu">
 <h3><span
	class="backh"><span class="backh2"><span class="backh3">This Site</span></span></span></h3>
 
<ul class="menu">
<li class="item-464 active"><a href="/" >Home</a></li><li class="item-469"><a href="/index.php/becoming-a-tutor" >Becoming a Tutor</a></li><li class="item-470"><a href="/index.php/tutor-resources" >Learning Resources</a></li><li class="item-477"><a href="/index.php/tutor-coordinators" >Tutor Coordinators</a></li><li class="item-476"><a href="/index.php/contact" >Contact Us</a></li></ul>
</div>

                                                                
                                                                


                                                        </div><!-- end navi -->
               
                                        <div id="wrapper2" >

                                                <div id="main">

                                                
                                                        
<div id="system-message-container">
</div>
                                                        <div class="item-page">

	<h2>
			<a href="/index.php/79-python-resources/123-recursion-examples">
		Recursion Examples</a>
		</h2>








<p><span style="color: #000000;"><strong>By Neeraj Shah (edits by Binh Nguyn and Daniel Holmes)</strong></span></p>
<p>&nbsp;</p>
<p style="text-align: justify;" align="center"><span style="color: #000000;">ICS 33: Recursion Examples with Explanations</span></p>
<p style="text-align: justify;"><span style="color: #000000;">1. Create a factorial function using recursion.</span></p>
<p style="text-align: justify;"><span style="color: #000000;">Answer: For a recursive function to work, it must follow three rules. It must prove that the base case is processed correctly without the need of recursion, that each recursive call is getting closer to the base case, and that, assuming all recursive calls solve their smaller sub-problems correctly, the code combines these solved sub-problems to solve the problem with the given parameter.</span></p>
<p style="text-align: justify;"><span style="color: #000000;">To start out, Iâ€™m going to write the function signature.</span></p>
<p style="text-align: justify;"><span style="color: #000000;">def factorial(n:int)</span></p>
<p style="text-align: justify;"><span style="color: #000000;">We know that n must be greater than or equal to zero, since that is a property of factorials. Therefore, the smallest number (the base case) is zero. The factorial of zero is 1, so we now have enough information to write the base case.</span></p>
<p style="text-align: justify;"><span style="color: #000000;">def factorial(n:int):</span></p>
<p style="text-align: justify;"><span style="color: #000000;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if n == 0:</span></p>
<p style="text-align: justify;"><span style="color: #000000;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return 1</span></p>
<p style="text-align: justify;"><span style="color: #000000;">Now that we have written the base case, we need to write code that both gets closer to the base case, and write code which solves the smaller sub-problems and combines these solutions. To do this, we need to examine what a factorial is and how it works. If we call factorial(5), we would need to return 5 * 4 * 3 * 2 * 1. A property of factorial that you may have noticed is that factorial(5) is equal to 5 * factorial(4). Finding properties like this is very important to solving recursive problems. It is important to look for ways to break the problem into smaller parts when attempting these kinds of problems. This will be better detailed in the next, and more complex, example.</span></p>
<p style="text-align: justify;"><span style="color: #000000;">With what we know, we can solve the problem.</span></p>
<p style="text-align: justify;"><span style="color: #000000;">def factorial(n:int)</span></p>
<p style="text-align: justify;"><span style="color: #000000;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if n == 0:</span></p>
<p style="text-align: justify;"><span style="color: #000000;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return 1</span></p>
<p style="text-align: justify;"><span style="color: #000000;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return n*factorial(n-1)</span></p>
<p style="text-align: justify;"><span style="color: #000000;">2. Create a function that, given a starting index, a list of integers, and a sum, can compute if the numbers in the list from the starting index to the end can, through some combination, add up to the sum. Sample inputs and outputs are shown below, as well as the functionâ€™s signature.</span></p>
<p style="text-align: justify;"><span style="color: #000000;">canSum(0, [5,4,6], 10) -&gt; True<br /><span style="color: #000000;">canSum(0, [5,4,6], 9) -&gt; True</span><span style="color: #000000;">canSum(1, [5,4,6], 11) -&gt; False</span><br /></span></p>
<p style="text-align: justify;"><span style="color: #000000;"><span style="color: #000000;">def canSum(startIndex, numList, sumTarget):</span></span></p>
<p style="text-align: justify;"><span style="color: #000000;">I strongly recommend that you attempt this problem before you see the solution.</span></p>
<p style="text-align: justify;"><span style="color: #000000;">Hint: The base case is if startIndex is greater than the length of numList, then we can return true if target is 0, or false is target is not 0. This is because there will no longer be any numbers in the list to compute, and so the only possible sum will be 0.</span></p>
<p style="text-align: justify;"><span style="color: #000000;">Solution: The first part of this problem is finding the base case, which is shown below.</span></p>
<p style="text-align: justify;"><span style="color: #000000;"><span style="color: #000000;"><span style="color: #000000;">def canSum(startIndex, numList, sumTarget):<br />&nbsp;&nbsp;&nbsp; if (len(numList) &lt;= startIndex):<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return sumTarget == 0<br /><br /></span></span></span></p>
<p style="text-align: justify;"><span style="color: #000000;">The next part of this problem is making sure that we get closer to the base case. Knowing this, we need to increment startIndex by one, since we will be searching through the whole list, and need to get startIndex to the end of the list for us to reach the base case. This information will help us later.</span></p>
<p style="text-align: justify;"><span style="color: #000000;">The most important part of this problem is not to get overwhelmed with the idea of computing the sums of the whole list, and instead looking at individual numbers for each recursive call. We need to try two ways to compute the sum: computing the sum using the current number, and computing the sum without using the current number. The current number is specified with the startIndex. These two cases break the problem into smaller parts. If we do include the number, then we need to call canSum again, this time incrementing start index, using the same list, and using the sumTarget minus the current number. If we do not include the current number in the sum, then we need to call canSum again by incrementing startIndex, using the same list, and using the same sumTarget. If doing neither of these return true, then we can return false. The full solution is shown below.</span></p>
<p style="text-align: justify;"><span style="color: #000000;"><span style="color: #000000;"><span style="color: #000000;"><span style="color: #000000;">def canSum(startIndex, numList, sumTarget):<br />&nbsp;&nbsp;&nbsp; if (len(numList) &lt;= startIndex):<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return sumTarget == 0</span></span></span><br />&nbsp;&nbsp;&nbsp; return canSum(<span style="color: #000000;"><span style="color: #000000;"><span style="color: #000000;"><span style="color: #000000;">startIndex+1, numList, sumTarget - numList[startIndex]) \ <br /></span></span></span></span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; or canSum<span style="color: #000000;">(<span style="color: #000000;"><span style="color: #000000;"><span style="color: #000000;"><span style="color: #000000;">startIndex+1, numList, sumTarget)</span></span></span></span></span><br /></span></p>
<p style="text-align: justify;"><span style="color: #000000;">When writing the return statement, I assumed that the canSum function would work for all smaller cases, and so I just used the canSum function for smaller cases. If we get to the end of the list, and the sumTarget is zero in any of the cases, then we know that we can return true. For solving problems like this, I recommend creating a diagram which shows how to solve the problem step by step. This function is much more compact than you may have thought, and shows how subtle recursion can be.</span></p> 
	
</div>


                                                </div><!-- end main -->

                                        </div><!-- end wrapper -->

                                
                        
                                <div class="wrap"></div>

                                </div> <!-- end contentarea -->

                        </div><!-- back -->

                </div><!-- all -->

                <div id="footer-outer">
                        
                        <div id="footer-sub">


                                <div id="footer">

                                        
                                        

                                </div><!-- end footer -->

                        </div>

                </div>
        
        </body>
</html>
Mis_redirected¢DtypeEvalueôIhttp_code¢DtypeEvalueÈQdownload_complete¢DtypeEvalueõ