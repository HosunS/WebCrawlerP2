¦Ifinal_url¡DtypeLhttp_headers¢DtypeEvalueˆ¢Ak¢DtypeEvalueNContent-LengthAv¢DtypeEvalueD6493¢Ak¢DtypeEvalueSContent-DispositionAv¢DtypeEvalueX?attachment; filename=cs222-2018-fall-command-line-interface.txt¢Ak¢DtypeEvalueJSet-CookieAv¢DtypeEvalueXitrac_session=40761ef14cab1a014cb18c59; expires=Wed, 08 May 2019 21:43:14 GMT; httponly; Path=/wiki/public¢Ak¢DtypeEvalueJKeep-AliveAv¢DtypeEvalueRtimeout=5, max=100¢Ak¢DtypeEvalueFServerAv¢DtypeEvalueX„Apache/2.4.6 (CentOS) OpenSSL/1.0.2k-fips SVN/1.7.14 mod_wsgi/3.4 Python/2.7.5 Phusion_Passenger/4.0.53 mod_perl/2.0.10 Perl/v5.16.3¢Ak¢DtypeEvalueJConnectionAv¢DtypeEvalueJKeep-Alive¢Ak¢DtypeEvalueDDateAv¢DtypeEvalueXThu, 07 Feb 2019 21:43:14 GMT¢Ak¢DtypeEvalueLContent-TypeAv¢DtypeEvalueXtext/plain;charset=utf-8Kraw_content¢DtypeEvalueY]{{{
#!div style="background-color:rgb(237,222,222)"

[[PageOutline]]

= Command Line Interface Interpreter for Project4 =
[[BR]]


== Introduction ==

Command Line Interface (CLI) takes a SQL-like command and executes that command. 
CLI is laid on top of the Relation Manager (RM) and Query Engine (QE) layers in Project 4 so that each command is executed via the public methods of the RM and/or QE layers.

== Supported Commands ==
The interpreter supports the following commands. 

{{{
create catalog
create table <tableName> (col1 = <type>, col2 = <type>, ...)
    <type> = int | real | <varchar>
    <varchar> = "varchar(" <length> ")"

create index <columnName> on <tableName>

drop catalog
drop table <tableName>
drop index <indexName> on <tableName>
drop attribute <attributeName> from <tableName>

insert into <tableName> tuple(col1 = <value1>, col2 = <value2>, ...)

SELECT <query>
<query> = 
    PROJECT <query> GET "[" <attrs> "]"
    FILTER <query> WHERE <attr> <op> <value>
    BNLJOIN <query>, <query> WHERE <attr> <op> <attr> PAGES(<numPages>)
    INLJOIN <query>, <query> WHERE <attr> <op> <attr>)
    GHJOIN <query>, <query> WHERE <attr> <op> <attr> PARTITIONS(<numPartitions>)
    AGG <query> [ GROUPBY(<attr>) ] GET <agg-op>(<attr>)
    IDXSCAN <query> <attr> <op> <value>
    TBLSCAN <query>
    <tableName>

<agg-op> = MIN | MAX | SUM | AVG | COUNT
<op> = < | > | = | != | >= | <= | NOOP
<attrs> = <attr> { "," <attr> }
<numPartitions> = is a number bigger than 0
<numPages> = is a number bigger than 0

print <tableName>
print attributes <tableName>
print index <attributeName> on <tableName>

load <tableName> <fileName>: loads the file which is in data/ folder.
help <commandName>
help
quit | exit
}}}
'''Note:''' All commands are case-insensitive. However, all user defined strings such as table names, attribute names etc. are case-sensitive.

== Command Examples ==

When you first execute CLI, you need to create the system catalog using the following command. Once the catalog is created, you don't need to execute this command again.

{{{
create catalog
}}}


You can create a table and insert a record using the following commands:

{{{
create table Employee EmpName = varchar(30), Age = int, Height = real, Salary = int
insert into Employee tuple(EmpName = sky, Age = 22, Height = 6.1, Salary = 13291)
}}}



Also, CLI supports a load command that allows users to load records in a file to an existing table.
The following screenshot shows how to load records from a file, employee_5 to a table, tbl_employee, and print all records in the table.
Furthermore, it also shows how to use SELECT command with FILTER iterator.


{{{
>>> create table tbl_employee EmpName = varchar(30), Age = int, Height = real, Salary = int
>>> load tbl_employee employee_5
>>> print tbl_employee
EmpName           |  Age  |  Height    |  Salary  |  
===================================================
Anettea Belote    |  67   |  6.400000  |  75000   |  
Zina Legleiter    |  45   |  6.300000  |  150000  |  
Rena Broadus      |  68   |  5.900000  |  250000  |  
Lorriane Shimmin  |  49   |  6.600000  |  400000  |  
Elvira Binns      |  36   |  5.600000  |  200000  |  
>>> SELECT FILTER tbl_employee WHERE Age = 45
tbl_employee.EmpName  |  tbl_employee.Age  |  tbl_employee.Height  |  tbl_employee.Salary  |  
============================================================================================
Zina Legleiter        |  45                |  6.300000             |  150000               |  
}}}

'''Note''' that there are a set of dataset files under codebase/data/ directory, which are used for example programs, "cli_example_01.cc" under codebase/cli directory (and can be used for your own examples.)
The example program contains 21 cases each of which executes a set of CLI commands.
Those example cases provide more comprehensive usage of all CLI commands.

 == Getting and Using Command Line Interface ==
The [wiki:cs222-2016-fall-project4#no1 codebase] has the following source tree.

{{{
codebase/
â”œâ”€â”€ cli
â”‚   â”œâ”€â”€ cli.cc
â”‚   â”œâ”€â”€ cli.h
â”‚   â”œâ”€â”€ cli_example_XX.cc
â”‚   â”œâ”€â”€ makefile
â”‚   â””â”€â”€ start.cc
â”œâ”€â”€ data
â”‚   â”œâ”€â”€ ages_90
â”‚   â”œâ”€â”€ employee_5
â”‚   â”œâ”€â”€ employee_50
â”‚   â””â”€â”€ salary_5
â”œâ”€â”€ ix
â”‚   â”œâ”€â”€ ix.cc
â”‚   â”œâ”€â”€ ix.h
â”‚   â”œâ”€â”€ ixtestX.cc
â”‚   â”œâ”€â”€ ixtest_extra_X.cc
â”‚   â”œâ”€â”€ ixtest_util.h
â”‚   â””â”€â”€ makefile
â”œâ”€â”€ makefile.inc
â”œâ”€â”€ qe
â”‚   â”œâ”€â”€ makefile
â”‚   â”œâ”€â”€ qe.cc
â”‚   â”œâ”€â”€ qetestX.cc
â”‚   â”œâ”€â”€ qetest_util.h
â”‚   â””â”€â”€ qe.h
â”œâ”€â”€ rbf
â”‚   â”œâ”€â”€ makefile
â”‚   â”œâ”€â”€ pfm.cc
â”‚   â”œâ”€â”€ pfm.h
â”‚   â”œâ”€â”€ rbfm.cc
â”‚   â”œâ”€â”€ rbfm.h
â”‚   â””â”€â”€ rbftestX.cc
â”œâ”€â”€ readme.txt
â”œâ”€â”€ rm
â”‚   â”œâ”€â”€ makefile
â”‚   â”œâ”€â”€ rm.cc
â”‚   â”œâ”€â”€ rm.h
â”‚   â”œâ”€â”€ rmtest_XX.cc
â”‚   â”œâ”€â”€ rmtest_create_tables.cc
â”‚   â”œâ”€â”€ rmtest_delete_tables.cc
â”‚   â”œâ”€â”€ rmtest_extra_X.cc
â”‚   â””â”€â”€ test_util.h
â””â”€â”€ shared.h
}}}
'''Note''' that the folder, codebase/data/ has csv files that contain a set of records, which can be used for your own checking purpose. 
[[BR]]
Also, the data folder is a folder that CLI program searches for files specified in "load" commands. [[BR]]

Goto cli folder and type the following commands

{{{
make clean; make; ./start
}}}

if you see the following outputs (the folder hierarchy will be different), you are good to go to the next step.

{{{
************************
SecSQL CLI started
Enjoy!
>>> 
}}}

Now, put all files that you implemented(and will implement in Project4) to the corresponding folders in the above source tree. 
Then, if you type again the same command in the cli folder, you can start playing by typing '''"help"'''.

== Acknowledgement ==
The CLI layer was originally written by the following three students from the previous CS222 course project.   
* Sky Faber
* Cesar Ghali
* Ekin Oguz
We really appreciate their efforts. We also acknowledge the efforts of Sattam Alsubaiee, Young-Seok Kim, Hotham Altwaijry, and Jianfeng Jia who updated the the CLI layer in the previous quarters. 

Lastly, to reflect the changed API of this quarter project, the CLI layer has been modified by Taewoo Kim.

}}}Mis_redirected¢DtypeEvalueôIhttp_code¢DtypeEvalueÈQdownload_complete¢DtypeEvalueõ