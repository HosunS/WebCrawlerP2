¦Ifinal_url¢DtypeEvaluex7https://www.ics.uci.edu/~thornton/ics21/LabManual/Lab4/Lhttp_headers¢DtypeEvalue‡¢Ak¢DtypeEvalueNContent-LengthAv¢DtypeEvalueD9069¢Ak¢DtypeEvalueMAccept-RangesAv¢DtypeEvalueEbytes¢Ak¢DtypeEvalueFServerAv¢DtypeEvalueX4Apache/2.4.6 (CentOS) OpenSSL/1.0.2k-fips SVN/1.7.14¢Ak¢DtypeEvalueMLast-ModifiedAv¢DtypeEvalueXThu, 09 Aug 2012 04:47:30 GMT¢Ak¢DtypeEvalueDETagAv¢DtypeEvalueT"236d-4c6cdecc87c80"¢Ak¢DtypeEvalueDDateAv¢DtypeEvalueXThu, 31 Jan 2019 03:30:09 GMT¢Ak¢DtypeEvalueLContent-TypeAv¢DtypeEvalueXtext/html; charset=UTF-8Kraw_content¢DtypeEvalueY#m<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE html PUBLIC
 "-//W3C//DTD XHTML 1.1//EN"
 "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">

<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en">

<head>
<meta http-equiv="content-type" content="text/html; charset=iso-8859-1" />
<link rel="stylesheet" href="../../course.css" type="text/css" />

<title>ICS 21 / CSE 21 Summer 2012, Lab 4: A Donation to the Music Archive</title>
</head>

<body>

<div class="navbar">

<p>
ICS 21 / CSE 21 Summer 2012 |
<a href="../../index.html">News</a> |
<a href="../../CourseReference.html">Course Reference</a> |
<a href="../../Schedule.html">Schedule</a> |
<a href="../../LabManual">Lab Manual</a> |
<a href="http://www.ics.uci.edu/~thornton/">About Alex</a>
</p>

<hr />

</div>

<div class="header">

<p>ICS 21 / CSE 21 Summer 2012<br />
   Lab 4: A Donation to the Music Archive</p>
   
</div>

<div class="section">

<hr />

<p class="title">Purpose</p>

<p>This lab will give you practice with simple nested data structures and formatted console output.  You will also gain additional practice in using ArrayLists and classes written by others.</p>

</div>

<div class="section">

<hr />

<p class="title">Program requirements</p>

<p>A serious collector of recorded music has donated his collection to a music archive.  You've been hired by the archive to create a title index and some "media counts" for the collection, using the information from a file that lists the donated items.  The archive needs the title index to easily find items; it needs the counts to determine how many storage shelves it needs for each type of media.</p>

<p>The archive has begun making a catalog of the donated items.  A catalog entry consists of an accession number (a unique identifier), the work's title, and the type of media the music is on (i.e., a book or pages of sheet music, vinyl record(s), etc.).</p>

<p>An accession number is no more than 10 characters and can be made up of digits and/or letters (and no other symbols).  A title is no longer than 50 characters and always starts with a capital letter; it never contains a semicolon (for reasons that will become clear shortly).  The media types are each designated by a single uppercase letter, according to the following table:</p>

<table class="normal">
  <tr class="top">
    <td>Letter</td>
    <td>Category</td>
  </tr>
  <tr>
    <td>C</td>
    <td>Compact media</td>
  </tr>
  <tr>
    <td>P</td>
    <td>Paper (sheet music, books)</td>
  </tr>
  <tr>
    <td>V</td>
    <td>Shellac and vinyl records</td>
  </tr>
  <tr>
    <td>W</td>
    <td>Wax cylinder</td>
  </tr>
</table>

<br />

</div>

<div class="section">

<hr />

<p class="title">Technical details</p>

<p>You've worked out with your archive contact that the input file given to you will be a text file called <b>music.txt</b>.  Each donated item's information is on one line (and there is only one donated item per line).  Each line will have the form:</p>

<p><i>accession number; title; media type code</i></p>

<p>that is, a line is formed by an accession number, a title, and a media type code, with these three fields separated by a semicolon (;) and a space.  (There is no ";" or space at the end of the line.)  Each line will end with the standard PC end-of-line mark &mdash; that is, a carriage return character followed by a line feed character &mdash; in Java terms, the characters <b>\r\n</b>.</p>

<p>The music file provided will have been run through a testing program to ensure that its format is correct and that its fields follow the specifications given for them.  You can be confident that the music file will be in the correct format to be fed into your program.  To do this testing, a MusicFile class was written, which you'll be able to use; it contains the methods needed to properly process the music file &mdash; to open it, read a line of information from it, and close it.</p>

<p>The index is to be placed into a text file called <b>index.txt</b>.  It will have the information about each musical item on one line, nicely formatted, and be in alphabetical order by title.  The details of writing to the index file and formatting the lines properly have been encapsulated in a class called IndexFile, which has already been written and is being made available to you.</p>

<p>You can find documentation on the MusicFile and IndexFile classes in the files <b>MusicFile.txt</b> and <b>IndexFile.txt</b>, which are part of the Eclipse project provided below.</p>

<p>The counts are to be displayed on the screen in a neat, easy-to-read arrangement, after the index file is constructed and stored.  Each count is labeled so the user knows the media to which the count refers.</p>

<p>As the program runs, occasionally print status messages to the user, so it will be evident that the program is still making progress, even if it has a lot of work to do.  (The real list of music will be very long and can take quite a while to process.)  Use messages such as "building the index and computing media counts," "now writing the index," "Done! The index is in the file index.txt," and so on.  Only write messages when your program may otherwise by churning away for some time with no output to the user, and when the program finishes, to tell the user the name of the index file.  For example, you won't need to say "printing counts" since the counts themselves would appear immediately after such a message.</p>

<p>The actual, complete list of donated music will be provided to you at a later date: the cataloging of the collection is ongoing.  So, you will have to test your program using a "fake" list.  We've provided one for you in a file called <b>music.txt</b> in the Eclipse project provided.  You should also test your program on other test lists that you put together, ones designed with the intention of trying to "break" your program.  (And if they do not break your code, then you have reasonable certainty that the indexing part of your program works correctly.)  Be sure to try music files that are empty; that have one, two, or three items; that place one item into every bucket; that add new items before or after all items in a bucket; and any and all cases that might uncover a potential mistake.</p>

<p>The program's major steps are straightforward:</p>

<ul>
  <li>Construct the music file, index file, and structure to sort the music items (a MusicList).</li>
  <li>Open the music file; for each line of the music file, read in its fields and make a MusicItem object out of them.</li>
  <li>Place that item into the internal MusicList structure; MusicList is cleverly structured so that when an item is added to it, that item is in the correct order with respect to the others.</li>
  <li>Also, as you read each item, examine its media type and update the appropriate count.</li>
  <li>Once all items are read, open the index file.  Then, for each item in the music list, write it into the index file.</li>
  <li>Don't forget to close the files once you've finished with them!</li>
  <li>Then, print out the media counts, and compute and print the count of all items.</li>
</ul>

<p>As usual, to help you get started, we've prepared a number of skeleton Java classes for you, along with additional documentation, which you can obtain at the following link:</p>

<ul>
  <li><a href="21Lab4.zip">Lab 4 Eclipse project</a></li>
</ul>

<p>A hint: You will probably find the String method <b>compareTo</b> quite useful.  <b>s.compareTo(t)</b>, with s and t being Strings, returns 0 if s and t have the same value, a number less than 0 if s comes before t alphabetically, or a number greater than 0 is s comes after t.  This method comes in handy when figuring out where to place a music item into the music list so that ordering by title is maintained.</p>

<p>An admonition: There are two methods in the ArrayList class called <b>add</b>.  <b>add(item)</b> adds an item to the end of an ArrayList.  <b>add(i, item)</b> adds an item at position <i>i</i> of an ArrayList, moving all items from <i>i</i> to the end of the list "over by one."  You will likely need to use both of these in your program; do not confuse them!</p>

</div>

<div class="section">

<hr />

<p class="title">About Lab Exam 4</p>

<p>Lab Exam 4 will be very similar, but perhaps not identical, to the program you have been asked to write for this exercise.  The lab exam will ask you to complete one or more of the following methods:</p>

<ul>
  <li>The Bucket constructor</li>
  <li>Bucket.addItem</li>
  <li>The MusicItem constructor</li>
  <li>The MusicList constructor</li>
  <li>MusicList.addItem</li>
  <li>MusicList.updateCounts</li>
  <li>The MusicManager constructor</li>
  <li>MusicManager.makeMusicIndex</li>
  <li>MusicManager.writeMusicIndex</li>
  <li>MusicManager.displayCounts</li>
</ul>

</div>

<div class="history">

<hr />

<ul class="nomarker">
  <li>Adapted by Alex Thornton to emphasize the use of Eclipse, Summer 2009.</li>
  <li>Originally written by Norm Jacobson, July 2004 - Septemer 2008.</li>
</ul>

</div>Mis_redirected¢DtypeEvalueõIhttp_code¢DtypeEvalueÈQdownload_complete¢DtypeEvalueõ