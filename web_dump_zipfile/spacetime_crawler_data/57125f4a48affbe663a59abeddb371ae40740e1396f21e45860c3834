¦Ifinal_url¢DtypeEvaluex?https://www.ics.uci.edu/~thornton/ics184/LabManual/Assignment4/Lhttp_headers¢DtypeEvalue‡¢Ak¢DtypeEvalueNContent-LengthAv¢DtypeEvalueE15088¢Ak¢DtypeEvalueMAccept-RangesAv¢DtypeEvalueEbytes¢Ak¢DtypeEvalueFServerAv¢DtypeEvalueX4Apache/2.4.6 (CentOS) OpenSSL/1.0.2k-fips SVN/1.7.14¢Ak¢DtypeEvalueMLast-ModifiedAv¢DtypeEvalueXSun, 13 Aug 2006 14:56:59 GMT¢Ak¢DtypeEvalueDETagAv¢DtypeEvalueT"3af0-41ae763aea4c0"¢Ak¢DtypeEvalueDDateAv¢DtypeEvalueXWed, 30 Jan 2019 20:08:43 GMT¢Ak¢DtypeEvalueLContent-TypeAv¢DtypeEvalueXtext/html; charset=UTF-8Kraw_content¢DtypeEvalueY:ð<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE html PUBLIC
 "-//W3C//DTD XHTML 1.1//EN"
 "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">

<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en">

<head>
<meta http-equiv="content-type" content="text/html; charset=iso-8859-1" />
<link rel="stylesheet" href="../../course2.css" type="text/css" />

<title>ICS 184 / EECS 116 Summer 2006, Assignment #4</title>
</head>
<body>

<div class="navbar">

<p>
ICS 184 / EECS 116 Summer 2006 |
<a href="../../index.html">News</a> |
<a href="../../CourseReference.html">Course Reference</a> |
<a href="../../Schedule.html">Schedule</a> |
<a href="../../LabManual">Lab Manual</a> |
<a href="../../LabManual/UsingNewsgroup.html">ics.184 newsgroup</a> |
<a href="http://www.ics.uci.edu/~thornton/">About Alex</a>
</p>

<hr />

</div>

<div class="header">

<p>ICS 184 / EECS 116 Summer 2006<br />
   Assignment #4</p>

</div>

<div class="section">

<p class="center"><b>Due date and time:</b> <i>Monday, August 21, 2:00pm (in person, at the beginning of lecture)</i></p>

<hr />

<p class="title">Introduction</p>

<p>In the last assignment, we began our exploration of designing databases, by considering how real-world data requirements are expressed as constraints on the tables and columns we'd worked with previously, as views that provide abstractions for complex queries and aid in access control, and as stored procedures and functions that allow a database to perform tasks beyond the scope of those permitted by single SQL statements.  In lecture, we also discussed triggers, as well, and how they fit into this framework of features in SQL that provide the ability to more thoroughly implement data requirements &mdash; and even some business logic &mdash; within a database.</p>

<p>However, database design is a much broader topic than this.  How do you discover the data requirements of the underlying enterprise in the first place?  Based on these requirements, how do you decide what tables should exist and what columns they should have?  How can you understand the relationships between data stored in different tables?  What other software systems need to be built around the database?  These issues are central to the critical first phases of a database design, where the goal, in general, is to understand the requirements of the entire system and design a database that, when implemented, will adequately support that system.</p>

<p>This assignment explores the conceptual design phase, which you might refer to as <i>data modeling</i>.  In this phase, the written requirements already exist, and a conceptual design of a database is built to meet those requirements.  (Other courses, such as software engineering courses, or even courses explicitly about requirements engineering, emphasize the phase of the design during which the requirements are gathered and articulated in writing.  To focus on the database-related aspects of such a project in this course, we'll skip the requirements gathering.)  In our case, we'll use the <i>Entity-Relationship model</i>, as I'll ask you to draw an E-R diagram to represent your design.</p>

<p>The next assignment will focus on taking your conceptual design from this assignment and implementing it as Data Definition Language (DDL) statements in SQL.  Therefore, it's important that you make a complete attempt at this assignment.  (I should point out, though, that the next assignment will not be graded based on the correctness of your solution to this assignment; the next assignment will offer you the opportunity to fine-tune your design, if necessary.)</p>

<p>Design is, by definition, a somewhat open-ended task; lots of designs could potentially be considered "correct."  You'll be asked to write a justification of the decisions you make, to aid us in understanding why you made the choices that you did.</p>

</div>

<div class="section">

<hr />

<p class="title">The requirements</p>

<p>In this assignment, as well as the next assignment, we'll design the database that underlies an application that handles reservations and billing for a hypothetical chain of hotels.  We'll aim to meet the following set of requirements.  Note that each of these requirements is not written with the intention of necessarily implying a particular design decision.  Don't assume, for example, that each bullet point indicates, say, an entity set or a relationship set; each bullet point instead indicates a set of related requirements, though each will likely be handled differently in your design.</p>

<ul>
  <li>There are many hotels in the chain.  Each hotel has a name, a street address (which is made up of a street number, street name, city, state, and postal code), a home page URL (Web address), and a primary phone number.</li>
  <li>Each hotel consists of a set of rooms arranged on various floors.  Each room has an identifier which is unique within that hotel.  Most of the time, rooms are numbered (e.g. 690), but they may be given a name (e.g. Presidential Suite) instead, so long as the name or number is unique within the hotel.  Floors are numbered, and it's necessary, for each room, to know what floor it's on, since some customers prefer rooms on lower floors or higher floors.  For simplicity, assume that each room is on only one floor.  (Some real hotels have suites that span multiple floors.)</li>
  <li>For each room, it's also necessary to keep track of how many beds it has, as well as whether smoking is allowed in the room.  This information is used to help match guests to rooms with desired characteristics.</li>
  <li>When a guest plans to stay at a hotel in the future, he or she makes a room reservation at the desired hotel.  Each reservation indicates information about the guest, the desired arrival and departure dates, as well as preferences that aid in selecting the right kind of room for that guest: whether the room should be smoking or non-smoking, whether the room should have one beds or two, and whether the room should be on a high floor or a low floor.  These room preferences are optional, and are not included with every reservation; some guests are willing to take any available room, while some only care about some preferences but not others.</li>
  <li>Also required with each reservation is information about a credit card that's used to secure the reservation; credit cards are indicated by a credit card number (which is a sequence of up to 16 digits) and an expiration date (a month and a year, such as "January 2007").</li>
  <li>At any given time, a guest may have multiple reservations; reservation information is removed from the database after the guest's reservation is used to put them into an actual room, or when the guest cancels the reservation prematurely.</li>
  <li>The database tracks historical information about every guest's stay in any room in any hotel.  At minimum, it's necessary to know what day the stay began, what day it ended, what room it was, what hotel it was, and who the guest was.</li>
  <li>Information about each guest of each hotel is tracked historically.  For each guest who has ever reserved or stayed in a room, the database must store the guest's first, middle, and last names, street address, email address, and three phone numbers (home, work, cell).  Email addresses and the phone numbers are optional, while the other information is required.</li>
  <li>An invoice is generated during a guest's stay at the hotel, detailing the individual charges accrued by the guest.  These charges include not only the regular room rate, but also applicable taxes, as well as charges at the hotel's restaurants, bars, spas, shops, and so on.  An invoice is displayed &mdash; either in printed or Web-based form &mdash; as a sequence of line items, with each line item consisting of a description and an amount, such as "Hotel Cafe &mdash; $29.75".  Note that the database does not keep track of, say, the costs of items on the restaurant's menu or the cost of renting each room at various times throughout the year; it is assumed that another software system provides this information to our database, since our system only handles reservations and billing.</li>
  <li>When a guest pays his or her bill &mdash; or a portion of his or her bill &mdash; a line item is added to the invoice that indicates how much was paid, and in what form the payment was made (e.g. "Visa &mdash; $-500.00", in the case of a $500 payment made using a Visa credit card).</li>
  <li>At the bottom of each invoice is a total balance, which is the sum of the amounts in each of the line items, including both charges and payments.  An invoice is considered paid if the amount is $0.00.</li>
</ul>

<p>As with any set of software requirements, there may be additional information that will help you make design decisions as you work through your design.  Please ask these kinds of questions on the <a href="../UsingNewsgroup.html">course newsgroup</a>, so that, when I answer them, the answers will be available to everyone.  (In the event that I receive email with a question whose answer will benefit everyone, I'll also post the question and my answer to it on the newsgroup, with personally identifying information removed.)  I'll be glad to take other questions via email, as always.</p>

</div>

<div class="section">

<hr />

<p class="title">The assignment</p>

<p>I'm asking you to do two things in this assignment.  First, I'd like you to build a conceptual design of a database that meets the stated requirements, expressed as an E-R diagram in the format shown in lecture and in your textbook.  Second, I'm requiring you to write a short document that briefly explains the decisions you made along the way.  In that document, you should give a brief explanation about why you chose each entity set, each relationship set, and each multivalued, composite, or derived attribute.  Note that I'm not asking you to write much &mdash; it shouldn't require much more than a page &mdash; but it should be clear what decisions you made and why you made them.  We won't be grading you on the quality of your writing, per se, but it should be cogent enough for us to understand.</p>

<div class="section">

<hr />

<p class="title">A few words about design</p>

<p class="subtitle">The distinction between conceptual design and implementation</p>

<p>It's important to realize that there is a distinction between a conceptual design and the implementation of that design as relational database tables.  In particular, bear in mind that not all of the information present in the requirements above is relevant at this stage; the emphasis here is on defining what information needs to be stored, and how that information is interrelated.  For example, it is stated above that credit card numbers are up to 16 digits long.  This information does not appear anywhere in an E-R diagram, so it would not be relevant in this assignment; however, when you create a column in a table that stores a credit card number in the next assignment, you would then want to be sure you selected a data type that allowed a 16-digit number to be stored (and would have to decide between, say, a numeric type and a string type, considering the tradeoffs of making each choice).</p>

<p class="subtitle">There is no "right" answer here: the need for justification</p>

<p>As you work through your conceptual design, you will need to make a number of decisions.  Some of them will be clear-cut; for example, there will certainly need to be an entity set called <i>hotel</i>.  However, other decisions will not be so clear-cut.  Are credit cards entities in their own right, or are they attributes in some other entity set?  Either decision is justifiable, but in either case, you're trading off one advantage for another.  I'm as interested in your exploration of the "why" here as anything; many decisions are "correct" here, but only if you understand the tradeoffs that you're making along the way.  This is why I'm asking you to justify the decisions you've made in your design; I want to be sure that we're clear about your thinking.</p>

</div>

<div class="section">

<hr />

<p class="title">Suggestions about drawing an E-R diagram</p>

<p>Because I'm considering it important that you use the same E-R notation that we discussed in lecture (and is also shown in the textbook), but because E-R notation is not standardized, it's difficult for us to settle on one tool that will suit everyone's needs.  For this reason, I'm giving you the option of drawing your diagram on paper, with the strong caveat that we have to be able to read and understand it, so you'll need to draw it carefully.  Alternatively, if you'd like to use some kind of tool, you're welcome to do it, though it will be your responsibility to learn how to use one that's appropriate to the task.  (One possibility is Microsoft Visio, which you can obtain free of charge through the Microsoft Developer Network Academic Alliance program to which the Bren School of ICS subscribes.  See a Lab Attendant in CS 364 for more details.  Visio, by default, does not support the E-R notation we've learned in lecture, but you may well be able to figure out other ways to draw the necessary diagrams in Visio.)</p>

<p>Even if you use a tool to draw your diagram, you will be required to print out a copy of it and turn it in at the beginning of lecture on Tuesday, May 30.  <i>We will not be accepting electronic submissions of this assignment.</i></p>

</div>

<div class="section">

<hr />

<p class="title">Deliverables</p>

<p>Because of the flexible arrangement that allows you to draw your diagrams by hand, or to use any tool you wish, <i>we will only be accepting hand-submitted copies of this assignment</i>, including both your diagram and your document explaning the design decisions you made.  Please type your document for the sake of legibility (and, if you're like me, to save time).  You are required to submit the assignment at the beginning of lecture on Wednesday, August 16.  <i>Do not submit your assignment at the ICS Distribution Center or via Checkmate.</i></p>

<p>Please be sure to include a cover page that prominently lists the following information: your name, your UCI student ID# (or UCI Access ID#), "ICS 184 / EECS 116 Summer 2006 Assignment #4", and your UCI email address (i.e., your @uci.edu address).</p>

<p>Be aware, also, that the next assignment will rely on your solution to this one, so it will be important for you to keep a copy of your own work, so that you can use it as you work on the next assignment.  We will not grade the next assignment in terms of the correctness of this one, so long as your solution to this assignment represents a complete attempt to solve this problem (i.e., all of the information is included somewhere in your design).</p>

</div>

<div class="history">

<hr />

<ul class="nomarker">
  <li>A few tweaks made by Alex Thornton, Spring 2006.</li>
  <li>Originally written by Alex Thornton, Winter 2006.</li>
</ul>

</div>

</body>
</html>
Mis_redirected¢DtypeEvalueõIhttp_code¢DtypeEvalueÈQdownload_complete¢DtypeEvalueõ