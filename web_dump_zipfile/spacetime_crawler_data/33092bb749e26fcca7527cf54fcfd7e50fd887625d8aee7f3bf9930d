¦Ifinal_url¡DtypeLhttp_headers¢DtypeEvalue‡¢Ak¢DtypeEvalueNContent-LengthAv¢DtypeEvalueD1056¢Ak¢DtypeEvalueMAccept-RangesAv¢DtypeEvalueEbytes¢Ak¢DtypeEvalueFServerAv¢DtypeEvalueX„Apache/2.4.6 (CentOS) OpenSSL/1.0.2k-fips SVN/1.7.14 mod_wsgi/3.4 Python/2.7.5 Phusion_Passenger/4.0.53 mod_perl/2.0.10 Perl/v5.16.3¢Ak¢DtypeEvalueMLast-ModifiedAv¢DtypeEvalueXWed, 17 Apr 2013 01:53:37 GMT¢Ak¢DtypeEvalueDETagAv¢DtypeEvalueS"420-4da84c118aa40"¢Ak¢DtypeEvalueDDateAv¢DtypeEvalueXSat, 09 Feb 2019 17:02:35 GMT¢Ak¢DtypeEvalueLContent-TypeAv¢DtypeEvalueXtext/plain; charset=UTF-8Kraw_content¢DtypeEvalueY /*
 $Id: storage.cc 5833 2010-10-26 00:54:31Z abehm $
 
 Copyright (C) 2010 by The Regents of the University of California
 
 Redistribution of this file is permitted under
 the terms of the BSD license.
 
 Date: 11/01/2009
 Author: Shengyue Ji <shengyuj (at) ics.uci.edu>
*/

#include <stdlib.h>
#include "storage.h"

Storage::Storage()
{
    rootId = 0;
}

Storage::Storage(const char *file)
{
    rootId = 0;
}

Storage::~Storage()
{
}

Buffer *Storage::alloc(size_t size)
{
    Buffer *buf = (Buffer *)malloc(size);
    buf->id = (uintptr_t)buf;
    buf->size = size;
    return buf;
}

void Storage::dealloc(size_t id)
{
    ::free((void *)id);
}

Buffer *Storage::read(uintptr_t id)
{
    return (Buffer *)id;
}

char *Storage::readPart(uintptr_t id, unsigned offset, unsigned size)
{
    return (char *)(id + offset);
}

void Storage::write(const Buffer *buf)
{
    // do nothing
}

void Storage::free(Buffer *buf)
{
    // do nothing
}

unsigned Storage::getRoot()
{
    return rootId;
}

void Storage::setRoot(uintptr_t id)
{
    rootId = id;
}


Mis_redirected¢DtypeEvalueôIhttp_code¢DtypeEvalueÈQdownload_complete¢DtypeEvalueõ