¦Ifinal_url¡DtypeLhttp_headers¢DtypeEvalueˆ¢Ak¢DtypeEvalueNContent-LengthAv¢DtypeEvalueD9813¢Ak¢DtypeEvalueSContent-DispositionAv¢DtypeEvalueX4attachment; filename=cs122b-2019-winter-project2.txt¢Ak¢DtypeEvalueJSet-CookieAv¢DtypeEvalueXitrac_session=18ad6d68542849f45cc78add; expires=Thu, 09 May 2019 00:24:21 GMT; httponly; Path=/wiki/public¢Ak¢DtypeEvalueJKeep-AliveAv¢DtypeEvalueRtimeout=5, max=100¢Ak¢DtypeEvalueFServerAv¢DtypeEvalueX„Apache/2.4.6 (CentOS) OpenSSL/1.0.2k-fips SVN/1.7.14 mod_wsgi/3.4 Python/2.7.5 Phusion_Passenger/4.0.53 mod_perl/2.0.10 Perl/v5.16.3¢Ak¢DtypeEvalueJConnectionAv¢DtypeEvalueJKeep-Alive¢Ak¢DtypeEvalueDDateAv¢DtypeEvalueXFri, 08 Feb 2019 00:24:21 GMT¢Ak¢DtypeEvalueLContent-TypeAv¢DtypeEvalueXtext/plain;charset=utf-8Kraw_content¢DtypeEvalueY&U= Project 2: Starting Fabflix Business =
'''Due: Week 5 Monday, Feb. 4 11:45 pm. Due on Github.'''

'''Project Description'''

 * [#Overview Project 2 Overview]
 * [#StepByStep Step by Step]
 * [#Examples Examples]
 * [#DeploymentOnAWS Deployment on AWS]
 * [#Grading Demonstration and Grading Criteria]

----
[[Span(id=Overview)]]

== Project 2 Overview ==
In this project, you will start the Fabflix business! In particular, you will provide Web-based interfaces to allow customers to browse/search for movie information, add interesting movies to their shopping cart, and check out. The following figure shows the flow of the interfaces you need to implement.

[[Image(wiki:cs122b-2019-winter-project2:design-diagram.jpg)]]

The following are details about the interfaces.

 * The "Login" page asks a customer to provide an email and a  password in order to log into the system. '''Use HTTP POST instead of HTTP  GET'''[[BR]] so that the username and password are not displayed on the address bar.  Note that the email and password are attributes of the customer table.  You should use the customer table for authentication, '''NOT''' the database login/password (such as "testuser" and "testpass").
 * On the "Main" page, the customer can choose either to "Search" for movies or "Browse" for movies.
 * On the "Searching" page, the customer can search for movies by any of the following attributes or their combination (logical "AND"  operation):
   * title;
   * year;
   * director;
   * star's name. You need to return the stars whose name contains the name user types in. For example, the name "Peter Anteater" should appear when searching "Peter" or "Anteater".

  Check http://www.imdb.com/search/title   to see an example of the interface. Of course, your interface can have a  different style.

 * The "Movie list" page shows the results of the search, and the results are formatted as a table with at least the following columns:
   * id;
   * title (hyperlinked to the corresponding single movie page implemented in [https://grape.ics.uci.edu/wiki/public/wiki/cs122b-2019-winter-project1#Tasks67:ImplementSingleMovieandSingleStarpages Project 1]);
   * year;
   * director;
   * list of genres;
   * list of stars (each hyperlinked to the corresponding single star page implemented in [https://grape.ics.uci.edu/wiki/public/wiki/cs122b-2019-winter-project1#Tasks67:ImplementSingleMovieandSingleStarpages Project 1]);
   * rating;

The following requirements should be met.

 * ''Substring matching'': The user does not have to provide an exact value for an attribute, and the system should support "substring matching". For example, a query asking for "term" for the "title" attribute should return movies such as "Terminal" and "Terminator." You can use the "LIKE" and "ILIKE" SQL operators for pattern matching in any way you wish.  For example:

  '''                     SELECT "column_name"'''                     [[BR]]                     '''                     FROM "table_name"'''                     [[BR]]                     '''                     WHERE "column_name" LIKE pattern'''                     [[BR]]

  '''                    pattern'''                     often consists of wildcards.[[BR]]               '''               Note: '''               You are required to write an explanation of how/where you use the LIKE predicate in your codebase. You should put this in a text file (plain text or markdown) in your Github repository, for example, "like-predicate.txt", or "like-predicate.md"

 * Here are some examples:
   * 'A_Z':  All string that starts with 'A', another character, and ends with 'Z'.  For example, 'ABZ' and 'A2Z' would both satisfy the condition, while  'AKKZ' would not (because there are two characters between A and Z  instead of one).
   * 'ABC%': All strings that start with 'ABC'. For example,  'ABCD' and 'ABCABC' would both satisfy the condition.
   * '%XYZ': All strings that end with 'XYZ'. For example, 'WXYZ'  and 'ZZXYZ' would both satisfy the condition.
   * '%AN%':  All strings that contain the pattern 'AN' anywhere. For example, 'LOS ANGELES' and 'SAN FRANCISCO' would both satisfy the condition.

 * ''Sorting'': A user should be able to click on the header of title or rating so that the results will be sorted (ascending or descending) by the corresponding attribute.

 * ''!Previous/Next'': Since there could be many movies on the list, each page can only display a certain number (''N'') of movies, and the interface has "Prev"/"Next" buttons to allow the user to go through all the movies.   Your interface should allow the customer to change the number of listings ''N'' per page. You can implement a drop-down menu to choose "N" from a list of predefined values such as 10, 25, 50, 100, etc.

 * Using the "Browsing" page, the user can browse movies by either their genres and or title. The "Browsing by movie genre" page has all the (hyperlinked) genres. The user can click on a genre to see all the movies of this genre. The "Browsing by movie title" page categorizes the movies based on their titles. The page organizes all the titles based on their first character in the title in alphabetical order.  (Notice that the first character could be a digit such as "2" in "2012".)  When the user clicks on a letter, he can see the list of all the movies with this first letter in their title.

 * ''Shopping Cart'': For all the pages that display movie information, each movie should have an associated "Add to Shopping Cart" interface. The interface shows the current number of copies for this item (during this login period), and allow the user to add more copies (or delete all copies) of this item by modifying the quantity. If the user clicks the button, the corresponding number of copies of movies should be set in his shopping cart (or delete the item if the quantity becomes 0).  The interface should allow the user to see all the items (with their quantities) in his/her current shopping cart (during this login).

  All pages after login should have a "Checkout" button. If the user clicks this button, there is a "Shopping cart" page that displays the movies in the shopping cart.  If the user chooses to proceed to check out, the next page "Ask for Customer Information" should ask the user to provide a credit number, expiration date, and first name and last name of the credit card holder.

 * ''' '''''Checkout''''':'''  The transaction succeeds only if the user can provide the first name, the last name, and a credit card with an expiration date, which match a record '''in the credit cards table (not those in the customers table)'''.  If succeeded, the transaction should be recorded in the system (in the "sales" table) and a confirmation page should be displayed.   [[BR]]

 * '''Performance requirements''': You can decide whether you want to do caching on the Web server for earlier query results.

'''You must NOT:'''

 * Realize any functionality in the web app using frameworks or scaffolding tools, such as !DataTables.

 * Realize any functionality in the web app by hard coding.

 * Store data directly in the frontend instead of the database.

We are not specifying all the details of the interfaces. You are encouraged to use your imagination to enhance the functionalities. You can implement the above using '''JSP and/or Java servlets''' at the server side. You can use any type of client-side technologies to enhance the functionality of your website (e.g., Javascript, style sheets, etc). Regardless of the client-side technology, you will most likely make extensive use of HTML.

----
[[Span(id=StepByStep)]]

== Step by Step ==
Here are the recommended steps you can follow to accomplish for this project:

 1. Go through all the examples we provided.
 1. Implement the "Login" Page;
 1. Implement the "Search" Page;
 1. Implement the "Movie list" page, including the "Sorting" and "!Prev/Next" features;
 1. Implement the "Browsing by movie genre" page;
 1. Implement the "Browsing by movie title" page;
 1. Add a "Add to Shopping Cart" button to each movie on all pages;
 1. Add a "Checkout" button to all pages;
 1. Implement the page to do checkout.[[BR]]

----
[[Span(id=Examples)]]

== Examples ==

'''Login & Shopping Cart Example'''

[https://github.com/UCI-Chenli-teaching/2019w-project2-login-cart-example project2-login-cart-example]
----
[[Span(id=DeploymentOnAWS)]]

== Deployment On AWS and Submissions ==
Use Github to manage your project 2 code and deploy on AWS, similar to what you have done in project 1. 

Check [https://grape.ics.uci.edu/wiki/public/wiki/cs122b-2019-winter-project1#ProjectSubmission Project1 Submission] before you submit Project 2 on Github.

----
[[Span(id=Grading)]]

== Demonstration and Grading Criteria ==

Refer to [https://docs.google.com/spreadsheets/d/1e3sr9DYy3OXAxaD5s0dYzAJ1HbjuuR7aJvyP2JT3Ix4/edit#gid=940689423 Project2 Grading Rubric] for detailed grading criteria.

----
== If you chose a different domain ==
You may design your own flow of interfaces that is suitable for your application. However, your application must cover the functionalities mentioned above, including login, conditional search, browsing, selection, sorting, navigation between pages, and error handling. If your domain doesn't require a shopping cart and checkout, come up with two features that are comparable.  You are required to draw your application workflow (similar to the Fabflix diagram above) and present it during the demo session. It is your responsibility to make sure that your design and implementation meet all the requirements. If you are not sure about it, make sure to post it on Piazza or come to office hours to discuss.Mis_redirected¢DtypeEvalueôIhttp_code¢DtypeEvalueÈQdownload_complete¢DtypeEvalueõ