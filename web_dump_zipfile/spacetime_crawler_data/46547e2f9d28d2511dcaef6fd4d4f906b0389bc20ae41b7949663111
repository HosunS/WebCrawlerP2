¦Ifinal_url¡DtypeLhttp_headers¢DtypeEvalue‡¢Ak¢DtypeEvalueNContent-LengthAv¢DtypeEvalueD1794¢Ak¢DtypeEvalueMAccept-RangesAv¢DtypeEvalueEbytes¢Ak¢DtypeEvalueFServerAv¢DtypeEvalueX4Apache/2.4.6 (CentOS) OpenSSL/1.0.2k-fips SVN/1.7.14¢Ak¢DtypeEvalueMLast-ModifiedAv¢DtypeEvalueXWed, 06 Jul 2005 17:27:41 GMT¢Ak¢DtypeEvalueDETagAv¢DtypeEvalueS"702-3fb3e84947d40"¢Ak¢DtypeEvalueDDateAv¢DtypeEvalueXThu, 31 Jan 2019 00:45:41 GMT¢Ak¢DtypeEvalueLContent-TypeAv¢DtypeEvalueXtext/html; charset=UTF-8Kraw_content¢DtypeEvalueY<HTML><HEAD>
<TITLE> Big arrays in C procedures
</TITLE>
</HEAD><BODY>

<H2> Big arrays in C procedures </H2>

There is a not-very-huge number N such that,
if a procedure declares a local integer array larger than N,
<!-- 360^2 ?? -->
you get a segmentation fault when the procedure is called.&nbsp;
The same holds for multiple arrays
whose total space is equivalent.&nbsp;
Apparently whatever C
uses for automatic variables cannot handle this
magnitude of array on the stack of procedure calls.&nbsp;
I would suggest that you use one of the following methods:
<P>
<OL>
<LI> Declare the large arrays as a local variable in one file,
     and as a global variable in all procedures.&nbsp;
     This works, but I can see no advantage to it relative to
     the following two methods.
<LI> Declare the arrays in the procedures as static.&nbsp;
     This retains locality of variables, and is quite simple.&nbsp;
     However, the (excessive) storage remains in existence even when
     the procedures that use it are not executing.
<LI> Only declare <tt>(int **)</tt> variables,
     and use calloc to get the required space when needed,
     returning it when done.&nbsp;  This retains locality of
     variables without wasting a large chunk of space when the
     procedures that use the big arrays are not in use.&nbsp;
     There is an added bonus in that you can save much space
     for each array by building triangular arrays,
     which is not much harder than building square ones when using
     C's pointer-vector system.
</OL>
<P>

<HR>
<ADDRESS>
<A HREF="http://www.ics.uci.edu/~dan">
Dan Hirschberg </A> <BR>
Computer Science Department<BR>
University of California, Irvine, CA 92697-3435<BR>
</ADDRESS>
<tt>dan (at) ics.uci.edu</tt><br>
Last modified: Mar 22, 1999
</BODY></HTML>
Mis_redirected¢DtypeEvalueôIhttp_code¢DtypeEvalueÈQdownload_complete¢DtypeEvalueõ