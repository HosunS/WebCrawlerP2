¦Ifinal_url¡DtypeLhttp_headers¢DtypeEvalue†¢Ak¢DtypeEvalueNContent-LengthAv¢DtypeEvalueD1821¢Ak¢DtypeEvalueMAccept-RangesAv¢DtypeEvalueEbytes¢Ak¢DtypeEvalueFServerAv¢DtypeEvalueX4Apache/2.4.6 (CentOS) OpenSSL/1.0.2k-fips SVN/1.7.14¢Ak¢DtypeEvalueMLast-ModifiedAv¢DtypeEvalueXThu, 22 Feb 2018 07:03:28 GMT¢Ak¢DtypeEvalueDETagAv¢DtypeEvalueS"71d-565c7a40c3151"¢Ak¢DtypeEvalueDDateAv¢DtypeEvalueXFri, 01 Feb 2019 06:48:15 GMTKraw_content¢DtypeEvalueY#define JOIN_(a,b) a ## b
#define JOIN(a,b) JOIN_(a,b)

#undef SAMPLE
#define SAMPLE JOIN(sample_, SFX)

VL_INLINE void
SAMPLE (T* histPt,
        T const* intHistPt,
        vl_size width, vl_size height, vl_size numLabels,
        vl_uint32 const* boxesPt,
        vl_size numBoxes)
{
  vl_uindex bi, k ;
  for (bi = 0 ; bi < numBoxes ; ++ bi) {
    vl_uint32 x1 = *boxesPt++ ;
    vl_uint32 y1 = *boxesPt++ ;
    vl_uint32 x2 = *boxesPt++ ;
    vl_uint32 y2 = *boxesPt++ ;
    vl_uint32 stride = width ;
    vl_uint32 labelStride = width * height ;
    T const* iter = 0 ;

    /* empty box case */
    if (x1 > x2 || y1 > y2) {
      for (k = 0 ; k < numLabels ; ++k) {
        histPt [k] = 0 ;
      }
      histPt += numLabels ;
      continue ;
    }

    if (x1 < 1  || y1 < 1) {
      vlmxError(vlmxErrInconsistentData,
               "Box %d is out of bounds.", bi + 1) ;
    }
    if (x2 > width || y2 > height) {
      vlmxError(vlmxErrInconsistentData,
               "Box %d is out of bounds.", bi + 1) ;
    }

    -- x1 ;
    -- x2 ;
    -- y1 ;
    -- y2 ;

    iter = intHistPt + x2 + y2 * stride ;
    for (k = 0 ; k < numLabels ; ++k) {
      histPt [k] = *iter ;
      iter += labelStride ;
    }

    if (x1 > 0) {
      iter = intHistPt + (x1 - 1) + y2 * stride ;
      for (k = 0 ; k < numLabels ; ++k) {
        histPt [k] -= *iter ;
        iter += labelStride ;
      }
    }

    if (x1 > 0 && y1 > 0) {
      iter = intHistPt + (x1 - 1) + (y1 - 1) * stride ;
      for (k = 0 ; k < numLabels ; ++k) {
        histPt [k] += *iter ;
        iter += labelStride ;
      }
    }

    if (y1 > 0) {
      iter = intHistPt + x2 + (y1 - 1) * stride ;
      for (k = 0 ; k < numLabels ; ++k) {
        histPt [k] -= *iter ;
        iter += labelStride ;
      }
    }
    histPt += numLabels ;
  }
}
Mis_redirected¢DtypeEvalueôIhttp_code¢DtypeEvalueÈQdownload_complete¢DtypeEvalueõ