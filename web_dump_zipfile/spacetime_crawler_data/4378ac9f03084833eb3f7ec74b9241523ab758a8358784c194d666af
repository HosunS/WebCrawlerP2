¦Ifinal_url¡DtypeLhttp_headers¢DtypeEvalue‰¢Ak¢DtypeEvalueNContent-LengthAv¢DtypeEvalueE22679¢Ak¢DtypeEvalueJSet-CookieAv¢DtypeEvalueX°trac_form_token=e24270e0f26e53eb5d4c8d1f; httponly; Path=/wiki/public, trac_session=dbbddb0875dde141469f9fe5; expires=Thu, 09 May 2019 11:42:57 GMT; httponly; Path=/wiki/public¢Ak¢DtypeEvalueGExpiresAv¢DtypeEvalueXFri, 01 Jan 1999 00:00:00 GMT¢Ak¢DtypeEvalueJKeep-AliveAv¢DtypeEvalueRtimeout=5, max=100¢Ak¢DtypeEvalueFServerAv¢DtypeEvalueX„Apache/2.4.6 (CentOS) OpenSSL/1.0.2k-fips SVN/1.7.14 mod_wsgi/3.4 Python/2.7.5 Phusion_Passenger/4.0.53 mod_perl/2.0.10 Perl/v5.16.3¢Ak¢DtypeEvalueJConnectionAv¢DtypeEvalueJKeep-Alive¢Ak¢DtypeEvalueMCache-ControlAv¢DtypeEvalueOmust-revalidate¢Ak¢DtypeEvalueDDateAv¢DtypeEvalueXFri, 08 Feb 2019 11:42:57 GMT¢Ak¢DtypeEvalueLContent-TypeAv¢DtypeEvalueWtext/html;charset=utf-8Kraw_content¢DtypeEvalueYX—<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">

    <html xmlns="http://www.w3.org/1999/xhtml">
  
  


  <head>
    <title>
      cs122b-2018-winter-project4 (diff) â€“ Public
    </title>
      <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
      <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <!--[if IE]><script type="text/javascript">
      if (/^#__msie303:/.test(window.location.hash))
        window.location.replace(window.location.hash.replace(/^#__msie303:/, '#'));
    </script><![endif]-->
        <link rel="search" href="/wiki/public/search" />
        <link rel="help" href="/wiki/public/wiki/TracGuide" />
        <link rel="up" href="/wiki/public/wiki/cs122b-2018-winter-project4?action=history" title="Page history" />
        <link rel="next" href="/wiki/public/wiki/cs122b-2018-winter-project4?action=diff&amp;version=3" title="Version 3" />
        <link rel="start" href="/wiki/public/wiki" />
        <link rel="stylesheet" href="/wiki/public/chrome/common/css/trac.css" type="text/css" /><link rel="stylesheet" href="/wiki/public/chrome/common/css/wiki.css" type="text/css" /><link rel="stylesheet" href="/wiki/public/chrome/common/css/diff.css" type="text/css" /><link rel="stylesheet" href="/wiki/public/chrome/tracwysiwyg/wysiwyg.css" type="text/css" />
        <link rel="tracwysiwyg.stylesheet" href="/wiki/public/chrome/common/css/trac.css" /><link rel="tracwysiwyg.stylesheet" href="/wiki/public/chrome/tracwysiwyg/editor.css" />
        <link rel="tracwysiwyg.base" href="/wiki/public" />
        <link rel="prev" href="/wiki/public/wiki/cs122b-2018-winter-project4?action=diff&amp;version=1" title="Version 1" />
        <link rel="shortcut icon" href="/wiki/public/chrome/site/favicon.ico" type="image/x-icon" />
        <link rel="icon" href="/wiki/public/chrome/site/favicon.ico" type="image/x-icon" />
    <style id="trac-noscript" type="text/css">.trac-noscript { display: none !important }</style>
    <script type="text/javascript">
      var _tracwysiwyg={};
    </script>
      <script type="text/javascript" charset="utf-8" src="/wiki/public/chrome/common/js/jquery.js"></script>
      <script type="text/javascript" charset="utf-8" src="/wiki/public/chrome/common/js/babel.js"></script>
      <script type="text/javascript" charset="utf-8" src="/wiki/public/chrome/common/js/trac.js"></script>
      <script type="text/javascript" charset="utf-8" src="/wiki/public/chrome/common/js/search.js"></script>
      <script type="text/javascript" charset="utf-8" src="/wiki/public/chrome/common/js/diff.js"></script>
      <script type="text/javascript" charset="utf-8" src="/wiki/public/chrome/tracwysiwyg/wysiwyg.js"></script>
    <script type="text/javascript">
      jQuery("#trac-noscript").remove();
      jQuery(document).ready(function($) {
        $(".trac-autofocus").focus();
        $(".trac-target-new").attr("target", "_blank");
        setTimeout(function() { $(".trac-scroll").scrollToTop() }, 1);
        $(".trac-disable-on-submit").disableOnSubmit();
      });
    </script>
    <link rel="stylesheet" type="text/css" href="/wiki/public/chrome/common/css/diff.css" />
    <meta name="ROBOTS" content="NOINDEX, NOFOLLOW" />
  </head>
  <body>
    <div id="banner">
      <div id="header">
        <a id="logo" href="http://www.ics.uci.edu/"><img src="/wiki/public/chrome/site/ics.jpg" alt="ICS Logo" height="67" width="128" /></a>
      </div>
      <form id="search" action="/wiki/public/search" method="get">
      </form>
      <div id="metanav" class="nav">
    <ul>
      <li class="first"><a href="/wiki/public/login">Login</a></li><li><a href="/wiki/public/prefs">Preferences</a></li><li class="last"><a href="/wiki/public/about">About Trac</a></li>
    </ul>
  </div>
    </div>
    <div id="mainnav" class="nav">
  </div>
    <div id="main">
      <div id="ctxtnav" class="nav">
        <h2>Context Navigation</h2>
        <ul>
          <li class="first"><span>&larr; <a class="prev" href="/wiki/public/wiki/cs122b-2018-winter-project4?action=diff&amp;version=1" title="Version 1">Previous Change</a></span></li><li><a href="/wiki/public/wiki/cs122b-2018-winter-project4?action=history" title="Page history">Wiki History</a></li><li class="last"><span><a class="next" href="/wiki/public/wiki/cs122b-2018-winter-project4?action=diff&amp;version=3" title="Version 3">Next Change</a> &rarr;</span></li>
        </ul>
        <hr />
      </div>
    <div id="content" class="wiki">
      <h1>
        Changes between
          <a href="/wiki/public/wiki/cs122b-2018-winter-project4?version=1">Version 1</a> and
          <a href="/wiki/public/wiki/cs122b-2018-winter-project4?version=2">Version 2</a> of
          <a href="/wiki/public/wiki/cs122b-2018-winter-project4">cs122b-2018-winter-project4</a>
      </h1>
      <form method="post" id="prefs" action="/wiki/public/wiki/cs122b-2018-winter-project4?version=2"><div><input type="hidden" name="__FORM_TOKEN" value="e24270e0f26e53eb5d4c8d1f" /></div>
        <div>
          <input type="hidden" name="action" value="diff" />
          <input type="hidden" name="version" value="2" />
          <input type="hidden" name="old_version" value="1" />
          
  <label for="style">View differences</label>
  <select id="style" name="style">
    <option selected="selected" value="inline">inline</option>
    <option value="sidebyside">side by side</option>
  </select>
  <div class="field">
    <label><input type="radio" name="contextall" value="0" checked="checked" />
             Show</label>
      <label><input type="text" name="contextlines" id="contextlines" size="2" maxlength="3" value="2" />
             lines around each change</label><br />
    <label><input type="radio" name="contextall" value="1" />
           Show the changes in full context</label>
  </div>
  <fieldset id="ignore">
    <legend>Ignore:</legend>
    <div class="field">
      <input type="checkbox" id="ignoreblanklines" name="ignoreblanklines" />
      <label for="ignoreblanklines">Blank lines</label>
    </div>
    <div class="field">
      <input type="checkbox" id="ignorecase" name="ignorecase" />
      <label for="ignorecase">Case changes</label>
    </div>
    <div class="field">
      <input type="checkbox" id="ignorewhitespace" name="ignorewhitespace" />
      <label for="ignorewhitespace">White space changes</label>
    </div>
  </fieldset>
  <div class="buttons">
    <input type="submit" name="update" value="Update" />
  </div>

        </div>
      </form>
      <dl id="overview">
        <dt class="property time">Timestamp:</dt>
        <dd class="time">
            Feb 22, 2018 5:40:12 PM (<a class="timeline" href="/wiki/public/timeline?from=2018-02-22T17%3A40%3A12-08%3A00&amp;precision=second" title="See timeline at Feb 22, 2018 5:40:12 PM">12 months</a> ago)
        </dd>
        <dt class="property author">Author:</dt>
        <dd class="author">
          zuozhi
        </dd>
        <dt class="property message">Comment:</dt>
        <dd class="message">
          
          <p>
--
</p>

        </dd>
      </dl>
      <div class="diff">
        <div class="legend" id="diff-legend">
          <h3>Legend:</h3>
          <dl>
            <dt class="unmod"></dt><dd>Unmodified</dd>
            <dt class="add"></dt><dd>Added</dd>
            <dt class="rem"></dt><dd>Removed</dd>
            <dt class="mod"></dt><dd>Modified</dd>
          </dl>
        </div>
        <div class="diff">
  <ul class="entries">
      <li class="entry">
        <h2 id="file0">
          <a href="/wiki/public/wiki/cs122b-2018-winter-project4?version=2">cs122b-2018-winter-project4</a>
        </h2>
        <table class="trac-diff inline" summary="Differences" cellspacing="0">
              <colgroup><col class="lineno" /><col class="lineno" /><col class="content" /></colgroup>
              <thead>
                <tr>
                  <th title="Version 1">
                    <a href="/wiki/public/wiki/cs122b-2018-winter-project4?version=1#L17">
                      v1</a>
                  </th>
                  <th title="Version 2">
                    <a href="/wiki/public/wiki/cs122b-2018-winter-project4?version=2#L17">
                      v2</a>
                  </th>
                  <td>Â </td>
                </tr>
              </thead>
            <tbody class="unmod">
                  <tr>
                          <th>17</th><th>17</th><td class="l"><span>Consider our Project 2, in which we implemented two functionalities: search and movie list add to the shopping cart. A user had to click on a search button after typing some keywords in order to see the search results. Also, on each movie list page, a user had to click on a movie in order to see its details; also, adding to the shopping cart required us to change/refresh the page to see if the cart had been updated.&nbsp; We will improve these features with AJAX.</span></td>
                  </tr><tr>
                          <th>18</th><th>18</th><td class="l"><span></span></td>
                  </tr>
            </tbody><tbody class="mod">
                      <tr class="first">
                        <th>19</th><th>Â </th><td class="l"><span>&nbsp;* '''Autocompletion Search:'''<del>&nbsp;where you get search results while you type. Implement a search interface in your project with a single input box. When a user types in keywords character by character, your browser should send a query to the backend, which tokenizes the string into keywords. The last keyword should be treated as a prefix condition. Use MySQL full-text indexes to find movies with a '''title''' matching ALL these keywords (i.e., using the "AND semantics"). For example, the following is an (old) snapshot of the Netflix interface that supports autocompletion on '''movie titles'''. The user has typed in the keywords "'''`good u`'''", and the system found movies with titles that have the keyword "'''`good`'''" and a keyword with "'''`u`'''" as a prefix, such as "'''`The Good, The Bad and the Ugly`'''". We want such a feature on our web site! Note that searching for stopwords ("a", "to", "the") and small words (less than or equal to 3 letters) will not get any result, according to MYSQL fulltext search default settings. Thus you don't need to implement this feature for stopwords and small words. If you are interested in this issue, you can find some reference [https://dev.mysql.com/doc/refman/5.7/en/fulltext-stopwords.html here].</del></span></td>
                      </tr>
                      <tr class="last">
                        <th>Â </th><th>19</th><td class="r"><span>&nbsp;* '''Autocompletion Search:'''<ins></ins></span></td>
                      </tr>
            </tbody><tbody class="unmod">
                  <tr>
                          <th>20</th><th>20</th><td class="l"><span></span></td>
                  </tr>
            </tbody><tbody class="mod">
                      <tr class="first">
                        <th>21</th><th>Â </th><td class="l"><span>&nbsp; [[Image(wiki:cs122b-2017-winter-project4:netflix.jpg)]]</span></td>
                      </tr>
                      <tr>
                        <th>Â </th><th>21</th><td class="r"><span>The "Advanced Search" feature you implemented on project 2, although provides precise search capabilities, is not very user friendly. Most search interfaces in real world websites simply have one input box and can perform search intelligently. Autocomplete feature on the search bar ( auto-suggest, search-as-you-type) is now considered a must-have functionaility. A good autocomplete search interface can dramatically improve user experience. In this project, you need to implement a search input box that can search on more things and have the autocomplete feature.</span></td>
                      </tr><tr>
                        <th>Â </th><th>22</th><td class="r"><span>Search Requirements</span></td>
                      </tr><tr>
                        <th>Â </th><th>23</th><td class="r"><span>The new search requires searching for more than the title field. You should compare the user's query with title, director, and star. </span></td>
                      </tr><tr>
                        <th>Â </th><th>24</th><td class="r"><span>You need to full text search with prefixes on all of the fields. For example, the query is "good u", and the search results will be all the movie titles that contains the word that starts with "good" and starts with "u". For example, "The Good, The Bad and The Ugly", and "Goodbye Uncle Tom"</span></td>
                      </tr><tr>
                        <th>Â </th><th>25</th><td class="r"><span>(TODO: discuss if fuzzy search is possible on name field. Since we don't have separate first name and last name field, the edit distance of typing only first name or last name might be too large)</span></td>
                      </tr><tr>
                        <th>Â </th><th>26</th><td class="r"><span>Autocomplete Requirements:</span></td>
                      </tr><tr>
                        <th>Â </th><th>27</th><td class="r"><span>As the user types in the query in the search box, your Javascript code should send the query to the backend server to get a list of suggested results, and then display the suggestions in the dropdown list. </span></td>
                      </tr><tr>
                        <th>Â </th><th>28</th><td class="r"><span>It's very important for software engineers to find the right tool to use instead of reinventing the wheel. We recommend you to use a Javascript autocomplete library instead of implementing the autocomplete .</span></td>
                      </tr><tr>
                        <th>Â </th><th>29</th><td class="r"><span>We provide a sample autocomplete code using a library (TODO: write sample code). But learning and using a different library will worth x points(TODO: determine how man points for using other library).</span></td>
                      </tr><tr>
                        <th>Â </th><th>30</th><td class="r"><span>Here are some recommended popular libraries. You can also use any library you like that is not on the list.</span></td>
                      </tr><tr>
                        <th>Â </th><th>31</th><td class="r"><span>-- TODO: add libraries</span></td>
                      </tr><tr>
                        <th>Â </th><th>32</th><td class="r"><span>Specific Requirements:</span></td>
                      </tr><tr>
                        <th>Â </th><th>33</th><td class="r"><span>(The autocomplete libraries can just satisfy the requirements or provide you a very easy way to meet the requirement)</span></td>
                      </tr><tr>
                        <th>Â </th><th>34</th><td class="r"><span>The autocomplete suggestion list should not have more than 10 items.</span></td>
                      </tr><tr>
                        <th>Â </th><th>35</th><td class="r"><span>The user should be able to navigate the suggestions in dropdown list using up and down arrow keys on the keyboard. During this process, when a suggested item is selected, the item should be highlighted, the text in the input box should be changed to the item's name.</span></td>
                      </tr><tr>
                        <th>Â </th><th>36</th><td class="r"><span>Your autocomplete suggestion list need to be grouped in to 3 categories: movies, stars, and directors. See how Rotten Tomatoes search divided the suggestions into different groups (movies, celebrities, etc..): https://www.rottentomatoes.com/. You can also not group them explicitly, but indicate clearly on each item instead. See how IMDB search suggestion list shows each item as a movie or as an actor. http://www.imdb.com/</span></td>
                      </tr><tr>
                        <th>Â </th><th>37</th><td class="r"><span>Clicking on any of the suggestion items, or pressing "Enter" when a item is selected during keyboard navigation, should jump to:</span></td>
                      </tr><tr>
                        <th>Â </th><th>38</th><td class="r"><span>if the item is a movie: single movie page</span></td>
                      </tr><tr>
                        <th>Â </th><th>39</th><td class="r"><span>if the item is a star: single star page</span></td>
                      </tr><tr>
                        <th>Â </th><th>40</th><td class="r"><span>if the item is a director: movie list page containing all the movies of this director</span></td>
                      </tr><tr>
                        <th>Â </th><th>41</th><td class="r"><span>If the user doesn't choose any of the suggestions using keyboard, and just hits "Enter" on keyboard or clicks the search button, you should do the search normally as stated above and go to the movie list page.</span></td>
                      </tr><tr>
                        <th>Â </th><th>42</th><td class="r"><span>When the user types only one or two characters, you should not do any search because the results may not be helpful. You should only perform the autocomplete search when the user types in &gt;= 3 characters.</span></td>
                      </tr><tr>
                        <th>Â </th><th>43</th><td class="r"><span>When the user types in the query, you should not do the autocomplete search on every keystroke because the user is still typing. Moreover you don't want to send too many requests to the backend. You should set a small delay time that only perform the autocomplete search after the user stops typing for a short period of time (for example, 300 ms).</span></td>
                      </tr><tr>
                        <th>Â </th><th>44</th><td class="r"><span>If the autocomplete query has been issued before, you don't want to send the request to the server again. (for example, when the user deletes some of the characters). Store the suggestion list of each query in Javascript. Everytime before your code need to do autocomplete search, first check if you can the stored suggestions, if not, then send the query to the server.</span></td>
                      </tr><tr>
                        <th>Â </th><th>45</th><td class="r"><span>Since we limit the suggestion list to a max of 10 items, it is important to show users the most relevant items. Implement a ranking method to reasonable rank the most relevant search results. (TODO: discuss if we want the requirement on ranking or not)</span></td>
                      </tr><tr>
                        <th>Â </th><th>46</th><td class="r"><span>Your autocomplete search needs to be fast. The time that user sees your autocomplete result is the delay time + the query time. It's not user friendly if your autocomplete search takes too long.</span></td>
                      </tr><tr>
                        <th>Â </th><th>47</th><td class="r"><span>Print to the Javascript console:</span></td>
                      </tr><tr>
                        <th>Â </th><th>48</th><td class="r"><span>In order to verify that your code satisfies the constraints, you need to print messages to the Javascript console. In Javascript, "console.log()" is equivalent to "System.out.println()". To see the printed messages, in Chrome, open your webpage -&gt; right click "Inspect", then choose "Console" tab. All popular browsers have something similar, look for "Developer Tools".</span></td>
                      </tr><tr>
                        <th>Â </th><th>49</th><td class="r"><span>We need to see the printed message when:</span></td>
                      </tr><tr>
                        <th>Â </th><th>50</th><td class="r"><span>the autocomplete search is initiated (after the delay)</span></td>
                      </tr><tr>
                        <th>Â </th><th>51</th><td class="r"><span>whether the search is using cached results or sending an ajax request to the server</span></td>
                      </tr><tr class="last">
                        <th>Â </th><th>52</th><td class="r"><span>the suggested list (either from cache or server response)</span></td>
                      </tr>
            </tbody><tbody class="unmod">
                  <tr>
                          <th>22</th><th>53</th><td class="l"><span></span></td>
                  </tr>
            </tbody><tbody class="rem">
                  <tr class="first">
                          <th>23</th><th>Â </th><td class="l"><del>&nbsp;* '''Auto popup window for each movie:''' On each page with a list of movies returned from a search query in project 2, implement the following feature on each returned movie of a search query. For each movie on the list, when the user hovers the mouse over the title of the movie, there will be a small window that shows the movie details, such as its banner, stars, release year and add to shopping cart button. To implement this feature, you need to implement a separate servlet that accepts a movie ID as the input, and replies with the required details in an HTML format. At the client side, you should place this HTML in the appropriate DIV tags and display it to the user. A similar example is GMAIL: when you hover your mouse over one user on your contact list, GMAIL shows you details of this user, such as his/her picture, email address, name, etc. We want such a feature on our web site!</del></td>
                  </tr><tr>
                          <th>24</th><th>Â </th><td class="l"><del></del></td>
                  </tr><tr class="last">
                          <th>25</th><th>Â </th><td class="l"><del>&nbsp; [[Image(wiki:cs122b-2017-winter-project4:gmail.png)]]</del></td>
                  </tr>
            </tbody><tbody class="unmod">
                  <tr>
                          <th>26</th><th>54</th><td class="l"><span></span></td>
                  </tr><tr>
                          <th>27</th><th>55</th><td class="l"><span>[[Span(id=AjaxExample)]]</span></td>
                  </tr>
            </tbody>
        </table>
      </li>
  </ul>
</div>
      </div>
  </div>
    </div>
    <div id="footer" lang="en" xml:lang="en"><hr />
      <a id="tracpowered" href="http://trac.edgewall.org/"><img src="/wiki/public/chrome/common/trac_logo_mini.png" height="30" width="107" alt="Trac Powered" /></a>
      <p class="left">Powered by <a href="/wiki/public/about"><strong>Trac 1.0.13</strong></a><br />
        By <a href="http://www.edgewall.org/">Edgewall Software</a>.</p>
      <p class="right">Visit the Trac open source project at<br /><a href="http://trac.edgewall.org/">http://trac.edgewall.org/</a></p>
    </div>
  </body>
</html>
Mis_redirected¢DtypeEvalueôIhttp_code¢DtypeEvalueÈQdownload_complete¢DtypeEvalueõ