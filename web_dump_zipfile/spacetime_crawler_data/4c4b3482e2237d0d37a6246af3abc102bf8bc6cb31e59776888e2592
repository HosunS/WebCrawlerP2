¦Ifinal_url¡DtypeLhttp_headers¢DtypeEvalue‰¢Ak¢DtypeEvalueNContent-LengthAv¢DtypeEvalueC621¢Ak¢DtypeEvaluePContent-EncodingAv¢DtypeEvalueDgzip¢Ak¢DtypeEvalueMAccept-RangesAv¢DtypeEvalueEbytes¢Ak¢DtypeEvalueDVaryAv¢DtypeEvalueOAccept-Encoding¢Ak¢DtypeEvalueFServerAv¢DtypeEvalueX4Apache/2.4.6 (CentOS) OpenSSL/1.0.2k-fips SVN/1.7.14¢Ak¢DtypeEvalueMLast-ModifiedAv¢DtypeEvalueXFri, 06 Feb 2009 23:28:53 GMT¢Ak¢DtypeEvalueDETagAv¢DtypeEvalueX"499-4624862499740-gzip"¢Ak¢DtypeEvalueDDateAv¢DtypeEvalueXFri, 01 Feb 2019 20:13:46 GMT¢Ak¢DtypeEvalueLContent-TypeAv¢DtypeEvalueXtext/plain; charset=UTF-8Kraw_content¢DtypeEvalueY™1. Suppose that we create a binary tree on n items by inserting the
items one at a time, with each permutation of the items equally likely,
and each new item inserted at a leaf of the tree. Are all distinct
binary trees equally likely to be generated by this process? Why or why
not?

2. (CLRS 13.2-4): Show that any arbitrary n-node binary search tree can
be transformed into any other arbitrary n-node binary search tree using
O(n) rotations. (Hint: first show that at most n-1 right rotations
suffice to transform the tree into a right-going chain.)

3. (CLRS 14.1-7): Find an O(n log n) time algorithm that takes as input
a sequence of numbers and outputs the number of pairs x,y such that x<y
and x occurs before y in the sequence, using binary search trees
augmented with the number of descendants of each node.

4. (CLRS 14.3-6): Suppose we wish to maintain a set of numbers, subject
to insertion and deletion operations; after each operation we wish to
know the distance between the closest two numbers in the set. Describe
how to do this using only a binary search tree with a constant amount of
additional information at each tree, in logarithmic time per operation.
Mis_redirected¢DtypeEvalueôIhttp_code¢DtypeEvalueÈQdownload_complete¢DtypeEvalueõ