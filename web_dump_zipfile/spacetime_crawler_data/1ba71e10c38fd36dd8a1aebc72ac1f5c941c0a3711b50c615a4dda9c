¦Ifinal_url¡DtypeLhttp_headers¢DtypeEvalue‡¢Ak¢DtypeEvalueNContent-LengthAv¢DtypeEvalueE17849¢Ak¢DtypeEvalueMAccept-RangesAv¢DtypeEvalueEbytes¢Ak¢DtypeEvalueFServerAv¢DtypeEvalueX4Apache/2.4.6 (CentOS) OpenSSL/1.0.2k-fips SVN/1.7.14¢Ak¢DtypeEvalueMLast-ModifiedAv¢DtypeEvalueXSun, 07 Oct 2018 20:56:13 GMT¢Ak¢DtypeEvalueDETagAv¢DtypeEvalueT"45b9-577a9bc2221aa"¢Ak¢DtypeEvalueDDateAv¢DtypeEvalueXFri, 01 Feb 2019 19:57:55 GMT¢Ak¢DtypeEvalueLContent-TypeAv¢DtypeEvalueXtext/html; charset=UTF-8Kraw_content¢DtypeEvalueYE¹<HTML>
<HEAD>
<META http-equiv="Content-Type" content="text/html; charset=US-ASCII">
<TITLE>143A Principles of Operating Systems</TITLE>
<LINK HREF="./css/main.css" TYPE="text/css" REL="stylesheet">
<META NAME="Description" CONTENT="Home page of Anton Burtsev.">
<META NAME="Keywords" CONTENT="Anton Burtsev, Burtsev, Anton, cs5460">
<SCRIPT SRC="./scripts/image_switcher.js" LANGUAGE="JavaScript"></SCRIPT>
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" TOPMARGIN="0" MARGINWIDTH="0" MARGINHEIGHT="0">
	<TABLE  ID="text" ALIGN="CENTER" WIDTH="600" BORDER="0" CELLPADDING="0" CELLSPACING="0">
	<TR>
		<TD ALIGN="LEFT" BGCOLOR="#FFFFFF"><!-- top margin --> 
			<IMG SRC="./images/spacer.gif" WIDTH="100%" HEIGHT="15" ALT="" BORDER="0"/>
		</TD>
	</TR>
	<TR>
	<TD>
		<DIV ID="tech_nav">
			<A HREF="../index.html">Home</A>
			<IMG SRC="./images/spacer.gif" WIDTH="100%" HEIGHT="30" ALT="" BORDER="0"/>
		</DIV>
	</TD>
	</TR>	
	<TR>
	<TD COLSPAN="4" ALIGN="LEFT" BGCOLOR="#FFFFFF">


		<P>


<h1>Instructions for building xv6 on Openlab (andromeda) servers</h1> 

<b>Note:</b> Up until summer 2018, Openlab machines were running 32bit operating
systems. In that environment it was very hard (lots of dependencies) to build
the Qemu emulator required to run the xv6 operating system. Therefore,
previously we relied on a Vagrant VM, i.e.  a full 64bit Linux distribution
that was running inside a hardware-assisted virtualization container (VT-x),
inside which we built Qemu and ran xv6. However, as Openlab machines were
updated, it no longer makes sense to start another VM. Now we can simply build
Qemu on the andromeda machines and run xv6 without Vagrant. The instructions
below are now the recommend way to work with this class. 

<p> Xv6 is a real operating system kernel, and hence, it needs real hardware to
boot.  Fortunately, today we can emulate hardware in software. Programs like
QEMU can emulate functionality of the real physical CPU in software. I.e., QEMU
implements the normal CPU loop similar to the one we discussed in class:
fetches an instruction pointed by the instruction pointer register (EIP),
decodes it, performs all permission and condition checks, computes the outcome,
increments EIP and continues to the next instruction. Like a real PC platform,
QEMU emulates hardware boot protocol.  QEMU starts by loading the disk sector
number 0 into the memory location 0x7c00 and jumping to it. Xv6 takes it from
there. At a high level, for xv6 it does not matter if it runs on the real
hardware or under QEMU. Of course, emulation is slower than real hardware, but
besides that as long as QEMU implements the logic of the CPU correctly we do
not see any deviations from a real baremetal execution. Surprisingly, QEMU is
reasonably fast, so you as a human barely notice the difference. </p>

<h2>SSH into Openlab (andromeda-XX)</h2>

<p>
Currently vagrant is installed on Andromeda machines 1 through 75: <b>andromeda-1.ics.uci.edu</b> to <b>andromeda-75.ics.uci.edu</b>.
</p>
<p>
	Before you begin, you need to select an andromeda server for yourself.
	We are following the following method to select a server : 
	<ul>
		<li>Find out your student ID <br>
			(Let's say: 66541280)
		</li>
		<li>Evaluate serverNumber = (studentIDNumber mod 74) +1
			<br>Ex: 66541280 => 37
		</li>
		<li>Your server name is : <b>andromeda-{serverNumber}.ics.uci.edu</b>
			<br>Ex: andromeda-37.ics.uci.edu
		</li>
	</ul>
<p>

To configure your xv6 environment, login to your server

<pre> 
$ ssh UCInetID@andromeda-XX.ics.uci.edu
</pre>


<h3>Troubleshooting your Andromeda ssh connection</h3>

If you get something like
 
<pre>Permission denied (publickey,gssapi-keyex,gssapi-with-mic,password)</pre> 

message from ssh and
you're connecting from outside of campus, you need to need to either use
AnyConnect VPN to tunnel in or setup an SSH keypair for passwordless login.
Openlab machines do not accept outside password login attempts.

<h2>Clone and build Qemu</h2>

<p> To run xv6 we need to compile and install a version of the QEMU emulator.
Default QEMU's debugging facilities, while powerful, are somewhat immature, so
it is highly recommend you use a patched version of Qemu which is maintained by
MIT instead of the stock version that may come with your distribution.

From inside your home folder create a new directory for this class. I suggest
you start in your home folder (unless you know what you're doing this is a good
way to go)
<pre> 
cd ~
mkdir cs143a
</pre>

Change into this new directory
<pre>
cd cs143a
</pre>

Clone the MIT's qemu distribution into the qemu folder  

<pre>git clone https://github.com/mit-pdos/6.828-qemu.git qemu </pre>

Change into qemu folder and initialize another git submodule

<pre>
cd qemu 
git submodule update --init pixman
</pre>

Configure qemu with minimal settings and the prefix pointing to the install
folder 

<pre>./configure --disable-kvm --disable-werror --prefix=/home/&lt;YourUCInetID&gt;/cs143a/qemu-install --target-list="i386-softmmu x86_64-softmmu"</pre>

For example, for me this becomes: 
<pre>./configure --disable-kvm --disable-werror --prefix=/home/aburtsev/cs143a/qemu-install --target-list="i386-softmmu x86_64-softmmu"</pre>

Make and install qemu (this will take some time)

<pre>
make -j 8
make install
</pre>

To make qemu accessible from other programs add it to your path. You can either add it every time you log in to the andromeda machine by exporting the PATH variable, or you can add this line to .bash_profile file in your home folder. 

<pre>
export PATH=$PATH:$HOME/cs143a/qemu-install/bin
</pre>

If you decide to add the PATH permanently to your .bash_profile the line should look 
something like

<pre>export PATH=$HOME/cs143a/qemu-install/bin:/sbin:/bin:/usr/sbin:/usr/bin:/usr/games:/usr/local/sbin:/usr/local/bin:/usr/X11R6/bin:$HOME/bin:$PATH</pre>


<h2>Clone, build, and boot xv6</h2>

Change back into the <tt>cs143a</tt> folder and clone xv6 repository. 

<pre>cd ~/cs143a
git clone git://github.com/mit-pdos/xv6-public.git
Cloning into xv6...
...
</pre>

Build xv6 (you only will see a bunch of output from the make command that
invokes the gcc compiler on all kernel files, links the kernel with ld, creates
the kernel file system with all user-level programs that will be available
inside xv6, and so on): 

<pre>$ cd xv6-public 
$ make </pre>

<p> You're now ready to run xv6.

<pre>
$ make qemu-nox ...  </pre>

<p>You are now running xv6 on top a hardware platform that is emulated by the
Qemu emulator. You are now done with the xv6 setup and can continue moving to any homeworks that are currently assigned. 


<p>You can find more information about QEMU monitor and GDB
debugger <a
href="https://pdos.csail.mit.edu/6.828/2018/labguide.html">here</a>, feel free
to explore them.  </p>



<h1>Old and Deprecated: Instructions for setting up Vagrant xv6
environment</h1> 

<h2>Note: this is an old way to run xv6 on Openlab, it's no longer recommended</h2>

Up until summer 2018, Openlab machines were running 32bit operating systems.
In that environment it was very hard (lots of dependencies) to build the Qemu
emulator required to run the xv6 operating system. Therefore, we decided (with
Openlab admins) that the easiest way to provide xv6-compatible environment is
to run it inside a Vagrant VM, i.e. a full 64bit Linux distribution that was
running inside a hardware-assisted virtualization container (VT-x).  However,
as Openlab machines are updated, it no longer makes sense to start another VM.
Now we can simply build Qemu on the andromeda machines and run xv6 without
Vagrant. Now we recommend that you follow the native "xv6 on Openlab"
instructions above.  

<p> Xv6 is a real operating system kernel, and hence, it needs real hardware to
boot.  Fortunately, today we can emulate hardware in software. Programs like
QEMU can emulate functionality of the real physical CPU in software. I.e., QEMU
implements the normal CPU loop similar to the one we discussed in class:
fetches an instruction pointed by the instruction pointer register (EIP),
decodes it, performs all permission and condition checks, computes the outcome,
increments EIP and continues to the next instruction. Like a real PC platform,
QEMU emulates hardware boot protocol.  QEMU starts by loading the disk sector
number 0 into the memory location 0x7c00 and jumping to it. Xv6 takes it from
there. At a high level, for xv6 it does not matter if it runs on the real
hardware or under QEMU. Of course, emulation is slower than real hardware, but
besides that as long as QEMU implements the logic of the CPU correctly we do
not see any deviations from a real baremetal execution. Surprisingly, QEMU is
reasonably fast, so you as a human barely notice the difference. </p>

<p> To run xv6 we need to compile and install a version of the QEMU emulator.
Due to some compatibility issues it is impossible to compile QEMU directly on
the Openlab (andromeda-XX) machines. Instead, we will run yet another virtual 
machine called Vagrant on the Openlab servers. Vagrant is a user-friendly interface 
to the VirtualBox virtual machine monitor. You will be able to start Vagrant on 
any of the andromeda machines. Vagrant will boot into a version of the Ubuntu 
Linux system. 
</p>

<p>
Currently vagrant is installed on Andromeda machines 1 through 75: <b>andromeda-1.ics.uci.edu</b> to <b>andromeda-75.ics.uci.edu</b>.
</p>
<p>
	Before you begin, you need to select an andromeda server for yourself.
	We are following the following method to select a server : 
	<ul>
		<li>Find out your student ID <br>
			(Let's say: 66541280)
		</li>
		<li>Evaluate serverNumber = (studentIDNumber mod 74) +1
			<br>Ex: 66541280 => 37
		</li>
		<li>Your server name is : <b>andromeda-{serverNumber}.ics.uci.edu</b>
			<br>Ex: andromeda-37.ics.uci.edu
		</li>
	</ul>
<p>

To configure your xv6 environment, login to your server
<pre> 
$ ssh UCInetID@andromeda-XX.ics.uci.edu
</pre>

<h3>Troubleshooting your Andromeda ssh connection</h3>

If you get something like <pre> Permission denied
(publickey,gssapi-keyex,gssapi-with-mic,password) </pre> message from ssh and
you're connecting from outside of campus, you need to need to either use
AnyConnect VPN to tunnel in or setup an SSH keypair for passwordless login.
Openlab machines do not accept outside password login attempts.

<h3>Moving forward</h3>

I suggest you create a new folder for your cs143a homeworks, like:
<pre>
UCInetID@andromeda-XX$mkdir cs143a
</pre>
Change into that directory: 
<pre>
UCInetID@andromeda-XX$cd cs143a
</pre>
Fetch a version of the vagrant environment that explains to vagrant what kind of virtual machine you're planning to run:  
<pre>
UCInetID@andromeda-XX$ wget http://www.ics.uci.edu/~aburtsev/143A/hw/xv6-vagrant-master.tgz
UCInetID@andromeda-XX$ tar -xzvf xv6-vagrant-master.tgz
</pre>
Change into the new folder
<pre>
UCInetID@andromeda-XX$ cd xv6-vagrant-master
</pre>
Change the name of the vagrant VM to something unique (otherwise we all end up with the same VM and vagrant is confused). In the <tt>Vagrantfile</tt> file change the following line 
<pre>
      vb.name = "xv6_box_anton" # <--- You should change this to make VM names unique
</pre>

Start vagrant VM (this will take several minutes as it is building a patched version of QEMU inside)
<pre>
UCInetID@andromeda-XX$ vagrant up
</pre>

<h2>Common Troubleshooting</h2>

<h3>Clearing any previously set forwarded ports...</h3>

If vagrant fails with the following message:
<pre>
==> default: Clearing any previously set forwarded ports...
Vagrant cannot forward the specified ports on this VM, since they
would collide with some other application that is already listening
on these ports. The forwarded port to 20000 is already in use
on the host machine.

To fix this, modify your current project's Vagrantfile to use another
port. Example, where '1234' would be replaced by a unique host port:

  config.vm.network :forwarded_port, guest: 26001, host: 1234
</pre>

Go ahead with the suggested fix. Change the following line in the Vagrantfile setting the host port to something random below 64000: 
<pre>
  config.vm.network "forwarded_port", guest: 26001, host: 30000
</pre>

<h3>Timing out while waiting for machine to boot</h3>

If you're getting something like the above message, maybe your Andromeda server
doesn't have VT-x (virtualization extensions enabled, or doesn't have the Linux
kernel that supports them). You can check by doing


<pre>ls /dev/kvm</pre>

The kvm device should be there. Pick another andromeda machine at random, i.e.,
74 should be ok.

<h3>A VirtualBox machine with the name '/*my name*/' already exists</h3>

If you're getting something like: 

<pre>A VirtualBox machine with the name '/*my name*/' already exists.  Please
use another name or delete the machine with the existing name, and try
again.</pre>

First check if your VM is still running with two commands ps and grep and
combine them with a pipe like this:

<pre>ps -aux | grep VBoxHeadless</pre>

ps lists processes in the system, -a -- list all, -u show user who started it,
-x -- list even the ones that don't have an associated terminal (i.e.,
VBoxHeadless doesn't have it). grep filters only strings that ps outputs to the
specific filter "VBoxHeadless". On andromeda-19 it shows you're still running
something.  


<p>Then you can try halting vagrant with

<pre>vagrant halt</pre>

If it doesn't work, try maybe killing the process like

<pre>kill &lt;process_id&gt;</pre>

You can get <tt>process_id</tt> from ps. If simple kill doesn't work try

<pre>kill -9 &lt;process_id&gt;</pre>

If a process can ignore kill signal (i.e., normally the OS gives a process a
chance to save it's state before exiting with this signal). kill -9 will kill
it without allowing to ignore.

Finally, if you really need to destroy all traces of an exising vagrant VM you
can do 

<pre>vagrant destroy</pre>

<h2>Logging into Vagrant VM</h2>

If vagrant VM is up, you're ready to log in inside and start working on your xv6 Linux environment. Log in inside the vagrant VM. From the same folder where Vagrantfile is (i.e., from cs143a/xv6-vagrant-master) type
<pre>
UCInetID@andromeda-XX$ vagrant ssh
</pre>
</p>

Now you're inside the Linux Ubuntu 12.04.5 LTS. Your new vagrant machine should
have everything you need to compile and run your xv6 code. Vagrant
automatically shares the directory of your host machine where you put the 
`Vagrantfile` file (i.e., the `cs143a/xv6-vagrant-master` folder) as the `/vagrant` 
directory of the vagrant VM.  

<h3>Note: power down your VM when you're done!</h3>

When you're done playing with your xv6 setup, or more specifically with the xv6 Vagrant VM don't forget to power it down (we have hundreds of people working on these assignments, plus other classes use openlab machines too. 
<pre>
vagrant halt
</pre>


<h2>Boot xv6</h2> 

<b>From inside your Vagrant VM</b> fetch the xv6 source:

<pre>
vagrant@odin$ cd /vagrant
vagrant@odin$ mkdir cs143a
vagrant@odin$ cd cs143a
vagrant@odin$ git clone git://github.com/mit-pdos/xv6-public.git
Cloning into xv6...
...
</pre>


Build xv6 (you only will see a bunch of output from the make command that invokes the gcc compiler on all kernel files, links the kernel with ld, creates the kernel file system with all user-level programs that will be available inside xv6, and so on):
<pre>
vagrant@odin$ cd xv6-public
vagrant@odin$ make 
</pre>

<p> You're now ready to run xv6.

<pre>
vagrant@odin$ make qemu-nox
...
</pre>

<p>You can find more information about QEMU monitor and GDB debugger  <a
href="https://pdos.csail.mit.edu/6.828/2011/labguide.html">here</a>, feel free
to explore them.  </p>

<!--<p>You're now ready to start working on the homework (go back to the <a href="hw2-boot-xv6.html">howework page</a>). -->

<h2>Xv6 on your own Linux system</h2>

While we provide instructions for how to use Andromeda machines, you are more than welcome 
to configure and run xv6 on your own laptop, desktop, or VM.  
If you decide to use your own environment, see the instructions on the <a
href="https://pdos.csail.mit.edu/6.828/2018/tools.html">xv6 tools</a> page for
how to set up xv6.  I've successfully built xv6 on my Ubuntu 14.04 LTS and later on 
Ubuntu 16.04 LTS. I had to install the following packages in order to build QEMU: libz-dev,
libtool-bin, libtool, libglib2.0-dev, libpixman-1-dev, libfdt-dev. 


<h2>XV6 in Docker</h2>


<p>In case you want to use run xv6 on your own machine using docker containers, you can try it out as well. 
I have successfully built XV6 using the <b>grantbot/xv6</b> image hosted in the docker <a href="https://hub.docker.com/r/grantbot/xv6/">hub</a><p>
<p>In my localmachine, I downloaded the XV6 source code as follows : </p>
<pre>
localhost$ mkdir XV6_Dev
localhost$ cd XV6_Dev
localhost$ git clone git://github.com/mit-pdos/xv6-public.git
Cloning into xv6...
...
</pre>
<p>Next, you will need to setup Docker, if you don't have it already on your machine. I followed the instructions from
	<a href="https://docs.docker.com/docker-for-mac/">here.</a>
	You will find similar instructions for other OS as well in the docker website. Once you have the setup ready, download the
	<b>grantbot/xv6</b> image using
<pre>
docker pull grantbot/xv6
</pre>
<br>	
Then you can start the container using
<pre>
docker run -v '/{Path to local XV6 folder}/XV6_Dev':/home/a/XV6_Dev/ -i -t grantbot/xv6
</pre>
Once you have the bash prompt you can type the following to start XV6,
<pre>
cd ~/XV6_Dev/
make qemu-nox
</pre>
</p>


</div>

	</TD>			
	</TR>
	<TR>
		<TD ALIGN="LEFT" BGCOLOR="#FFFFFF"><!-- top margin --> 
			<IMG SRC="./images/spacer.gif" WIDTH="100%" HEIGHT="15" ALT="" BORDER="0"/>
		</TD>
	</TR>
	<TR>
	<TD COLSPAN="4">
		<DIV ID="tech">Updated: September, 2018</DIV>
	</TD>
	</TR>
	</TABLE>
</BODY>
</HTML>


Mis_redirected¢DtypeEvalueôIhttp_code¢DtypeEvalueÈQdownload_complete¢DtypeEvalueõ