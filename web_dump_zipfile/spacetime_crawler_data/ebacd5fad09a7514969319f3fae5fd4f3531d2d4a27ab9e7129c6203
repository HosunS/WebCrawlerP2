¦Ifinal_url¡DtypeLhttp_headers¢DtypeEvalue‰¢Ak¢DtypeEvalueNContent-LengthAv¢DtypeEvalueE55935¢Ak¢DtypeEvalueJSet-CookieAv¢DtypeEvalueX°trac_form_token=dd485a526bc45c884d29feed; httponly; Path=/wiki/public, trac_session=d31a47bf65eaaf90766fffef; expires=Mon, 06 May 2019 22:10:48 GMT; httponly; Path=/wiki/public¢Ak¢DtypeEvalueGExpiresAv¢DtypeEvalueXFri, 01 Jan 1999 00:00:00 GMT¢Ak¢DtypeEvalueJKeep-AliveAv¢DtypeEvalueRtimeout=5, max=100¢Ak¢DtypeEvalueFServerAv¢DtypeEvalueX„Apache/2.4.6 (CentOS) OpenSSL/1.0.2k-fips SVN/1.7.14 mod_wsgi/3.4 Python/2.7.5 Phusion_Passenger/4.0.53 mod_perl/2.0.10 Perl/v5.16.3¢Ak¢DtypeEvalueJConnectionAv¢DtypeEvalueJKeep-Alive¢Ak¢DtypeEvalueMCache-ControlAv¢DtypeEvalueOmust-revalidate¢Ak¢DtypeEvalueDDateAv¢DtypeEvalueXTue, 05 Feb 2019 22:10:48 GMT¢Ak¢DtypeEvalueLContent-TypeAv¢DtypeEvalueWtext/html;charset=utf-8Kraw_content¢DtypeEvalueYÚ<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">

    <html xmlns="http://www.w3.org/1999/xhtml">
  
  


  <head>
    <title>
      cs122b-2019-winter-project2 (diff) â€“ Public
    </title>
      <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
      <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <!--[if IE]><script type="text/javascript">
      if (/^#__msie303:/.test(window.location.hash))
        window.location.replace(window.location.hash.replace(/^#__msie303:/, '#'));
    </script><![endif]-->
        <link rel="search" href="/wiki/public/search" />
        <link rel="help" href="/wiki/public/wiki/TracGuide" />
        <link rel="up" href="/wiki/public/wiki/cs122b-2019-winter-project2?action=history" title="Page history" />
        <link rel="next" href="/wiki/public/wiki/cs122b-2019-winter-project2?action=diff&amp;version=4" title="Version 4" />
        <link rel="start" href="/wiki/public/wiki" />
        <link rel="stylesheet" href="/wiki/public/chrome/common/css/trac.css" type="text/css" /><link rel="stylesheet" href="/wiki/public/chrome/common/css/wiki.css" type="text/css" /><link rel="stylesheet" href="/wiki/public/chrome/common/css/diff.css" type="text/css" /><link rel="stylesheet" href="/wiki/public/chrome/tracwysiwyg/wysiwyg.css" type="text/css" />
        <link rel="tracwysiwyg.stylesheet" href="/wiki/public/chrome/common/css/trac.css" /><link rel="tracwysiwyg.stylesheet" href="/wiki/public/chrome/tracwysiwyg/editor.css" />
        <link rel="tracwysiwyg.base" href="/wiki/public" />
        <link rel="prev" href="/wiki/public/wiki/cs122b-2019-winter-project2?action=diff&amp;version=2" title="Version 2" />
        <link rel="shortcut icon" href="/wiki/public/chrome/site/favicon.ico" type="image/x-icon" />
        <link rel="icon" href="/wiki/public/chrome/site/favicon.ico" type="image/x-icon" />
    <style id="trac-noscript" type="text/css">.trac-noscript { display: none !important }</style>
    <script type="text/javascript">
      var _tracwysiwyg={};
    </script>
      <script type="text/javascript" charset="utf-8" src="/wiki/public/chrome/common/js/jquery.js"></script>
      <script type="text/javascript" charset="utf-8" src="/wiki/public/chrome/common/js/babel.js"></script>
      <script type="text/javascript" charset="utf-8" src="/wiki/public/chrome/common/js/trac.js"></script>
      <script type="text/javascript" charset="utf-8" src="/wiki/public/chrome/common/js/search.js"></script>
      <script type="text/javascript" charset="utf-8" src="/wiki/public/chrome/common/js/diff.js"></script>
      <script type="text/javascript" charset="utf-8" src="/wiki/public/chrome/tracwysiwyg/wysiwyg.js"></script>
    <script type="text/javascript">
      jQuery("#trac-noscript").remove();
      jQuery(document).ready(function($) {
        $(".trac-autofocus").focus();
        $(".trac-target-new").attr("target", "_blank");
        setTimeout(function() { $(".trac-scroll").scrollToTop() }, 1);
        $(".trac-disable-on-submit").disableOnSubmit();
      });
    </script>
    <link rel="stylesheet" type="text/css" href="/wiki/public/chrome/common/css/diff.css" />
    <meta name="ROBOTS" content="NOINDEX, NOFOLLOW" />
  </head>
  <body>
    <div id="banner">
      <div id="header">
        <a id="logo" href="http://www.ics.uci.edu/"><img src="/wiki/public/chrome/site/ics.jpg" alt="ICS Logo" height="67" width="128" /></a>
      </div>
      <form id="search" action="/wiki/public/search" method="get">
      </form>
      <div id="metanav" class="nav">
    <ul>
      <li class="first"><a href="/wiki/public/login">Login</a></li><li><a href="/wiki/public/prefs">Preferences</a></li><li class="last"><a href="/wiki/public/about">About Trac</a></li>
    </ul>
  </div>
    </div>
    <div id="mainnav" class="nav">
  </div>
    <div id="main">
      <div id="ctxtnav" class="nav">
        <h2>Context Navigation</h2>
        <ul>
          <li class="first"><span>&larr; <a class="prev" href="/wiki/public/wiki/cs122b-2019-winter-project2?action=diff&amp;version=2" title="Version 2">Previous Change</a></span></li><li><a href="/wiki/public/wiki/cs122b-2019-winter-project2?action=history" title="Page history">Wiki History</a></li><li class="last"><span><a class="next" href="/wiki/public/wiki/cs122b-2019-winter-project2?action=diff&amp;version=4" title="Version 4">Next Change</a> &rarr;</span></li>
        </ul>
        <hr />
      </div>
    <div id="content" class="wiki">
      <h1>
        Changes between
          <a href="/wiki/public/wiki/cs122b-2019-winter-project2?version=2">Version 2</a> and
          <a href="/wiki/public/wiki/cs122b-2019-winter-project2?version=3">Version 3</a> of
          <a href="/wiki/public/wiki/cs122b-2019-winter-project2">cs122b-2019-winter-project2</a>
      </h1>
      <form method="post" id="prefs" action="/wiki/public/wiki/cs122b-2019-winter-project2?version=3"><div><input type="hidden" name="__FORM_TOKEN" value="dd485a526bc45c884d29feed" /></div>
        <div>
          <input type="hidden" name="action" value="diff" />
          <input type="hidden" name="version" value="3" />
          <input type="hidden" name="old_version" value="2" />
          
  <label for="style">View differences</label>
  <select id="style" name="style">
    <option selected="selected" value="inline">inline</option>
    <option value="sidebyside">side by side</option>
  </select>
  <div class="field">
    <label><input type="radio" name="contextall" value="0" checked="checked" />
             Show</label>
      <label><input type="text" name="contextlines" id="contextlines" size="2" maxlength="3" value="2" />
             lines around each change</label><br />
    <label><input type="radio" name="contextall" value="1" />
           Show the changes in full context</label>
  </div>
  <fieldset id="ignore">
    <legend>Ignore:</legend>
    <div class="field">
      <input type="checkbox" id="ignoreblanklines" name="ignoreblanklines" />
      <label for="ignoreblanklines">Blank lines</label>
    </div>
    <div class="field">
      <input type="checkbox" id="ignorecase" name="ignorecase" />
      <label for="ignorecase">Case changes</label>
    </div>
    <div class="field">
      <input type="checkbox" id="ignorewhitespace" name="ignorewhitespace" />
      <label for="ignorewhitespace">White space changes</label>
    </div>
  </fieldset>
  <div class="buttons">
    <input type="submit" name="update" value="Update" />
  </div>

        </div>
      </form>
      <dl id="overview">
        <dt class="property time">Timestamp:</dt>
        <dd class="time">
            Jan 8, 2019 10:36:57 PM (<a class="timeline" href="/wiki/public/timeline?from=2019-01-08T22%3A36%3A57-08%3A00&amp;precision=second" title="See timeline at Jan 8, 2019 10:36:57 PM">4 weeks</a> ago)
        </dd>
        <dt class="property author">Author:</dt>
        <dd class="author">
          dayueb
        </dd>
        <dt class="property message">Comment:</dt>
        <dd class="message">
          
          <p>
--
</p>

        </dd>
      </dl>
      <div class="diff">
        <div class="legend" id="diff-legend">
          <h3>Legend:</h3>
          <dl>
            <dt class="unmod"></dt><dd>Unmodified</dd>
            <dt class="add"></dt><dd>Added</dd>
            <dt class="rem"></dt><dd>Removed</dd>
            <dt class="mod"></dt><dd>Modified</dd>
          </dl>
        </div>
        <div class="diff">
  <ul class="entries">
      <li class="entry">
        <h2 id="file0">
          <a href="/wiki/public/wiki/cs122b-2019-winter-project2?version=3">cs122b-2019-winter-project2</a>
        </h2>
        <table class="trac-diff inline" summary="Differences" cellspacing="0">
              <colgroup><col class="lineno" /><col class="lineno" /><col class="content" /></colgroup>
              <thead>
                <tr>
                  <th title="Version 2">
                    <a href="/wiki/public/wiki/cs122b-2019-winter-project2?version=2#L26">
                      v2</a>
                  </th>
                  <th title="Version 3">
                    <a href="/wiki/public/wiki/cs122b-2019-winter-project2?version=3#L26">
                      v3</a>
                  </th>
                  <td>Â </td>
                </tr>
              </thead>
            <tbody class="unmod">
                  <tr>
                          <th>26</th><th>26</th><td class="l"><span></span></td>
                  </tr><tr>
                          <th>27</th><th>27</th><td class="l"><span>== Project 2 Overview ==</span></td>
                  </tr>
            </tbody><tbody class="mod">
                      <tr class="first">
                        <th>28</th><th>Â </th><td class="l"><span>In this project, you will start the Fabflix business! In <del>&nbsp;particular, you will provide Web-based interfaces to allow customers&nbsp; to browse/search for movie information, add interesting movies to their shopping cart, and check out. The following figure shows the </del> flow of the interfaces you need to implement.</span></td>
                      </tr>
                      <tr class="last">
                        <th>Â </th><th>28</th><td class="r"><span>In this project, you will start the Fabflix business! In <ins>particular, you will provide Web-based interfaces to allow customers to browse/search for movie information, add interesting movies to their shopping cart, and check out. The following figure shows the</ins> flow of the interfaces you need to implement.</span></td>
                      </tr>
            </tbody><tbody class="unmod">
                  <tr>
                          <th>29</th><th>29</th><td class="l"><span></span></td>
                  </tr><tr>
                          <th>30</th><th>30</th><td class="l"><span>[[Image(wiki:cs122b-2019-winter-project2:design-diagram.jpg)]]</span></td>
                  </tr>
            </tbody>
              <tbody class="skipped">
                <tr>
                  <th><a href="/wiki/public/wiki/cs122b-2019-winter-project2?version=2#L32">â€¦</a></th>
                  <th><a href="/wiki/public/wiki/cs122b-2019-winter-project2?version=3#L32">â€¦</a></th>
                  <td>Â </td>
                </tr>
              </tbody>
            <tbody class="unmod">
                  <tr>
                          <th>32</th><th>32</th><td class="l"><span>The following are details about the interfaces.</span></td>
                  </tr><tr>
                          <th>33</th><th>33</th><td class="l"><span></span></td>
                  </tr>
            </tbody><tbody class="mod">
                      <tr class="first">
                        <th>34</th><th>Â </th><td class="l"><span>&nbsp;* The "Login" page asks a customer to provide an email and a&nbsp; password in order to log into the system. '''Use HTTP POST instead of HTTP&nbsp; GET'''[[BR]] so that the username and password are not displayed on the address bar.&nbsp; Note that the email and password are attributes of the customer table.&nbsp; You should use the customer table for authentication, '''NOT''' the <del>&nbsp;</del>database login/password (such as "testuser" and "testpass").</span></td>
                      </tr>
                      <tr class="last">
                        <th>Â </th><th>34</th><td class="r"><span>&nbsp;* The "Login" page asks a customer to provide an email and a&nbsp; password in order to log into the system. '''Use HTTP POST instead of HTTP&nbsp; GET'''[[BR]] so that the username and password are not displayed on the address bar.&nbsp; Note that the email and password are attributes of the customer table.&nbsp; You should use the customer table for authentication, '''NOT''' the <ins></ins>database login/password (such as "testuser" and "testpass").</span></td>
                      </tr>
            </tbody><tbody class="unmod">
                  <tr>
                          <th>35</th><th>35</th><td class="l"><span>&nbsp;* On the "Main" page, the customer can choose either to "Search" for movies or "Browse" for movies.</span></td>
                  </tr><tr>
                          <th>36</th><th>36</th><td class="l"><span>&nbsp;* On the "Searching" page, the customer can search for movies by any of the following attributes or their combination (logical "AND"&nbsp; operation):</span></td>
                  </tr>
            </tbody>
              <tbody class="skipped">
                <tr>
                  <th><a href="/wiki/public/wiki/cs122b-2019-winter-project2?version=2#L61">â€¦</a></th>
                  <th><a href="/wiki/public/wiki/cs122b-2019-winter-project2?version=3#L61">â€¦</a></th>
                  <td>Â </td>
                </tr>
              </tbody>
            <tbody class="unmod">
                  <tr>
                          <th>61</th><th>61</th><td class="l"><span></span></td>
                  </tr><tr>
                          <th>62</th><th>62</th><td class="l"><span>&nbsp;* Here are some examples:</span></td>
                  </tr>
            </tbody><tbody class="mod">
                      <tr class="first">
                        <th>63</th><th>Â </th><td class="l"><span>&nbsp; &nbsp;* 'A_Z':&nbsp; All string that starts with 'A', another character, and end<del></del> with 'Z'.&nbsp; For example, 'ABZ' and 'A2Z' would both satisfy the condition, while&nbsp; 'AKKZ' would not (because there are two characters between A and Z&nbsp; instead of one).</span></td>
                      </tr>
                      <tr class="last">
                        <th>Â </th><th>63</th><td class="r"><span>&nbsp; &nbsp;* 'A_Z':&nbsp; All string that starts with 'A', another character, and end<ins>s</ins> with 'Z'.&nbsp; For example, 'ABZ' and 'A2Z' would both satisfy the condition, while&nbsp; 'AKKZ' would not (because there are two characters between A and Z&nbsp; instead of one).</span></td>
                      </tr>
            </tbody><tbody class="unmod">
                  <tr>
                          <th>64</th><th>64</th><td class="l"><span>&nbsp; &nbsp;* 'ABC%': All strings that start with 'ABC'. For example,&nbsp; 'ABCD' and 'ABCABC' would both satisfy the condition.</span></td>
                  </tr><tr>
                          <th>65</th><th>65</th><td class="l"><span>&nbsp; &nbsp;* '%XYZ': All strings that end with 'XYZ'. For example, 'WXYZ'&nbsp; and 'ZZXYZ' would both satisfy the condition.</span></td>
                  </tr><tr>
                          <th>66</th><th>66</th><td class="l"><span>&nbsp; &nbsp;* '%AN%':&nbsp; All strings that contain the pattern 'AN' anywhere. For example, 'LOS ANGELES' and 'SAN FRANCISCO' would both satisfy the condition.</span></td>
                  </tr><tr>
                          <th>67</th><th>67</th><td class="l"><span></span></td>
                  </tr>
            </tbody><tbody class="mod">
                      <tr class="first">
                        <th>68</th><th>Â </th><td class="l"><span>&nbsp;* ''Sorting'': A user should be able to click on the header of title or rating<del>,</del> so that the results will be sorted (ascending or descending) by the corresponding attribute.</span></td>
                      </tr>
                      <tr class="last">
                        <th>Â </th><th>68</th><td class="r"><span>&nbsp;* ''Sorting'': A user should be able to click on the header of title or rating<ins></ins> so that the results will be sorted (ascending or descending) by the corresponding attribute.</span></td>
                      </tr>
            </tbody><tbody class="unmod">
                  <tr>
                          <th>69</th><th>69</th><td class="l"><span></span></td>
                  </tr><tr>
                          <th>70</th><th>70</th><td class="l"><span>&nbsp;* ''!Previous/Next'': Since there could be many movies on the list, each page can only display a certain number (''N'') of movies, and the interface has "Prev"/"Next" buttons to allow the user to go through all the movies.&nbsp; &nbsp;Your interface should allow the customer to change the number of listings ''N'' per page. You can implement a drop-down menu to choose "N" from a list of predefined values such as 10, 25, 50, 100, etc.</span></td>
                  </tr><tr>
                          <th>71</th><th>71</th><td class="l"><span></span></td>
                  </tr>
            </tbody><tbody class="mod">
                      <tr class="first">
                        <th>72</th><th>Â </th><td class="l"><span>&nbsp;* Using the "Browsing" page, the user can browse movies by either their genres and or title. The "Browsing by movie genre" page has all the (hyperlinked) genres. The user can click on a genre to see all the movies of this genre. The "Browsing by movie title" page categorizes the movies based on their titles. The page organizes all the titles based on their first character in the title in a<del>n a</del>lphabetical order.&nbsp; (Notice that the first character could be a digit such as "2" in "2012".)&nbsp; When the user clicks on a letter, he can see the list of all the movies with this first letter in their title.</span></td>
                      </tr><tr>
                        <th>73</th><th>Â </th><td class="l"><span></span></td>
                      </tr><tr>
                        <th>74</th><th>Â </th><td class="l"><span>&nbsp;* ''Shopping Cart'': For all the pages <del>&nbsp;that display movie information, each movie should have an associated "Add to Shopping Cart" interface. The interface shows the currently number of copies for this item (during this login period), and allow the user to add more copies (or delete all copies) of this item by modifying the quantity. If the user clicks the button, the corresponding number of copies of movies should be set in his shopping cart (or delete the item if the quantity </del> becomes 0).&nbsp; The interface should allow the user to see all the items (with their quantities) in his/her current shopping cart (during this login).</span></td>
                      </tr>
                      <tr>
                        <th>Â </th><th>72</th><td class="r"><span>&nbsp;* Using the "Browsing" page, the user can browse movies by either their genres and or title. The "Browsing by movie genre" page has all the (hyperlinked) genres. The user can click on a genre to see all the movies of this genre. The "Browsing by movie title" page categorizes the movies based on their titles. The page organizes all the titles based on their first character in the title in a<ins></ins>lphabetical order.&nbsp; (Notice that the first character could be a digit such as "2" in "2012".)&nbsp; When the user clicks on a letter, he can see the list of all the movies with this first letter in their title.</span></td>
                      </tr><tr>
                        <th>Â </th><th>73</th><td class="r"><span></span></td>
                      </tr><tr class="last">
                        <th>Â </th><th>74</th><td class="r"><span>&nbsp;* ''Shopping Cart'': For all the pages <ins>that display movie information, each movie should have an associated "Add to Shopping Cart" interface. The interface shows the current number of copies for this item (during this login period), and allow the user to add more copies (or delete all copies) of this item by modifying the quantity. If the user clicks the button, the corresponding number of copies of movies should be set in his shopping cart (or delete the item if the quantity</ins> becomes 0).&nbsp; The interface should allow the user to see all the items (with their quantities) in his/her current shopping cart (during this login).</span></td>
                      </tr>
            </tbody><tbody class="unmod">
                  <tr>
                          <th>75</th><th>75</th><td class="l"><span></span></td>
                  </tr><tr>
                          <th>76</th><th>76</th><td class="l"><span>&nbsp; All pages after login should have a "Checkout" button. If the user clicks this button, there is a "Shopping cart" page that displays the movies in the shopping cart.&nbsp; If the user chooses to proceed to check out, the next page "Ask for Customer Information" should ask the user to provide a credit number, expiration date, and first name and last name of the credit card holder.</span></td>
                  </tr><tr>
                          <th>77</th><th>77</th><td class="l"><span></span></td>
                  </tr>
            </tbody><tbody class="mod">
                      <tr class="first">
                        <th>78</th><th>Â </th><td class="l"><span>&nbsp;* ''' '''''Checkout''''':'''&nbsp; The transaction succeeds only if the user can provide the first name, <del>a last name,a credit card with an expiration date, which match a record '''in the creditcards table (not those </del> in the customers table)'''.&nbsp; If succeeded, the transaction should be recorded in the system (in the "sales" table) and a confirmation page should be displayed.&nbsp; &nbsp;[[BR]]</span></td>
                      </tr>
                      <tr class="last">
                        <th>Â </th><th>78</th><td class="r"><span>&nbsp;* ''' '''''Checkout''''':'''&nbsp; The transaction succeeds only if the user can provide the first name, <ins>the last name, and a credit card with an expiration date, which match a record '''in the credit cards table (not those</ins> in the customers table)'''.&nbsp; If succeeded, the transaction should be recorded in the system (in the "sales" table) and a confirmation page should be displayed.&nbsp; &nbsp;[[BR]]</span></td>
                      </tr>
            </tbody><tbody class="unmod">
                  <tr>
                          <th>79</th><th>79</th><td class="l"><span></span></td>
                  </tr><tr>
                          <th>80</th><th>80</th><td class="l"><span>&nbsp;* '''Performance requirements''': You can decide whether you want to do caching on the Web server for earlier query results.</span></td>
                  </tr><tr>
                          <th>81</th><th>81</th><td class="l"><span></span></td>
                  </tr>
            </tbody><tbody class="mod">
                      <tr class="first">
                        <th>82</th><th>Â </th><td class="l"><span>We are not specifying all the details of the interfaces. You are <del>&nbsp;encouraged to use your imagination to enhance the functionalities. You can implement the above using '''JSP and/or Java servlets''' at the server side. You can use any type of client-side technologies </del> to enhance the functionality of your website (e.g., Javascript, style sheets, etc). Regardless of the client-side technology, you will most likely make extensive use of HTML.</span></td>
                      </tr>
                      <tr class="last">
                        <th>Â </th><th>82</th><td class="r"><span>We are not specifying all the details of the interfaces. You are <ins>encouraged to use your imagination to enhance the functionalities. You can implement the above using '''JSP and/or Java servlets''' at the server side. You can use any type of client-side technologies</ins> to enhance the functionality of your website (e.g., Javascript, style sheets, etc). Regardless of the client-side technology, you will most likely make extensive use of HTML.</span></td>
                      </tr>
            </tbody><tbody class="unmod">
                  <tr>
                          <th>83</th><th>83</th><td class="l"><span></span></td>
                  </tr><tr>
                          <th>84</th><th>84</th><td class="l"><span>----</span></td>
                  </tr>
            </tbody>
              <tbody class="skipped">
                <tr>
                  <th><a href="/wiki/public/wiki/cs122b-2019-winter-project2?version=2#L108">â€¦</a></th>
                  <th><a href="/wiki/public/wiki/cs122b-2019-winter-project2?version=3#L108">â€¦</a></th>
                  <td>Â </td>
                </tr>
              </tbody>
            <tbody class="unmod">
                  <tr>
                          <th>108</th><th>108</th><td class="l"><span>This approach involves lots of !JavaScript and jQuery programming, so we highly recommend you to go through this very nice online tutorial:&nbsp; [http://jqfundamentals.com/ http://jqfundamentals.com/] </span></td>
                  </tr><tr>
                          <th>109</th><th>109</th><td class="l"><span></span></td>
                  </tr>
            </tbody><tbody class="mod">
                      <tr class="first">
                        <th>110</th><th>Â </th><td class="l"><span>===&nbsp; &nbsp; &nbsp; &nbsp;GET <del>api</del> example ===</span></td>
                      </tr>
                      <tr class="last">
                        <th>Â </th><th>110</th><td class="r"><span>===&nbsp; &nbsp; &nbsp; &nbsp;GET <ins>API</ins> example ===</span></td>
                      </tr>
            </tbody><tbody class="unmod">
                  <tr>
                          <th>111</th><th>111</th><td class="l"><span>Here's an example [https://github.com/UCI-Chenli-teaching/project1-api-example project1-api-example] that uses this approach to show a list of stars, which is similar to the project1-star-example we provided in project 1. </span></td>
                  </tr><tr>
                          <th>112</th><th>112</th><td class="l"><span>Note starting with this example we use !DataSource managed by Tomcat, thus we don't have to set database information in each servlet. To config a !DataSource, following tutorial here&nbsp; [https://tomcat.apache.org/tomcat-8.0-doc/jndi-datasource-examples-howto.html https://tomcat.apache.org/tomcat-8.0-doc/jndi-datasource-examples-howto.html] </span></td>
                  </tr><tr>
                          <th>113</th><th>113</th><td class="l"><span>Follow the instruction on README.md to deploy and test the examples on tomcat. </span></td>
                  </tr><tr>
                          <th>114</th><th>114</th><td class="l"><span></span></td>
                  </tr>
            </tbody><tbody class="mod">
                      <tr class="first">
                        <th>115</th><th>Â </th><td class="l"><span>===&nbsp; &nbsp; &nbsp; &nbsp;POST <del>api</del> example ===</span></td>
                      </tr>
                      <tr class="last">
                        <th>Â </th><th>115</th><td class="r"><span>===&nbsp; &nbsp; &nbsp; &nbsp;POST <ins>API</ins> example ===</span></td>
                      </tr>
            </tbody><tbody class="unmod">
                  <tr>
                          <th>116</th><th>116</th><td class="l"><span>Here's an example [https://github.com/UCI-Chenli-teaching/project2-login-example project2-login-example] to show you how to implement the login feature using the new frontend-backend-separation design.</span></td>
                  </tr><tr>
                          <th>117</th><th>117</th><td class="l"><span>Follow the instruction on README.md to deploy and test the examples on tomcat. </span></td>
                  </tr>
            </tbody>
              <tbody class="skipped">
                <tr>
                  <th><a href="/wiki/public/wiki/cs122b-2019-winter-project2?version=2#L128">â€¦</a></th>
                  <th><a href="/wiki/public/wiki/cs122b-2019-winter-project2?version=3#L128">â€¦</a></th>
                  <td>Â </td>
                </tr>
              </tbody>
            <tbody class="unmod">
                  <tr>
                          <th>128</th><th>128</th><td class="l"><span>Form elements are different types of input elements, like text fields, checkboxes, radio buttons, submit buttons, and more.</span></td>
                  </tr><tr>
                          <th>129</th><th>129</th><td class="l"><span></span></td>
                  </tr>
            </tbody><tbody class="mod">
                      <tr class="first">
                        <th>130</th><th>Â </th><td class="l"><span>Here's an example [https://github.com/UCI-Chenli-teaching/project2-form-example project2-form-example] to show you how to implement a<del>&nbsp;HTML &lt;form&gt; to send user search query to the backend, and display the search result within a</del> HTML &lt;table&gt;.</span></td>
                      </tr>
                      <tr class="last">
                        <th>Â </th><th>130</th><td class="r"><span>Here's an example [https://github.com/UCI-Chenli-teaching/project2-form-example project2-form-example] to show you how to implement a<ins>n HTML &lt;form&gt; to send user search query to the backend, and display the search result within an</ins> HTML &lt;table&gt;.</span></td>
                      </tr>
            </tbody><tbody class="unmod">
                  <tr>
                          <th>131</th><th>131</th><td class="l"><span></span></td>
                  </tr><tr>
                          <th>132</th><th>132</th><td class="l"><span>Follow the instruction on README.md to deploy the example on tomcat. </span></td>
                  </tr>
            </tbody><tbody class="mod">
                      <tr class="first">
                        <th>133</th><th>Â </th><td class="l"><span>Click the link http://localhost:8080/project2-form-example<del>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</del>,&nbsp; then enter the search entry and click the "Submit Order" button.&nbsp; It will take the value in the "Last Name" box to query a backend credit card table to retrieve records with that last name.</span></td>
                      </tr><tr>
                        <th>134</th><th>Â </th><td class="l"><span></span></td>
                      </tr><tr>
                        <th>135</th><th>Â </th><td class="l"><span>Note: In the project2-form-example, we used {{{<del>&nbsp;@WebServlet }}} annotation to declare the configuration of a Servlet {{{ FormServlet </del>}}} right on top of class Form definition. This is a relatively new feature supported since Servlet 3.0. In order to scan web.xml properly with Servlet 3.0 or newer, you will need to modify the web.xml as followed:</span></td>
                      </tr>
                      <tr>
                        <th>Â </th><th>133</th><td class="r"><span>Click the link http://localhost:8080/project2-form-example<ins></ins>,&nbsp; then enter the search entry and click the "Submit Order" button.&nbsp; It will take the value in the "Last Name" box to query a backend credit card table to retrieve records with that last name.</span></td>
                      </tr><tr>
                        <th>Â </th><th>134</th><td class="r"><span></span></td>
                      </tr><tr class="last">
                        <th>Â </th><th>135</th><td class="r"><span>Note: In the project2-form-example, we used {{{<ins>@WebServlet}}} annotation to declare the configuration of a Servlet {{{FormServlet</ins>}}} right on top of class Form definition. This is a relatively new feature supported since Servlet 3.0. In order to scan web.xml properly with Servlet 3.0 or newer, you will need to modify the web.xml as followed:</span></td>
                      </tr>
            </tbody><tbody class="unmod">
                  <tr>
                          <th>136</th><th>136</th><td class="l"><span></span></td>
                  </tr><tr>
                          <th>137</th><th>137</th><td class="l"><span>{{{</span></td>
                  </tr>
            </tbody>
              <tbody class="skipped">
                <tr>
                  <th><a href="/wiki/public/wiki/cs122b-2019-winter-project2?version=2#L154">â€¦</a></th>
                  <th><a href="/wiki/public/wiki/cs122b-2019-winter-project2?version=3#L154">â€¦</a></th>
                  <td>Â </td>
                </tr>
              </tbody>
            <tbody class="unmod">
                  <tr>
                          <th>154</th><th>154</th><td class="l"><span>== Servlet session examples ==</span></td>
                  </tr><tr>
                          <th>155</th><th>155</th><td class="l"><span></span></td>
                  </tr>
            </tbody><tbody class="mod">
                      <tr class="first">
                        <th>156</th><th>Â </th><td class="l"><span>Session provides a way to identify a user across more than one page request or visit <del>to a Web </del>site and to store information about that user.</span></td>
                      </tr>
                      <tr class="last">
                        <th>Â </th><th>156</th><td class="r"><span>Session provides a way to identify a user across more than one page request or visit <ins>a web</ins>site and to store information about that user.</span></td>
                      </tr>
            </tbody><tbody class="unmod">
                  <tr>
                          <th>157</th><th>157</th><td class="l"><span></span></td>
                  </tr><tr>
                          <th>158</th><th>158</th><td class="l"><span>The servlet container uses this interface to create a session between an HTTP client and an HTTP server. The session persists for a specified time period, across more than one connection or page request from the user. A session usually corresponds to one user, who may visit a site many times. The server can maintain a session in many ways such as using cookies or rewriting URLs.</span></td>
                  </tr>
            </tbody>
              <tbody class="skipped">
                <tr>
                  <th><a href="/wiki/public/wiki/cs122b-2019-winter-project2?version=2#L160">â€¦</a></th>
                  <th><a href="/wiki/public/wiki/cs122b-2019-winter-project2?version=3#L160">â€¦</a></th>
                  <td>Â </td>
                </tr>
              </tbody>
            <tbody class="unmod">
                  <tr>
                          <th>160</th><th>160</th><td class="l"><span>Here's an example [https://github.com/UCI-Chenli-teaching/project2-session-example project2-session-example] to show you two session usages.</span></td>
                  </tr><tr>
                          <th>161</th><th>161</th><td class="l"><span></span></td>
                  </tr>
            </tbody><tbody class="mod">
                      <tr class="first">
                        <th>162</th><th>Â </th><td class="l"><span>Follow the instruction on README.md to deploy the example on tomcat. And then click the following two <del>url</del>s:</span></td>
                      </tr>
                      <tr class="last">
                        <th>Â </th><th>162</th><td class="r"><span>Follow the instruction on README.md to deploy the example on tomcat. And then click the following two <ins>URL</ins>s:</span></td>
                      </tr>
            </tbody><tbody class="unmod">
                  <tr>
                          <th>163</th><th>163</th><td class="l"><span></span></td>
                  </tr><tr>
                          <th>164</th><th>164</th><td class="l"><span>&nbsp;* http://localhost:8080/project2-session-example/session?myname=Michael [[BR]]</span></td>
                  </tr>
            </tbody>
              <tbody class="skipped">
                <tr>
                  <th><a href="/wiki/public/wiki/cs122b-2019-winter-project2?version=2#L170">â€¦</a></th>
                  <th><a href="/wiki/public/wiki/cs122b-2019-winter-project2?version=3#L170">â€¦</a></th>
                  <td>Â </td>
                </tr>
              </tbody>
            <tbody class="unmod">
                  <tr>
                          <th>170</th><th>170</th><td class="l"><span>== JSP example (Optional) ==</span></td>
                  </tr><tr>
                          <th>171</th><th>171</th><td class="l"><span></span></td>
                  </tr>
            </tbody><tbody class="mod">
                      <tr class="first">
                        <th>172</th><th>Â </th><td class="l"><span>An alternative technology to use is JSP (Java Servlet Pages). JSP is <del>an </del>old technology, but it's still very handy to use. Normal Java Servlet lets you write HTML string in the print statements in Java, which is clumsy. JSP enables you to conveniently write Java code inside HTML. </span></td>
                      </tr><tr>
                        <th>173</th><th>Â </th><td class="l"><span></span></td>
                      </tr><tr>
                        <th>174</th><th>Â </th><td class="l"><span>Here's an example [https://github.com/UCI-Chenli-teaching/project2-jsp-example project2-jsp-example] that generates the <del>html</del> page with JSP, similar to the project1-star-example.</span></td>
                      </tr>
                      <tr>
                        <th>Â </th><th>172</th><td class="r"><span>An alternative technology to use is JSP (Java Servlet Pages). JSP is <ins></ins>old technology, but it's still very handy to use. Normal Java Servlet lets you write HTML string in the print statements in Java, which is clumsy. JSP enables you to conveniently write Java code inside HTML. </span></td>
                      </tr><tr>
                        <th>Â </th><th>173</th><td class="r"><span></span></td>
                      </tr><tr class="last">
                        <th>Â </th><th>174</th><td class="r"><span>Here's an example [https://github.com/UCI-Chenli-teaching/project2-jsp-example project2-jsp-example] that generates the <ins>HTML</ins> page with JSP, similar to the project1-star-example.</span></td>
                      </tr>
            </tbody><tbody class="unmod">
                  <tr>
                          <th>175</th><th>175</th><td class="l"><span></span></td>
                  </tr><tr>
                          <th>176</th><th>176</th><td class="l"><span>Follow the instruction on README.md to deploy the example on tomcat. </span></td>
                  </tr>
            </tbody>
              <tbody class="skipped">
                <tr>
                  <th><a href="/wiki/public/wiki/cs122b-2019-winter-project2?version=2#L193">â€¦</a></th>
                  <th><a href="/wiki/public/wiki/cs122b-2019-winter-project2?version=3#L193">â€¦</a></th>
                  <td>Â </td>
                </tr>
              </tbody>
            <tbody class="unmod">
                  <tr>
                          <th>193</th><th>193</th><td class="l"><span>Use Github for your project 2 code and deploy on AWS, similar to what you have done in project 1.</span></td>
                  </tr><tr>
                          <th>194</th><th>194</th><td class="l"><span></span></td>
                  </tr>
            </tbody><tbody class="mod">
                      <tr class="first">
                        <th>195</th><th>Â </th><td class="l"><span>a) Your submi<del>tt</del>ion is based on commits that pushed to '''github master branch'''. Make sure the file on github master branch is what you want to submit. We are '''NOT''' looking at local git commits. We are '''NOT''' looking at commits on other branches</span></td>
                      </tr>
                      <tr class="last">
                        <th>Â </th><th>195</th><td class="r"><span>a) Your submi<ins>ss</ins>ion is based on commits that pushed to '''github master branch'''. Make sure the file on github master branch is what you want to submit. We are '''NOT''' looking at local git commits. We are '''NOT''' looking at commits on other branches</span></td>
                      </tr>
            </tbody><tbody class="unmod">
                  <tr>
                          <th>196</th><th>196</th><td class="l"><span></span></td>
                  </tr><tr>
                          <th>197</th><th>197</th><td class="l"><span>b) Make sure that if you git clone your project to a new environment, it will run correctly, especially on AWS, because you will clone a version to AWS instance and demo with it.</span></td>
                  </tr><tr>
                          <th>198</th><th>198</th><td class="l"><span></span></td>
                  </tr><tr>
                          <th>199</th><th>199</th><td class="l"><span>c) The submission usually should be IDE free. So only commit your .html, .js, .css, .java, README.md, .gitignore, etc. </span></td>
                  </tr>
            </tbody><tbody class="mod">
                      <tr class="first">
                        <th>200</th><th>Â </th><td class="l"><span>Do not commit IDE setting files for example .eclipse folder, .idea folder. These should be included in the .gitignore file.</span></td>
                      </tr><tr>
                        <th>201</th><th>Â </th><td class="l"><span></span></td>
                      </tr><tr>
                        <th>202</th><th>Â </th><td class="l"><span>d) We will run a script to get the '''LAST''' commit on '''github master branch''' within 24 hours after the due time (grace period). </span></td>
                      </tr><tr>
                        <th>203</th><th>Â </th><td class="l"><span>If you want to use the grace period (with 10 points marked), you can keep pushing commits to github with in 24 hours. </span></td>
                      </tr>
                      <tr>
                        <th>Â </th><th>200</th><td class="r"><span>Do not commit IDE setting files, for example, .eclipse folder, .idea folder. These should be included in the .gitignore file.</span></td>
                      </tr><tr>
                        <th>Â </th><th>201</th><td class="r"><span></span></td>
                      </tr><tr>
                        <th>Â </th><th>202</th><td class="r"><span>d) '''Do not use the upload file feature in Github to submit your codebase.'''</span></td>
                      </tr><tr>
                        <th>Â </th><th>203</th><td class="r"><span></span></td>
                      </tr><tr>
                        <th>Â </th><th>204</th><td class="r"><span>e) We will run a script to get the '''LAST''' commit on '''github master branch''' within 24 hours after the due time (grace period). </span></td>
                      </tr><tr class="last">
                        <th>Â </th><th>205</th><td class="r"><span>If you want to use the grace period (with 10 points marked), you can keep pushing commits to github within 24 hours. </span></td>
                      </tr>
            </tbody><tbody class="unmod">
                  <tr>
                          <th>204</th><th>206</th><td class="l"><span>If you do not want to use grace period, '''DO NOT''' push any commits to github until the grace period is passed. You can keep editing and commit locally if you want though.</span></td>
                  </tr><tr>
                          <th>205</th><th>207</th><td class="l"><span></span></td>
                  </tr>
            </tbody><tbody class="mod">
                      <tr class="first">
                        <th>206</th><th>Â </th><td class="l"><span><del>e</del>) Any commits pushed to github after grace period will be ignored.</span></td>
                      </tr><tr>
                        <th>207</th><th>Â </th><td class="l"><span></span></td>
                      </tr><tr>
                        <th>208</th><th>Â </th><td class="l"><span><del>f) After the grace period, we will post a google sheet contain</del>ning the last commit that we find on github. Please check and confirm it because you will need to demo with this commit.</span></td>
                      </tr><tr>
                        <th>209</th><th>Â </th><td class="l"><span></span></td>
                      </tr><tr>
                        <th>210</th><th>Â </th><td class="l"><span><del>g</del>) Signup for demo slots. Demo signup sheet will be posted separately after due. </span></td>
                      </tr>
                      <tr>
                        <th>Â </th><th>208</th><td class="r"><span><ins>f</ins>) Any commits pushed to github after grace period will be ignored.</span></td>
                      </tr><tr>
                        <th>Â </th><th>209</th><td class="r"><span></span></td>
                      </tr><tr>
                        <th>Â </th><th>210</th><td class="r"><span><ins>g) After the grace period, we will post a google sheet contai</ins>ning the last commit that we find on github. Please check and confirm it because you will need to demo with this commit.</span></td>
                      </tr><tr>
                        <th>Â </th><th>211</th><td class="r"><span></span></td>
                      </tr><tr class="last">
                        <th>Â </th><th>212</th><td class="r"><span><ins>h</ins>) Signup for demo slots. Demo signup sheet will be posted separately after due. </span></td>
                      </tr>
            </tbody><tbody class="unmod">
                  <tr>
                          <th>211</th><th>213</th><td class="l"><span></span></td>
                  </tr><tr>
                          <th>212</th><th>214</th><td class="l"><span></span></td>
                  </tr>
            </tbody>
              <tbody class="skipped">
                <tr>
                  <th><a href="/wiki/public/wiki/cs122b-2019-winter-project2?version=2#L215">â€¦</a></th>
                  <th><a href="/wiki/public/wiki/cs122b-2019-winter-project2?version=3#L217">â€¦</a></th>
                  <td>Â </td>
                </tr>
              </tbody>
            <tbody class="unmod">
                  <tr>
                          <th>215</th><th>217</th><td class="l"><span></span></td>
                  </tr><tr>
                          <th>216</th><th>218</th><td class="l"><span>== Demonstration and Grading Criteria ==</span></td>
                  </tr>
            </tbody><tbody class="mod">
                      <tr class="first">
                        <th>217</th><th>Â </th><td class="l"><span>'''You are required to demonstrate <del>&nbsp;this project'''. Create a running system from your ZIP fileâ€“quickly. Show the correctness, completeness, functionality</del> and performance of your database during your demonstration by using the employee interface developed here. Your task is to convince us '''(in 15 minutes)''' that your work is correctly and completely carried out and the course project is ready to move to phase 3. During the demo, we will grade your project based on the following criteria:</span></td>
                      </tr>
                      <tr class="last">
                        <th>Â </th><th>219</th><td class="r"><span>'''You are required to demonstrate <ins>this project'''. Create a running system from your ZIP fileâ€“quickly. Show the correctness, completeness, functionality,</ins> and performance of your database during your demonstration by using the employee interface developed here. Your task is to convince us '''(in 15 minutes)''' that your work is correctly and completely carried out and the course project is ready to move to phase 3. During the demo, we will grade your project based on the following criteria:</span></td>
                      </tr>
            </tbody><tbody class="unmod">
                  <tr>
                          <th>218</th><th>220</th><td class="l"><span></span></td>
                  </tr><tr>
                          <th>219</th><th>221</th><td class="l"><span>&nbsp;* '''Functionality: ''' How the system is working, whether it fulfills all the project requirements.</span></td>
                  </tr><tr>
                          <th>220</th><th>222</th><td class="l"><span>&nbsp;* '''Design and Performance: ''' You should be considerate in designing the server to make it efficient.&nbsp; For instance, you are welcome to implement the cache functionality to reduce the access to the database server (optional). Moreover, you should not send a query to the server to retrieve results not relevant to the current query or future queries. Your Web server is allowed to use a "LIMIT OFFSET" clause to talk to the database server to retrieve related records for each query.</span></td>
                  </tr>
            </tbody><tbody class="mod">
                      <tr class="first">
                        <th>221</th><th>Â </th><td class="l"><span>&nbsp;* '''Error handling: ''' When an exception occurs, the system shouldn't show it to the user. It should give "appropriate" error messages to the user in every unexpectable condition and provide information <del>&nbsp;about what she needs to do next. The system should never terminate.&nbsp; When a system failure such as loss of connectivity occurs, it should&nbsp; recover&nbsp; itself. In that case, it should reconnect and the user shouldn't lo</del>ose his/her information such as the items in his/her shopping cart.</span></td>
                      </tr><tr>
                        <th>222</th><th>Â </th><td class="l"><span>&nbsp;* '''User interface: ''' Whether it is user<del>&nbsp;</del>friendly enough and it provides a good interface which does not confuse the users. The UI counts for 10% of the total project grade.</span></td>
                      </tr>
                      <tr>
                        <th>Â </th><th>223</th><td class="r"><span>&nbsp;* '''Error handling: ''' When an exception occurs, the system shouldn't show it to the user. It should give "appropriate" error messages to the user in every unexpectable condition and provide information <ins>about what she needs to do next. The system should never terminate.&nbsp; When a system failure such as loss of connectivity occurs, it should recover itself. In that case, it should reconnect and the user shouldn't l</ins>ose his/her information such as the items in his/her shopping cart.</span></td>
                      </tr><tr class="last">
                        <th>Â </th><th>224</th><td class="r"><span>&nbsp;* '''User interface: ''' Whether it is user<ins>-</ins>friendly enough and it provides a good interface which does not confuse the users. The UI counts for 10% of the total project grade.</span></td>
                      </tr>
            </tbody><tbody class="unmod">
                  <tr>
                          <th>223</th><th>225</th><td class="l"><span></span></td>
                  </tr><tr>
                          <th>224</th><th>226</th><td class="l"><span>You could refer to this [https://docs.google.com/spreadsheets/d/1e3sr9DYy3OXAxaD5s0dYzAJ1HbjuuR7aJvyP2JT3Ix4/edit#gid=940689423 checklist] for detailed criteria.</span></td>
                  </tr>
            </tbody>
              <tbody class="skipped">
                <tr>
                  <th><a href="/wiki/public/wiki/cs122b-2019-winter-project2?version=2#L232">â€¦</a></th>
                  <th><a href="/wiki/public/wiki/cs122b-2019-winter-project2?version=3#L234">â€¦</a></th>
                  <td>Â </td>
                </tr>
              </tbody>
            <tbody class="unmod">
                  <tr>
                          <th>232</th><th>234</th><td class="l"><span>b) Generate the WAR file from your github repository and deploy it to your AWS Tomcat. You can do it locally on your machine or remotely on AWS. You can use the maven "mvn package" or generate the WAR file from Eclipse. Show us your git repository folder is in the commit ID we recorded: Do " git checkout master " first, then do " git checkout your_commit_id " using the commit ID we provided. Do " git status " to show us that your git repository is clean.</span></td>
                  </tr><tr>
                          <th>233</th><th>235</th><td class="l"><span></span></td>
                  </tr>
            </tbody><tbody class="mod">
                      <tr class="first">
                        <th>234</th><th>Â </th><td class="l"><span>c) Walk th<del></del>ough your website and cover all the items in the&nbsp; [https://docs.google.com/spreadsheets/d/1e3sr9DYy3OXAxaD5s0dYzAJ1HbjuuR7aJvyP2JT3Ix4/edit#gid=940689423 checklist]. Prepare ahead the sequence of operations that you need to do. Show functionality and error handling of your website.</span></td>
                      </tr><tr>
                        <th>235</th><th>Â </th><td class="l"><span></span></td>
                      </tr><tr>
                        <th>236</th><th>Â </th><td class="l"><span>d) The TA will ask you to briefly explain your codebase or explain how certain functionalities are implemented. You need to show that you understand what's going on with you<del></del> project. Failing to answer the questions will lead to deductions on your grade.</span></td>
                      </tr><tr>
                        <th>237</th><th>Â </th><td class="l"><span></span></td>
                      </tr><tr>
                        <th>238</th><th>Â </th><td class="l"><span></span></td>
                      </tr><tr>
                        <th>239</th><th>Â </th><td class="l"><span>'''Important''': there are lots of functionalities to show during the demo and the time is very limited. <del>Unable to finish the demo under 15 minutes may cause deductions on your grade.</del> '''Be prepared''' when coming to the demo.</span></td>
                      </tr>
                      <tr>
                        <th>Â </th><th>236</th><td class="r"><span>c) Walk th<ins>r</ins>ough your website and cover all the items in the&nbsp; [https://docs.google.com/spreadsheets/d/1e3sr9DYy3OXAxaD5s0dYzAJ1HbjuuR7aJvyP2JT3Ix4/edit#gid=940689423 checklist]. Prepare ahead the sequence of operations that you need to do. Show functionality and error handling of your website.</span></td>
                      </tr><tr>
                        <th>Â </th><th>237</th><td class="r"><span></span></td>
                      </tr><tr>
                        <th>Â </th><th>238</th><td class="r"><span>d) The TA will ask you to briefly explain your codebase or explain how certain functionalities are implemented. You need to show that you understand what's going on with you<ins>r</ins> project. Failing to answer the questions will lead to deductions on your grade.</span></td>
                      </tr><tr>
                        <th>Â </th><th>239</th><td class="r"><span></span></td>
                      </tr><tr>
                        <th>Â </th><th>240</th><td class="r"><span></span></td>
                      </tr><tr class="last">
                        <th>Â </th><th>241</th><td class="r"><span>'''Important''': there are lots of functionalities to show during the demo and the time is very limited. <ins>'''Unable to finish the demo under 15 minutes will be aborted, rescheduled with 10% penalty in the current project.'''</ins> '''Be prepared''' when coming to the demo.</span></td>
                      </tr>
            </tbody><tbody class="unmod">
                  <tr>
                          <th>240</th><th>242</th><td class="l"><span></span></td>
                  </tr><tr>
                          <th>241</th><th>243</th><td class="l"><span></span></td>
                  </tr>
            </tbody>
        </table>
      </li>
  </ul>
</div>
      </div>
  </div>
    </div>
    <div id="footer" lang="en" xml:lang="en"><hr />
      <a id="tracpowered" href="http://trac.edgewall.org/"><img src="/wiki/public/chrome/common/trac_logo_mini.png" height="30" width="107" alt="Trac Powered" /></a>
      <p class="left">Powered by <a href="/wiki/public/about"><strong>Trac 1.0.13</strong></a><br />
        By <a href="http://www.edgewall.org/">Edgewall Software</a>.</p>
      <p class="right">Visit the Trac open source project at<br /><a href="http://trac.edgewall.org/">http://trac.edgewall.org/</a></p>
    </div>
  </body>
</html>
Mis_redirected¢DtypeEvalueôIhttp_code¢DtypeEvalueÈQdownload_complete¢DtypeEvalueõ