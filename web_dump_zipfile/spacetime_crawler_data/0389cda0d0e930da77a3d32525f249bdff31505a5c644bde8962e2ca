¦Ifinal_url¡DtypeLhttp_headers¢DtypeEvalue‡¢Ak¢DtypeEvalueNContent-LengthAv¢DtypeEvalueD8304¢Ak¢DtypeEvalueMAccept-RangesAv¢DtypeEvalueEbytes¢Ak¢DtypeEvalueFServerAv¢DtypeEvalueX4Apache/2.4.6 (CentOS) OpenSSL/1.0.2k-fips SVN/1.7.14¢Ak¢DtypeEvalueMLast-ModifiedAv¢DtypeEvalueXSat, 06 May 1995 06:15:33 GMT¢Ak¢DtypeEvalueDETagAv¢DtypeEvalueT"2070-2d75c32394b40"¢Ak¢DtypeEvalueDDateAv¢DtypeEvalueXThu, 31 Jan 2019 16:45:35 GMT¢Ak¢DtypeEvalueLContent-TypeAv¢DtypeEvalueXtext/html; charset=UTF-8Kraw_content¢DtypeEvalueY p<HTML>
<HEAD>
<TITLE> Data Compression -- Section 2 </TITLE>
</HEAD><BODY>

<H1> Data Compression </H1>

<a name="Sec_2">
<H2> 2.  SEMANTIC DEPENDENT METHODS</H2> </a>

<A HREF="DC-Sec1.html"><IMG SRC="prev.gif" ALT="PREV section"></A>
<A HREF="DC-Sec3.html"><IMG SRC="next.gif" ALT="NEXT section"></A>
<P>

	Semantic dependent data compression techniques are 
designed to respond to specific types of local redundancy
occurring in certain 
applications.  One area in which data compression is 
of great importance is image representation and processing.
There are two major reasons for this.  The first is that digitized
images contain a large amount of local redundancy.  An image is usually
captured in the form of an array of pixels whereas methods which  
exploit the tendency for pixels of like color or intensity to cluster
together may be more efficient.  The second reason for the 
abundance of research in this area is volume.  Digital images 
usually require a very large number of bits, and many uses of digital
images involve large collections of images.
<P>
	One technique used for compression of image data is 
<EM>run length encoding</EM>.  In a common version of run length
encoding, the sequence of image elements along a scan line (row)
is mapped into a sequence of pairs (<VAR>c</VAR>,<VAR>l</VAR>)
where <VAR>c</VAR> represents an intensity or color and <VAR>l</VAR>
the length of the run (sequence of pixels of equal intensity).
For pictures such as weather maps, run length encoding can save a
significant number of bits over the image element sequence
[Gonzalez and Wintz 1977].  Another data compression technique
specific to the area of image data is <EM>difference mapping</EM>, in which
the image is represented as an array of differences in
brightness (or color) between adjacent pixels rather than the
brightness values themselves.  Difference mapping was used
to encode the pictures of Uranus transmitted by <EM>Voyager</EM> 2.  
The 8 bits per pixel needed to represent 256 brightness levels
was reduced to an average of 3 bits per pixel when difference
values were transmitted [Laeser et al. 1986].  In spacecraft 
applications, image fidelity is a major concern due to the effect
of the distance from the spacecraft to earth on transmission
reliability.  Difference mapping was combined with error-correcting 
codes to provide both compression and data integrity in the 
<EM>Voyager</EM> project.  Another method which takes advantage of the
tendency for images to contain large areas of constant intensity
is the use of the quadtree data structure [Samet 1984].
Additional examples of coding techniques used in image processing
can be found in Wilkins and Wintz and in Cappellini [Wilkins and Wintz 1971; Cappellini 1985].
<P>
	Data compression is of interest in business data processing,
both because of the cost savings it offers and because of the
large volume of data manipulated in many business applications.
The types of local redundancy present in business data files include
runs of zeros in numeric fields, sequences of blanks in alphanumeric
fields, and fields which are present in some records and null in
others.  Run length encoding can be used to compress sequences of 
zeros or blanks.  Null suppression may be accomplished
through the use of presence bits [Ruth and Kreutzer 1972].  
Another class of methods exploits cases
in which only a limited set of attribute values exist.  <EM>Dictionary
substitution</EM>  entails replacing alphanumeric representations of information
such as bank account type, insurance policy type, sex, month, etc.  
by the few bits necessary to represent the limited number of possible
attribute values [Reghbati 1981].
<P>
	Cormack describes a data compression system which is
designed for use with database files [Cormack 1985].  
The method, which is part of 
IBM's "Information Management System" (IMS), compresses
individual records and is invoked each time a record
is stored in the database file; expansion is performed each
time a record is retrieved.  Since records may be retrieved
in any order, context information used by the compression
routine is limited to a single record.  In order for
the routine to be applicable to any database, it must be able to
adapt to the format of the record.  The fact that database records
are usually heterogeneous collections of small fields indicates
that the local properties of the data are more important than
its global characteristics.  The compression routine
in IMS is a hybrid method which attacks this local redundancy 
by using different coding schemes for different types of fields.
The identified field types in IMS are <EM>letters of the alphabet, 
numeric digits, packed decimal digit pairs, blank,</EM> and <EM>other</EM>.
When compression begins, a default code is used to encode the 
first character of the record.  For each subsequent character,
the type of the previous character determines the code to be used.
For example, if the record <kbd>01870_ABCD__LMN</kbd> were encoded 
with the <EM>letter</EM> code as default, the leading zero would be
coded using the <EM>letter</EM> code; the 1, 8, 7, 0 and the first
blank (_) would be coded by the <EM>numeric</EM> code.  The <VAR>A</VAR> would be
coded by the <EM>blank</EM> code; <VAR>B</VAR>, <VAR>C</VAR>, <VAR>D</VAR>, and the next blank by the
<EM>letter</EM> code; the next blank and the <VAR>L</VAR> by the <EM>blank</EM>
code; and the <VAR>M</VAR> and <VAR>N</VAR> by the <EM>letter</EM> code. 
Clearly, each code must define a codeword for every
character; the <EM>letter</EM> code would assign the shortest codewords
to letters, the numeric code would favor the digits, etc.  In the system
Cormack describes, the types of the characters are stored in the encode/decode
data structures.  When a character <VAR>c</VAR> is received, the decoder checks
<VAR>type</VAR>(<VAR>c</VAR>) to detect which code table will be used in transmitting the
next character.   The compression algorithm might be more efficient if a special
bit string were used to alert the receiver to a change in code table.
Particularly if fields were reasonably long,  decoding would be more rapid
and the extra bits in the transmission would not be excessive.
Cormack reports that the performance of the IMS compression routines 
is very good; at least fifty sites are currently using the system.
He cites a case of a database containing student records whose size
was reduced by 42.1%, and as a side effect the number of disk operations
required to load the database was reduced by 32.7% [Cormack 1985]. 
<P>
	A variety of approaches to data compression designed with
text files in mind include use of a dictionary
either representing  all of the words in the file so that the
file itself is coded as a list of pointers to the dictionary
[Hahn 1974], or representing common words and word endings so that the
file consists of pointers to the dictionary and encodings
of the less common words [Tropper 1982].  Hand-selection of
common phrases [Wagner 1973], programmed selection of prefixes 
and suffixes [Fraenkel et al. 1983] and programmed selection of
common character pairs [Snyderman and Hunt 1970; Cortesi 1982] 
have also been investigated.
<P>
	This discussion of semantic dependent data compression
techniques represents a limited sample of a very large body of
research.  These methods and others of a like nature are interesting
and of great value in their intended domains.  Their obvious
drawback lies in their limited utility.  It should be noted, however,
that much of the efficiency gained through the use of semantic dependent
techniques can be achieved through more general methods, albeit to
a lesser degree.  For example, the dictionary approaches can be implemented
through either Huffman coding (
<a href="DC-Sec3.html#Sec_3.2">Section 3.2</a>, <a href="DC-Sec4.html#Sec_4">Section 4</a>) or Lempel-Ziv
codes (<a href="DC-Sec5.html#Sec_5.1">Section 5.1</a>).  Cormack's database scheme is a special case of
the codebook approach (<a href="DC-Sec3.html#Sec_3.2">Section 3.2</a>), and run length encoding is one
of the effects of Lempel-Ziv codes. 

<P>
<A HREF="DC-Sec1.html"><IMG SRC="prev.gif" ALT="PREV section"></A>
<A HREF="DC-Sec3.html"><IMG SRC="next.gif" ALT="NEXT section"></A>
<P>
</BODY></HTML>
Mis_redirected¢DtypeEvalueôIhttp_code¢DtypeEvalueÈQdownload_complete¢DtypeEvalueõ