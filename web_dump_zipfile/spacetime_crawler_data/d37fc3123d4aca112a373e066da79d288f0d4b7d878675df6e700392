¦Ifinal_url¢DtypeEvaluex8https://www.ics.uci.edu/~aviral/papers/rISACompiler.htmlLhttp_headers¢DtypeEvalue‡¢Ak¢DtypeEvalueNContent-LengthAv¢DtypeEvalueD2283¢Ak¢DtypeEvalueMAccept-RangesAv¢DtypeEvalueEbytes¢Ak¢DtypeEvalueFServerAv¢DtypeEvalueX4Apache/2.4.6 (CentOS) OpenSSL/1.0.2k-fips SVN/1.7.14¢Ak¢DtypeEvalueMLast-ModifiedAv¢DtypeEvalueXThu, 20 Jul 2006 05:16:20 GMT¢Ak¢DtypeEvalueDETagAv¢DtypeEvalueS"8eb-418fc7aecb100"¢Ak¢DtypeEvalueDDateAv¢DtypeEvalueXThu, 07 Feb 2019 01:21:41 GMT¢Ak¢DtypeEvalueLContent-TypeAv¢DtypeEvalueXtext/html; charset=UTF-8Kraw_content¢DtypeEvalueYë<title>rISACompiler</title>
<body bgcolor=#ffffff>
<h2> An Efficient Compiler Technique for Code Size Reduction 
using Reduced Bit-width ISAs 
</h2>
  
<a href="http://www.ics.uci.edu/~aviral/papers/rISACompiler.pdf"><img
src="pdf.png" alt="pdf" width="34" height="34" border="0"></a>

<a href="http://www.ics.uci.edu/~aviral/papers/rISACompiler.ppt"><img
src="ppt.png" alt="ppt" width="34" height="34" border="0"></a>

<p><i>
<a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/h/Halambi:Ashok.html"> Ashok Halambi </a>,
<a href="http://www.ics.uci.edu/~aviral"> Aviral Shrivastava </a>,
<a href="http://www.ics.uci.edu/~partha"> Partha Biswas </a>,
<a href="http://www.ics.uci.edu/~dutt"> Nikil Dutt </a>, and
<a href="http://www.ics.uci.edu/~nicolau"> Alex Nicolau </a>
</i>

<p><b>DATE 2002: </b><i>Proceedings of the International Conference on Design 
Automation and Test in Europe</i>

<p><b>Abstract: </b>
For many embedded applications, program code size
is a critical design factor. One promising approach for
reducing code size is to employ a "dual instruction set", 
where processor architectures support a normal (usually
32 bit) Instruction Set, and a narrow, space efficient
(usually 16 bit) Instruction Set with a limited set of 
opcodes and access to a limited set of registers. This feature, 
however, requires compilers that can reduce code
size by compiling for both Instruction Sets. Existing
compiler techniques operate at the function-level granularity 
and are unable to make the trade-off between increased register 
pressure (resulting in more spills) and
decreased code size. We present a profitability based
compiler heuristic that operates at the instruction-level
granularity and is able to effectively take advantage of
both Instruction Sets. We also demonstrate improved
code size reduction for the MIPS 32/16 bit ISA, using
our technique. Our approach more than doubles the
code size reduction achieved by existing compilers.
<p>


<hr>

<table cellpadding="2" cellspacing="2" border="0" width="100%">
  <tbody>
    <tr>
      <td valign="left">
      Center For Embedded Computer Systems,<br> 
      Department of Information and Computer Science,<br>
      University of California, Irvine.
      </td>
    </tr>
  </tbody>
</table>
Mis_redirected¢DtypeEvalueõIhttp_code¢DtypeEvalueÈQdownload_complete¢DtypeEvalueõ