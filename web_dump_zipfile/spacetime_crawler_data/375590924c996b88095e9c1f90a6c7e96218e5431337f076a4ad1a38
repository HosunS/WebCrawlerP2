¦Ifinal_url¡DtypeLhttp_headers¢DtypeEvalue‡¢Ak¢DtypeEvalueNContent-LengthAv¢DtypeEvalueD1075¢Ak¢DtypeEvalueMAccept-RangesAv¢DtypeEvalueEbytes¢Ak¢DtypeEvalueFServerAv¢DtypeEvalueXjApache/2.4.6 (CentOS) OpenSSL/1.0.2k-fips SVN/1.7.14 Phusion_Passenger/4.0.53 mod_perl/2.0.10 Perl/v5.16.3¢Ak¢DtypeEvalueMLast-ModifiedAv¢DtypeEvalueXWed, 17 Apr 2013 01:53:45 GMT¢Ak¢DtypeEvalueDETagAv¢DtypeEvalueS"433-4da84c192bc40"¢Ak¢DtypeEvalueDDateAv¢DtypeEvalueXThu, 31 Jan 2019 14:49:07 GMT¢Ak¢DtypeEvalueLContent-TypeAv¢DtypeEvalueXtext/plain; charset=UTF-8Kraw_content¢DtypeEvalueY3/*
  $Id: ftable.h 4928 2009-12-17 22:52:28Z abehm $

  Copyright (C) 2007 by The Regents of the University of California

  Redistribution of this file is permitted under the terms of the 
  BSD license

  Date: 05/20/2006
  Author: Rares Vernica <rares (at) ics.uci.edu>
*/

#ifndef _ftable_h_
#define _ftable_h_

#include <iterator>
#include <map>

#include "sepia/simfunc/simvect.h"

using namespace std;

typedef map<SimVect, unsigned> ContFTable;

class FTable {
private:
  ContFTable *cont;
public:
  FTable(): cont(new ContFTable()) {}
  FTable(const FTable &t);
  ~FTable() { delete cont; }

  FTable& operator=(const FTable &t);
  bool operator==(const FTable &t) const;

  const size_t size() const { return cont->size(); }

  void insert(SimVect vect) { (*cont)[vect]++; }
  void erase(SimVect vect);

  const ContFTable::iterator begin() const { return cont->begin(); }
  const ContFTable::iterator end() const { return cont->end(); }

  friend ostream& operator<<(ostream &out, const FTable &t);
  friend istream& operator>>(istream &in, FTable &t);
};

#endif
Mis_redirected¢DtypeEvalueôIhttp_code¢DtypeEvalueÈQdownload_complete¢DtypeEvalueõ