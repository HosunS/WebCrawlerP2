¦Ifinal_url¡DtypeLhttp_headers¢DtypeEvalue‡¢Ak¢DtypeEvalueNContent-LengthAv¢DtypeEvalueD6496¢Ak¢DtypeEvalueMAccept-RangesAv¢DtypeEvalueEbytes¢Ak¢DtypeEvalueFServerAv¢DtypeEvalueX4Apache/2.4.6 (CentOS) OpenSSL/1.0.2k-fips SVN/1.7.14¢Ak¢DtypeEvalueMLast-ModifiedAv¢DtypeEvalueXSat, 17 Nov 2018 18:36:01 GMT¢Ak¢DtypeEvalueDETagAv¢DtypeEvalueT"1960-57ae08e3c55e7"¢Ak¢DtypeEvalueDDateAv¢DtypeEvalueXThu, 31 Jan 2019 00:46:17 GMT¢Ak¢DtypeEvalueLContent-TypeAv¢DtypeEvalueXtext/html; charset=UTF-8Kraw_content¢DtypeEvalueY`<HTML>
<HEAD>
<META http-equiv="Content-Type" content="text/html; charset=US-ASCII">
<TITLE>143A Principles of Operating Systems</TITLE>
<LINK HREF="./css/main.css" TYPE="text/css" REL="stylesheet">
<META NAME="Description" CONTENT="Home page of Anton Burtsev.">
<META NAME="Keywords" CONTENT="Anton Burtsev, Burtsev, Anton, 143A">
<SCRIPT SRC="./scripts/image_switcher.js" LANGUAGE="JavaScript"></SCRIPT>
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" TOPMARGIN="0" MARGINWIDTH="0" MARGINHEIGHT="0">
	<TABLE  ID="text" ALIGN="CENTER" WIDTH="600" BORDER="0" CELLPADDING="0" CELLSPACING="0">
	<TR>
		<TD ALIGN="LEFT" BGCOLOR="#FFFFFF"><!-- top margin --> 
			<IMG SRC="./images/spacer.gif" WIDTH="100%" HEIGHT="15" ALT="" BORDER="0"/>
		</TD>
	</TR>
	<TR>
	<TD>
		<DIV ID="tech_nav">
			<A HREF="../index.html">Home</A>
			<IMG SRC="./images/spacer.gif" WIDTH="100%" HEIGHT="30" ALT="" BORDER="0"/>
		</DIV>
	</TD>
	</TR>	
	<TR>
	<TD COLSPAN="4" ALIGN="LEFT" BGCOLOR="#FFFFFF">


		<P>


<h1>HW3: System Calls</h1>

<p>This homework asks you to first extend the xv6 kernel with a simple
backtrace system call.

<p>You will program the xv6 operating system, so you should use the same setup
as for the <a href="hw2-boot-xv6.html">HW2: Xv6 boot</a>.

<h2>Backtrace system call</h2>

In this part of the homework you will add a new system call to the xv6 kernel. The main point of the
exercise is for you to see some of the different pieces of the system call
machinery.

<p> Your new system call will print the backtrace of the program, i.e., it's invocation 
history on the console. Specifically, if the user program invokes this new system call 
the system call prints all registers of the user program, and then walks the stack 
frame by frame printing the return addresses saved on the stack on the console.

<p> 
Specifically, your new system call will have the following interface: 

<pre> int backtrace(); </pre> 

And when you invoke it from your test program <tt>bt</tt> should print something like 
this on the console: 

<pre>
$ bt
eax:0x16
ebx:0xbfa8
...
esp:0x2f9c
eip:0x369
ebp:0x2fa8
#0  0x4c
#1  0x6c
#2  0x16
#3  0xffffffff
</pre>

In order to test your system call you should create a user-level program
<tt>bt</tt> that calls your new system call. In order to make your new
<tt>bt</tt> program available to run from the xv6 shell, look at how other
programs are implemented, e.g., <tt>ls</tt> and <tt>wc</tt> and make
appropriate modifications to the Makefile such that the new application gets
compiled, linked, and added to the xv6 filesystem. 

<p>
When you're done, you should be able to invoke your <tt>bt</tt> program from 
the shell. 

You can follow the following example template for <tt>bt.c</tt>:

<pre>
#include "types.h"
#include "stat.h"
#include "user.h"

int baz() __attribute__((noinline)); 
int baz() {
   int a; 
   a = backtrace();
   return a + uptime();  
}

int bar() __attribute__((noinline)); 
int bar() {
  int b; 
  b = baz(); 
  return b + uptime();
}

int foo() __attribute__((noinline)); 
int foo() {
  int c; 
  c = bar();
  return c + uptime();
}


int
main(int argc, char *argv[])
{
  foo();
  exit();
}
</pre>

<p>
In order to make your new <tt>bt</tt> program available to run from
the xv6 shell, add <tt>_bt</tt> to the <tt>UPROGS</tt> definition
in <tt>Makefile</tt>.

<p>Your strategy for making the <tt>backtrace</tt> system call should be to clone all of the
pieces of code that are specific to some existing system call, for example the
"uptime" system call or "read". You should grep for uptime in all the source files, using
<tt>grep -n uptime *.[chS]</tt>.

<h2>Some hints</h2>

<p> It's convenient to implement the body of the <tt>backtrace()</tt> system call in the
syscall.c file. Remember that xv6 saves user registers in the trap frame data structure 
during the system call invocation. Xv6 user programs are compiled with the stack frame, 
and hence if you review the calling convention lecture, you'll be able to implement the logic 
of unwinding the stack. 

<h2>Extra credit (10%): Unwind the stack of the program inside the kernel</h2>

<p> Change your <tt>backtrace()</tt> system call to unwind the kernel stack as well. 

<h2>Extra credit (5%): Maybe you can come up with a way of unwinding the stack of a program that 
does not maintain the stack frames?</h2>

<p> Hint: your implementation does not have to be completely accurate, but should be useful for debugging. 

<h2>Extra credit (15%): implement ps</h2>

Implement the <tt>ps</tt> tool that lists all processes running on the system.
For that you should implement yet another system call <tt>getprocinfo()</tt> that returns information
for a process. Specifically, your new system call will have the following interface: 

<pre> int getprocinfo(int proc_num, struct uproc *up); </pre> 

Where proc_num is the process number in the <tt>ptable.proc[NPROC]</tt> array of all possible processes
and <tt>struct uproc</tt> is a structure that describes the process, i.e., contains the following
information about the process: process name, process id, parent process id,
size of process memory, process state, whether process is waiting on a channel,
and whether it's been killed. 

<p>
You will have to define the <tt>struct uproc</tt> and implement the ps utility
by querying the system repeatedly about all possible processes in the system, i.e., all elements 
of the <tt>ptable.proc[NPROC]</tt> array.
  
You should create a user-level program that calls your new <tt>getprocinfo()</tt> system
call.

<p> When you're done, typing <tt>ps</tt> to an xv6 shell prompt should print
all processes running in the system and information about them. 



<div class="question"> <p><b>Submit</b> <p>Submit your answers on Canvas <a href="https://canvas.eee.uci.edu/courses/12602">HW3 System calls</a> as a compressed tar file of your xv6
source tree (after running make clean). You can use the following command to create a compressed tar file (if you submit extra credit assignments, put a short hw3.txt readme file 
describing what you've done inside your archive). 
<pre>
openlab$ cd xv6-public
openlab$ make clean
openlab$ cd ..
openlab$ tar -czvf hw3.tgz xv6-public
</pre>


</div>

	</TD>			
	</TR>
	<TR>
		<TD ALIGN="LEFT" BGCOLOR="#FFFFFF"><!-- top margin --> 
			<IMG SRC="./images/spacer.gif" WIDTH="100%" HEIGHT="15" ALT="" BORDER="0"/>
		</TD>
	</TR>
	<TR>
	<TD COLSPAN="4">
		<DIV ID="tech">Updated: November, 2018</DIV>
	</TD>
	</TR>
	</TABLE>
</BODY>
</HTML>


Mis_redirected¢DtypeEvalueôIhttp_code¢DtypeEvalueÈQdownload_complete¢DtypeEvalueõ